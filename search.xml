<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2024/08/27/%E7%90%86%E8%AE%BA-%E6%A1%88%E4%BE%8B/"/>
      <url>/2024/08/27/%E7%90%86%E8%AE%BA-%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>b</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><pre><code>这周三在监控里看到一条 top sql，一天执行三百万次，平均每秒 34.7 次， 但是分区表里没有数据，每次逻辑读 78M 左右，很奇怪。我下面尽可能还原一下生产的情况。脱敏信息如下图：</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2024/png/32462703/1724288818454-a1165322-74c4-4646-9845-e0578d2016e5.png?x-oss-process=image/format,webp" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/32462703/1724307663195-6f2f9c21-15c3-432a-b500-45f360beea7a.png#averageHue=%23f7f7f6&clientId=ud21d0b7d-1052-4&from=paste&height=440&id=u23b6f830&originHeight=484&originWidth=1058&originalType=binary&ratio=1.100000023841858&rotation=0&showTitle=false&size=186041&status=done&style=none&taskId=u5f3a269f-d7f8-4db3-8c8e-f125400b089&title=&width=961.8181609713346" alt="image.png"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>我梳理了一些这次试验的疑问，如果有兴趣可以继续往下看，仅个人主观想法，欢迎指正讨论</p><ol><li>一天执行三百万次，平均每秒 34 次，分区表里还没有数据正常吗？</li><li>没有数据逻辑读却很大，平均每次 78M？高水位线造成的吗？但是每张分区表只有 4M 大小，还需要降吗？</li><li>SQL 语句能不能优化？SQL 涉及的表有没有索引？走没有索引？索引是不是最优的？索引选择性怎么样？</li><li>怎么改执行计划 走索引和走全表的区别？怎么优化？</li></ol><p>是不是可有选择单表，废掉分区表</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="1-一天执行三百万次，平均每秒-34-次，分区表里还没有数据正常吗？"><a href="#1-一天执行三百万次，平均每秒-34-次，分区表里还没有数据正常吗？" class="headerlink" title="1. 一天执行三百万次，平均每秒 34 次，分区表里还没有数据正常吗？"></a>1. 一天执行三百万次，平均每秒 34 次，分区表里还没有数据正常吗？</h3><p>每秒 34 次的执行频率并不算特别高，但是正常情况下，这种情况可能是由于这是一张中间缓存一些中间数据，或者 SQL 执行计划被频繁重用，即使没有数据，也可能因为计划的重用导致大量逻辑读。这个应该算正常。</p><h3 id="2-没有数据逻辑读却很大，平均每次-78M？高水位线造成的吗？但是每张分区表只有-4M-大小，还需要降吗？"><a href="#2-没有数据逻辑读却很大，平均每次-78M？高水位线造成的吗？但是每张分区表只有-4M-大小，还需要降吗？" class="headerlink" title="2. 没有数据逻辑读却很大，平均每次 78M？高水位线造成的吗？但是每张分区表只有 4M 大小，还需要降吗？"></a>2. 没有数据逻辑读却很大，平均每次 78M？高水位线造成的吗？但是每张分区表只有 4M 大小，还需要降吗？</h3><p>如果分区表中没有数据，逻辑读的数量应该很小，高逻辑读而没有数据，应该与高水位线（HWM）有关。高水位线指的是表或分区在物理层面上曾经达到过的数据量，即使数据被删除，HWM 并不会自动降低。这可能导致即使表或分区中没有实际数据，但 Oracle 仍然会继续扫描这些块，从而产生大量的逻辑读。那每个分区 4M 的大小值不值得去降水位线呢？</p><ul><li><strong>高水位线：</strong> 数据被删除后，仍然去扫描数据块为空的块。</li></ul><p><strong>是否需要降高水位线</strong>：<br>如果分区表中确实没有数据，但逻辑读仍然很高，那么可以考虑降低高水位线。你可以通过以下步骤完成：</p><ol><li><strong>收缩分区表</strong>：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>table_name<span class="operator">&gt;</span> MOVE <span class="keyword">PARTITION</span> <span class="operator">&lt;</span>partition_name<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>重建索引</strong>：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> INDEX <span class="operator">&lt;</span>index_name<span class="operator">&gt;</span> REBUILD;</span><br></pre></td></tr></table></figure><p>在移动分区或表之后，索引通常需要重建，以确保索引块与表数据块的一致性。</p><ol start="3"><li><strong>收缩空闲空间</strong>：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>table_name<span class="operator">&gt;</span> SHRINK SPACE;</span><br></pre></td></tr></table></figure><p><strong>扩展一：高水位线操作相关</strong><br><strong>4M 应该就是分区表段的初始大小了，应该也没有问题。分区裁剪按照地市去读，有 10 个左右的地市，大概 40M+数据，逻辑读读到 78M 也算正常吧，这个开销也能接受吧。</strong></p><h3 id="3-SQL-语句能不能优化？SQL-涉及的表有没有索引？走没有索引？索引是不是最优的？索引选择性怎么样？"><a href="#3-SQL-语句能不能优化？SQL-涉及的表有没有索引？走没有索引？索引是不是最优的？索引选择性怎么样？" class="headerlink" title="3. SQL 语句能不能优化？SQL 涉及的表有没有索引？走没有索引？索引是不是最优的？索引选择性怎么样？"></a>3. SQL 语句能不能优化？SQL 涉及的表有没有索引？走没有索引？索引是不是最优的？索引选择性怎么样？</h3><p><strong>SQL 优化</strong>：首先，你需要查看 SQL 的执行计划（使用 <code>EXPLAIN PLAN</code> 或者 <code>DBMS_XPLAN</code>）。检查执行计划时应注意以下几点：</p><ul><li><strong>是否使用索引</strong>：如果 SQL 没有使用索引，而是走了全表扫描（Full Table Scan），那么可能需要创建或优化索引。</li><li><strong>索引的选择性</strong>：选择性越高的索引效果越好。可以通过分析 <code>v$segment_statistics</code> 或 <code>DBA_HIST_SQLSTAT</code> 来查看索引的使用情况。</li><li><strong>索引是否最优</strong>：在创建索引时，确保索引的列是查询条件中最常使用的，并且顺序和组合要合理。</li></ul><p>这里可能出不知道各类的信息去哪里找？没事，作者整理一份思维导图，优化语句少不了要了解信息<br><strong>扩展二：SQL 优化涉及的信息思维导图</strong></p><h3 id="4-怎么改执行计划，走索引和走全表的区别？怎么优化？"><a href="#4-怎么改执行计划，走索引和走全表的区别？怎么优化？" class="headerlink" title="4. 怎么改执行计划，走索引和走全表的区别？怎么优化？"></a>4. 怎么改执行计划，走索引和走全表的区别？怎么优化？</h3><p><strong>改执行计划</strong>：要优化执行计划并强制走索引：</p><ol><li><strong>使用提示（Hint）</strong>：在 SQL 中直接使用 <code>INDEX</code> 提示强制使用索引。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="comment">/*+ INDEX(table_name index_name) */</span> column_list <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>调整统计信息</strong>：确保表和索引的统计信息是最新的。你可以使用以下命令收集统计信息：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXEC</span> DBMS_STATS.GATHER_TABLE_STATS(<span class="string">&#x27;schema_name&#x27;</span>, <span class="string">&#x27;table_name&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>避免全表扫描</strong>：如果表数据量较大，但 SQL 总是走全表扫描，可以尝试通过：<ul><li>增加筛选条件，减少全表扫描的必要性。</li><li>使用分区裁剪，确保查询只扫描必要的分区。</li></ul></li><li><strong>索引覆盖</strong>：如果查询中包含的列全部都在索引中，那么 Oracle 可以直接使用索引覆盖查询，避免访问表数据块。</li></ol><p>除了索引还能怎么优化呢？走了索引效果不一定就不全表扫效果要好，我们 <strong>生产上不宜操作，我们先模拟一个环境，在测试环境分析</strong> 吧！</p><h2 id="实验测试"><a href="#实验测试" class="headerlink" title="实验测试"></a>实验测试</h2><p> 我们先 <strong>创建一个分区表有几个地市的数据，按照‘地市-时间’联合字段分区，TOPSQL 是一个查询语句，要查询其中一个地市的数据，但是数据是空的，执行次数和逻辑读很高。</strong><br><strong>模拟一个类似的环境，看看有什么值得剖析的地方。</strong></p><h3 id="1、环境模拟"><a href="#1、环境模拟" class="headerlink" title="1、环境模拟"></a>1、环境模拟</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 模拟不存在数据但是逻辑读很大，索引能不能优化语句，每天执行三百万次</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">--查询表空间位置</span></span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> v$datafile;</span><br><span class="line"><span class="comment">--创建表空间</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>space tab2_r1_p310 datafile <span class="string">&#x27;/u01/oradata/tab2_r1_p310.dbf&#x27;</span> size <span class="number">20</span>m autoextend <span class="keyword">on</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>space tab2_r1_p311 datafile <span class="string">&#x27;/u01/oradata/tab2_r1_p311.dbf&#x27;</span> size <span class="number">20</span>m autoextend <span class="keyword">on</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>space tab2_r1_p312 datafile <span class="string">&#x27;/u01/oradata/tab2_r1_p312.dbf&#x27;</span> size <span class="number">20</span>m autoextend <span class="keyword">on</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>space tab2_r1_pmax datafile <span class="string">&#x27;/u01/oradata/tab2_r1_pmax.dbf&#x27;</span> size <span class="number">20</span>m autoextend <span class="keyword">on</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">-- 删除表空间</span></span><br><span class="line"> <span class="keyword">drop</span> tablespase tab2_r1_p310; <span class="comment">--文件系统物理上不会删除/ASM会自动删除</span></span><br><span class="line"> <span class="keyword">drop</span> TABLESPACE tab2_r1_p311;</span><br><span class="line"> <span class="keyword">drop</span> TABLESPACE tab2_r1_p312;</span><br><span class="line"> <span class="keyword">drop</span> TABLESPACE tab2_r1_pmax;</span><br><span class="line"> <span class="keyword">DROP</span> TABLESPACE tab2_r1_p310 INCLUDING CONTENTS <span class="keyword">AND</span> DATAFILES;</span><br><span class="line"><span class="comment">-- 删除表空间内的所有内容及其相关的数据文件,这个操作是不可逆的</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">--创建分区表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tab2 (</span><br><span class="line">    ACCOUNTID NUMBER(<span class="number">20</span>),</span><br><span class="line">    region NUMBER(<span class="number">20</span>),</span><br><span class="line">    name VARCHAR2(<span class="number">100</span>),</span><br><span class="line">    sex VARCHAR2(<span class="number">100</span>),</span><br><span class="line">    created_time <span class="type">DATE</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span> (region, created_time) (</span><br><span class="line">    <span class="keyword">PARTITION</span> PART_310_202304 <span class="keyword">VALUES</span> LESS THAN (<span class="number">310</span>, TO_DATE(<span class="string">&#x27;2023-05-01 00:00:00&#x27;</span>, <span class="string">&#x27;SYYYY-MM-DD HH24:MI:SS&#x27;</span>, <span class="string">&#x27;NLS_CALENDAR=GREGORIAN&#x27;</span>)) SEGMENT CREATION IMMEDIATE TABLESPACE tab2_r1_p310,</span><br><span class="line">    <span class="keyword">PARTITION</span> PART_310_202305 <span class="keyword">VALUES</span> LESS THAN (<span class="number">310</span>, TO_DATE(<span class="string">&#x27;2023-06-01 00:00:00&#x27;</span>, <span class="string">&#x27;SYYYY-MM-DD HH24:MI:SS&#x27;</span>, <span class="string">&#x27;NLS_CALENDAR=GREGORIAN&#x27;</span>)) SEGMENT CREATION IMMEDIATE TABLESPACE tab2_r1_p310,</span><br><span class="line">    <span class="keyword">PARTITION</span> PART_310_202306 <span class="keyword">VALUES</span> LESS THAN (<span class="number">310</span>, TO_DATE(<span class="string">&#x27;2023-07-01 00:00:00&#x27;</span>, <span class="string">&#x27;SYYYY-MM-DD HH24:MI:SS&#x27;</span>, <span class="string">&#x27;NLS_CALENDAR=GREGORIAN&#x27;</span>)) SEGMENT CREATION IMMEDIATE TABLESPACE tab2_r1_p310,</span><br><span class="line"><span class="keyword">PARTITION</span> PART_311_202304 <span class="keyword">VALUES</span> LESS THAN (<span class="number">311</span>, TO_DATE(<span class="string">&#x27;2023-05-01 00:00:00&#x27;</span>, <span class="string">&#x27;SYYYY-MM-DD HH24:MI:SS&#x27;</span>, <span class="string">&#x27;NLS_CALENDAR=GREGORIAN&#x27;</span>)) SEGMENT CREATION IMMEDIATE TABLESPACE tab2_r1_p311,</span><br><span class="line">    <span class="keyword">PARTITION</span> PART_311_202305 <span class="keyword">VALUES</span> LESS THAN (<span class="number">311</span>, TO_DATE(<span class="string">&#x27;2023-06-01 00:00:00&#x27;</span>, <span class="string">&#x27;SYYYY-MM-DD HH24:MI:SS&#x27;</span>, <span class="string">&#x27;NLS_CALENDAR=GREGORIAN&#x27;</span>)) SEGMENT CREATION IMMEDIATE TABLESPACE tab2_r1_p311,</span><br><span class="line">    <span class="keyword">PARTITION</span> PART_311_202306 <span class="keyword">VALUES</span> LESS THAN (<span class="number">311</span>, TO_DATE(<span class="string">&#x27;2023-07-01 00:00:00&#x27;</span>, <span class="string">&#x27;SYYYY-MM-DD HH24:MI:SS&#x27;</span>, <span class="string">&#x27;NLS_CALENDAR=GREGORIAN&#x27;</span>)) SEGMENT CREATION IMMEDIATE TABLESPACE tab2_r1_p311,</span><br><span class="line"><span class="keyword">PARTITION</span> PART_312_202304 <span class="keyword">VALUES</span> LESS THAN (<span class="number">312</span>, TO_DATE(<span class="string">&#x27;2023-05-01 00:00:00&#x27;</span>, <span class="string">&#x27;SYYYY-MM-DD HH24:MI:SS&#x27;</span>, <span class="string">&#x27;NLS_CALENDAR=GREGORIAN&#x27;</span>)) SEGMENT CREATION IMMEDIATE TABLESPACE tab2_r1_p312,</span><br><span class="line">    <span class="keyword">PARTITION</span> PART_312_202305 <span class="keyword">VALUES</span> LESS THAN (<span class="number">312</span>, TO_DATE(<span class="string">&#x27;2023-06-01 00:00:00&#x27;</span>, <span class="string">&#x27;SYYYY-MM-DD HH24:MI:SS&#x27;</span>, <span class="string">&#x27;NLS_CALENDAR=GREGORIAN&#x27;</span>)) SEGMENT CREATION IMMEDIATE TABLESPACE tab2_r1_p312,</span><br><span class="line">    <span class="keyword">PARTITION</span> PART_312_202306 <span class="keyword">VALUES</span> LESS THAN (<span class="number">312</span>, TO_DATE(<span class="string">&#x27;2023-07-01 00:00:00&#x27;</span>, <span class="string">&#x27;SYYYY-MM-DD HH24:MI:SS&#x27;</span>, <span class="string">&#x27;NLS_CALENDAR=GREGORIAN&#x27;</span>)) SEGMENT CREATION IMMEDIATE TABLESPACE tab2_r1_p312,</span><br><span class="line">    <span class="keyword">PARTITION</span> pmax <span class="keyword">VALUES</span> LESS THAN (MAXVALUE, MAXVALUE) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 310</span></span><br><span class="line"><span class="comment">-- 插入 2023 年 4 月的数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab2 (ACCOUNTID, name, region, sex, created_time)</span><br><span class="line"><span class="keyword">SELECT</span> rownum, <span class="string">&#x27;test&#x27;</span> <span class="operator">||</span> rownum, <span class="number">310</span>, DECODE(<span class="built_in">MOD</span>(rownum, <span class="number">2</span>), <span class="number">0</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>), </span><br><span class="line">       TO_DATE(<span class="string">&#x27;2023-04-15 12:00:00&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> dual</span><br><span class="line"><span class="keyword">CONNECT</span> <span class="keyword">BY</span> rownum <span class="operator">&lt;=</span> <span class="number">100000</span>;</span><br><span class="line"><span class="comment">-- 插入 2023 年 5 月的数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab2 (ACCOUNTID, name, region, sex, created_time)</span><br><span class="line"><span class="keyword">SELECT</span> rownum <span class="operator">+</span> <span class="number">100000</span>, <span class="string">&#x27;test&#x27;</span> <span class="operator">||</span> rownum, <span class="number">310</span>, DECODE(<span class="built_in">MOD</span>(rownum, <span class="number">2</span>), <span class="number">0</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>), </span><br><span class="line">       TO_DATE(<span class="string">&#x27;2023-05-15 12:00:00&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> dual</span><br><span class="line"><span class="keyword">CONNECT</span> <span class="keyword">BY</span> rownum <span class="operator">&lt;=</span> <span class="number">100000</span>;</span><br><span class="line"><span class="comment">-- 插入 2023 年 6 月的数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab2 (ACCOUNTID, name, region, sex, created_time)</span><br><span class="line"><span class="keyword">SELECT</span> rownum <span class="operator">+</span> <span class="number">200000</span>, <span class="string">&#x27;test&#x27;</span> <span class="operator">||</span> rownum, <span class="number">310</span>, DECODE(<span class="built_in">MOD</span>(rownum, <span class="number">2</span>), <span class="number">0</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>), </span><br><span class="line">       TO_DATE(<span class="string">&#x27;2023-06-15 12:00:00&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> dual</span><br><span class="line"><span class="keyword">CONNECT</span> <span class="keyword">BY</span> rownum <span class="operator">&lt;=</span> <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 311</span></span><br><span class="line"><span class="comment">-- 插入 2023 年 4 月的数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab2 (ACCOUNTID, name, region, sex, created_time)</span><br><span class="line"><span class="keyword">SELECT</span> rownum, <span class="string">&#x27;test&#x27;</span> <span class="operator">||</span> rownum, <span class="number">311</span>, DECODE(<span class="built_in">MOD</span>(rownum, <span class="number">2</span>), <span class="number">0</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>), </span><br><span class="line">       TO_DATE(<span class="string">&#x27;2023-04-15 12:00:00&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> dual</span><br><span class="line"><span class="keyword">CONNECT</span> <span class="keyword">BY</span> rownum <span class="operator">&lt;=</span> <span class="number">100000</span>;</span><br><span class="line"><span class="comment">-- 插入 2023 年 5 月的数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab2 (ACCOUNTID, name, region, sex, created_time)</span><br><span class="line"><span class="keyword">SELECT</span> rownum <span class="operator">+</span> <span class="number">100000</span>, <span class="string">&#x27;test&#x27;</span> <span class="operator">||</span> rownum, <span class="number">311</span>, DECODE(<span class="built_in">MOD</span>(rownum, <span class="number">2</span>), <span class="number">0</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>), </span><br><span class="line">       TO_DATE(<span class="string">&#x27;2023-05-15 12:00:00&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> dual</span><br><span class="line"><span class="keyword">CONNECT</span> <span class="keyword">BY</span> rownum <span class="operator">&lt;=</span> <span class="number">100000</span>;</span><br><span class="line"><span class="comment">-- 插入 2023 年 6 月的数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab2 (ACCOUNTID, name, region, sex, created_time)</span><br><span class="line"><span class="keyword">SELECT</span> rownum <span class="operator">+</span> <span class="number">200000</span>, <span class="string">&#x27;test&#x27;</span> <span class="operator">||</span> rownum, <span class="number">311</span>, DECODE(<span class="built_in">MOD</span>(rownum, <span class="number">2</span>), <span class="number">0</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>), </span><br><span class="line">       TO_DATE(<span class="string">&#x27;2023-06-15 12:00:00&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> dual</span><br><span class="line"><span class="keyword">CONNECT</span> <span class="keyword">BY</span> rownum <span class="operator">&lt;=</span> <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 312</span></span><br><span class="line"><span class="comment">-- 插入 2023 年 4 月的数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab2 (ACCOUNTID, name, region, sex, created_time)</span><br><span class="line"><span class="keyword">SELECT</span> rownum, <span class="string">&#x27;test&#x27;</span> <span class="operator">||</span> rownum, <span class="number">312</span>, DECODE(<span class="built_in">MOD</span>(rownum, <span class="number">2</span>), <span class="number">0</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>), </span><br><span class="line">       TO_DATE(<span class="string">&#x27;2023-04-15 12:00:00&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> dual</span><br><span class="line"><span class="keyword">CONNECT</span> <span class="keyword">BY</span> rownum <span class="operator">&lt;=</span> <span class="number">100000</span>;</span><br><span class="line"><span class="comment">-- 插入 2023 年 5 月的数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab2 (ACCOUNTID, name, region, sex, created_time)</span><br><span class="line"><span class="keyword">SELECT</span> rownum <span class="operator">+</span> <span class="number">100000</span>, <span class="string">&#x27;test&#x27;</span> <span class="operator">||</span> rownum, <span class="number">312</span>, DECODE(<span class="built_in">MOD</span>(rownum, <span class="number">2</span>), <span class="number">0</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>), </span><br><span class="line">       TO_DATE(<span class="string">&#x27;2023-05-15 12:00:00&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> dual</span><br><span class="line"><span class="keyword">CONNECT</span> <span class="keyword">BY</span> rownum <span class="operator">&lt;=</span> <span class="number">100000</span>;</span><br><span class="line"><span class="comment">-- 插入 2023 年 6 月的数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab2 (ACCOUNTID, name, region, sex, created_time)</span><br><span class="line"><span class="keyword">SELECT</span> rownum <span class="operator">+</span> <span class="number">200000</span>, <span class="string">&#x27;test&#x27;</span> <span class="operator">||</span> rownum, <span class="number">312</span>, DECODE(<span class="built_in">MOD</span>(rownum, <span class="number">2</span>), <span class="number">0</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>), </span><br><span class="line">       TO_DATE(<span class="string">&#x27;2023-06-15 12:00:00&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> dual</span><br><span class="line"><span class="keyword">CONNECT</span> <span class="keyword">BY</span> rownum <span class="operator">&lt;=</span> <span class="number">100000</span>;</span><br></pre></td></tr></table></figure><h3 id="2、模拟的查询语句-TOPSQL"><a href="#2、模拟的查询语句-TOPSQL" class="headerlink" title="2、模拟的查询语句 TOPSQL"></a>2、模拟的查询语句 TOPSQL</h3><p>需要从‘地市-时间’联合字段的分区表中查询一个分区的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TO_CHAR(ACCOUNTID) <span class="keyword">AS</span> ACCOUNTID,</span><br><span class="line">       TO_CHAR(created_time, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>) <span class="keyword">AS</span> INTIME,</span><br><span class="line">       name,</span><br><span class="line">       region</span><br><span class="line">  <span class="keyword">FROM</span> TAB2</span><br><span class="line"> <span class="keyword">WHERE</span> region <span class="operator">=</span> <span class="number">311</span></span><br><span class="line"> <span class="keyword">ORDER</span> <span class="keyword">BY</span> created_time <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><h3 id="3、查看执行计划"><a href="#3、查看执行计划" class="headerlink" title="3、查看执行计划"></a>3、查看执行计划</h3><p>–<strong>查询计划 set autotrace traceonly 同 set autotrace on，但是不显示查询输出。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">SYS<span class="variable">@orcl</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> TO_CHAR(ACCOUNTID) <span class="keyword">AS</span> ACCOUNTID,</span><br><span class="line">  <span class="number">2</span>         TO_CHAR(created_time, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>) <span class="keyword">AS</span> INTIME,</span><br><span class="line">  <span class="number">3</span>         name,</span><br><span class="line">  <span class="number">4</span>         region</span><br><span class="line">  <span class="number">5</span>    <span class="keyword">FROM</span> TAB2</span><br><span class="line">  <span class="number">6</span>   <span class="keyword">WHERE</span> region <span class="operator">=</span> <span class="number">311</span></span><br><span class="line">  <span class="number">7</span>   <span class="keyword">ORDER</span> <span class="keyword">BY</span> created_time <span class="keyword">ASC</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">300000</span> <span class="keyword">rows</span> selected.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Execution Plan</span><br><span class="line"><span class="comment">----------------------------------------------------------</span></span><br><span class="line">Plan hash <span class="keyword">value</span>: <span class="number">3230056249</span></span><br><span class="line"><span class="comment">----------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="operator">|</span> Id  <span class="operator">|</span> Operation                 <span class="operator">|</span> Name <span class="operator">|</span> <span class="keyword">Rows</span>  <span class="operator">|</span> Bytes <span class="operator">|</span>TempSpc<span class="operator">|</span> Cost (<span class="operator">%</span>CPU)<span class="operator">|</span> <span class="type">Time</span>     <span class="operator">|</span> Pstart<span class="operator">|</span> Pstop <span class="operator">|</span></span><br><span class="line"><span class="comment">----------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">0</span> <span class="operator">|</span> <span class="keyword">SELECT</span> STATEMENT          <span class="operator">|</span>      <span class="operator">|</span>   <span class="number">299</span>K<span class="operator">|</span>    <span class="number">24</span>M<span class="operator">|</span>       <span class="operator">|</span>  <span class="number">6763</span>   (<span class="number">3</span>)<span class="operator">|</span> <span class="number">00</span>:<span class="number">01</span>:<span class="number">22</span> <span class="operator">|</span>       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">1</span> <span class="operator">|</span>  SORT <span class="keyword">ORDER</span> <span class="keyword">BY</span>            <span class="operator">|</span>      <span class="operator">|</span>   <span class="number">299</span>K<span class="operator">|</span>    <span class="number">24</span>M<span class="operator">|</span>    <span class="number">28</span>M<span class="operator">|</span>  <span class="number">6763</span>   (<span class="number">3</span>)<span class="operator">|</span> <span class="number">00</span>:<span class="number">01</span>:<span class="number">22</span> <span class="operator">|</span>       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">2</span> <span class="operator">|</span>   <span class="keyword">PARTITION</span> <span class="keyword">RANGE</span> ITERATOR<span class="operator">|</span>      <span class="operator">|</span>   <span class="number">299</span>K<span class="operator">|</span>    <span class="number">24</span>M<span class="operator">|</span>       <span class="operator">|</span>   <span class="number">761</span>  (<span class="number">21</span>)<span class="operator">|</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">10</span> <span class="operator">|</span>     <span class="number">4</span> <span class="operator">|</span>     <span class="number">7</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span><span class="operator">*</span>  <span class="number">3</span> <span class="operator">|</span>    <span class="keyword">TABLE</span> ACCESS <span class="keyword">FULL</span>      <span class="operator">|</span> TAB2 <span class="operator">|</span>   <span class="number">299</span>K<span class="operator">|</span>    <span class="number">24</span>M<span class="operator">|</span>       <span class="operator">|</span>   <span class="number">761</span>  (<span class="number">21</span>)<span class="operator">|</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">10</span> <span class="operator">|</span>     <span class="number">4</span> <span class="operator">|</span>     <span class="number">7</span> <span class="operator">|</span></span><br><span class="line"><span class="comment">----------------------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">Predicate Information (identified <span class="keyword">by</span> operation id):</span><br><span class="line"><span class="comment">---------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">   <span class="number">3</span> <span class="operator">-</span> <span class="keyword">filter</span>(&quot;REGION&quot;<span class="operator">=</span><span class="number">311</span>)</span><br><span class="line"></span><br><span class="line">Note</span><br><span class="line"><span class="comment">-----</span></span><br><span class="line">   <span class="operator">-</span> <span class="keyword">dynamic</span> sampling used <span class="keyword">for</span> this statement (level<span class="operator">=</span><span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Statistics</span><br><span class="line"><span class="comment">----------------------------------------------------------</span></span><br><span class="line">          <span class="number">0</span>  <span class="keyword">recursive</span> calls</span><br><span class="line">          <span class="number">0</span>  db block gets</span><br><span class="line">       <span class="number">2068</span>  consistent gets</span><br><span class="line">          <span class="number">0</span>  physical <span class="keyword">reads</span></span><br><span class="line">          <span class="number">0</span>  redo size</span><br><span class="line">    <span class="number">6566052</span>  bytes sent via <span class="keyword">SQL</span><span class="operator">*</span>Net <span class="keyword">to</span> client</span><br><span class="line">       <span class="number">7109</span>  bytes received via <span class="keyword">SQL</span><span class="operator">*</span>Net <span class="keyword">from</span> client</span><br><span class="line">        <span class="number">601</span>  <span class="keyword">SQL</span><span class="operator">*</span>Net roundtrips <span class="keyword">to</span><span class="operator">/</span><span class="keyword">from</span> client</span><br><span class="line">          <span class="number">1</span>  sorts (memory)</span><br><span class="line">          <span class="number">0</span>  sorts (disk)</span><br><span class="line">     <span class="number">300000</span>  <span class="keyword">rows</span> processed</span><br></pre></td></tr></table></figure><p>没删除以前逻辑读大概有 2068</p><p>– <strong>找一下真实的执行计划</strong> 重新执行 SQL 语句, 我们要知道执行过 SQL 的 sql_id:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">SELECT TO_CHAR(ACCOUNTID) AS ACCOUNTID,</span><br><span class="line">       TO_CHAR(created_time, &#x27;YYYY-MM-DD HH24:MI:SS&#x27;) AS INTIME,</span><br><span class="line">       name,</span><br><span class="line">       region</span><br><span class="line">  FROM TAB2</span><br><span class="line"> WHERE region = 311</span><br><span class="line"> ORDER BY created_time ASC;</span><br><span class="line"></span><br><span class="line">-- 查询 SQL_ID</span><br><span class="line">SELECT SQL_ID</span><br><span class="line">  FROM V$SQL</span><br><span class="line"> WHERE SQL_FULLTEXT LIKE &#x27;%SELECT TO_CHAR(ACCOUNTID) AS ACCOUNTID,</span><br><span class="line">                               TO_CHAR(created_time, &#x27;&#x27;YYYY-MM-DD HH24:MI:SS&#x27;&#x27;) AS INTIME,</span><br><span class="line">                               name,</span><br><span class="line">                               region</span><br><span class="line">                          FROM TAB2</span><br><span class="line">                         WHERE region = 311</span><br><span class="line">                         ORDER BY created_time ASC%&#x27;;</span><br><span class="line">--检查 SQL 执行历史</span><br><span class="line">SELECT SQL_ID, SQL_TEXT</span><br><span class="line">  FROM DBA_HIST_SQLTEXT</span><br><span class="line"> WHERE SQL_TEXT LIKE &#x27;%SELECT TO_CHAR(ACCOUNTID)%FROM TAB2%WHERE region = 311%ORDER BY created_time ASC%&#x27;;</span><br><span class="line">--V$SQLAREA </span><br><span class="line">SELECT SQL_ID, SQL_TEXT</span><br><span class="line">  FROM V$SQLAREA</span><br><span class="line"> WHERE SQL_TEXT LIKE &#x27;%SELECT TO_CHAR(ACCOUNTID)%FROM TAB2%WHERE region = 311%ORDER BY created_time ASC%&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>找到 SQL_id: av8kv7900f6np</strong></p><h3 id="4、对比地市索引的差异"><a href="#4、对比地市索引的差异" class="headerlink" title="4、对比地市索引的差异"></a>4、对比地市索引的差异</h3><p>–<strong>查看真实的执行计划</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"># 根据sql_id查看执行计划</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span>(dbms_xplan.display_cursor(<span class="string">&#x27;av8kv7900f6np&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;ALLSTATS LAST&#x27;</span>));</span><br><span class="line"># 根据sql_id查看执行计划及其子游标的执行计划</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span>(dbms_xplan.display_cursor(<span class="string">&#x27;av8kv7900f6np&#x27;</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;ALLSTATS LAST&#x27;</span>));</span><br><span class="line"></span><br><span class="line">SYS<span class="variable">@orcl</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span>(dbms_xplan.display_cursor(<span class="string">&#x27;av8kv7900f6np&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;ALLSTATS LAST&#x27;</span>));</span><br><span class="line"></span><br><span class="line">PLAN_TABLE_OUTPUT</span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line">SQL_ID  av8kv7900f6np, child number <span class="number">0</span></span><br><span class="line"><span class="comment">-------------------------------------</span></span><br><span class="line"><span class="keyword">SELECT</span> TO_CHAR(ACCOUNTID) <span class="keyword">AS</span> ACCOUNTID,        TO_CHAR(created_time,</span><br><span class="line"><span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>) <span class="keyword">AS</span> INTIME,        name,       region   <span class="keyword">FROM</span></span><br><span class="line">TAB2  <span class="keyword">WHERE</span> region <span class="operator">=</span> <span class="number">311</span>  <span class="keyword">ORDER</span> <span class="keyword">BY</span> created_time <span class="keyword">ASC</span></span><br><span class="line"></span><br><span class="line">Plan hash <span class="keyword">value</span>: <span class="number">3230056249</span></span><br><span class="line"></span><br><span class="line"><span class="comment">------------------------------------------------------------------------------</span></span><br><span class="line"><span class="operator">|</span> Id  <span class="operator">|</span> Operation                 <span class="operator">|</span> Name <span class="operator">|</span> E<span class="operator">-</span><span class="keyword">Rows</span> <span class="operator">|</span>  OMem <span class="operator">|</span>  <span class="number">1</span>Mem <span class="operator">|</span> Used<span class="operator">-</span>Mem <span class="operator">|</span></span><br><span class="line"><span class="comment">------------------------------------------------------------------------------</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">0</span> <span class="operator">|</span> <span class="keyword">SELECT</span> STATEMENT          <span class="operator">|</span>      <span class="operator">|</span>        <span class="operator">|</span>       <span class="operator">|</span>       <span class="operator">|</span>          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">1</span> <span class="operator">|</span>  SORT <span class="keyword">ORDER</span> <span class="keyword">BY</span>            <span class="operator">|</span>      <span class="operator">|</span>    <span class="number">299</span>K<span class="operator">|</span>    <span class="number">22</span>M<span class="operator">|</span>  <span class="number">1753</span>K<span class="operator">|</span>   <span class="number">20</span>M (<span class="number">0</span>)<span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">2</span> <span class="operator">|</span>   <span class="keyword">PARTITION</span> <span class="keyword">RANGE</span> ITERATOR<span class="operator">|</span>      <span class="operator">|</span>    <span class="number">299</span>K<span class="operator">|</span>       <span class="operator">|</span>       <span class="operator">|</span>          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span><span class="operator">*</span>  <span class="number">3</span> <span class="operator">|</span>    <span class="keyword">TABLE</span> ACCESS <span class="keyword">FULL</span>      <span class="operator">|</span> TAB2 <span class="operator">|</span>    <span class="number">299</span>K<span class="operator">|</span>       <span class="operator">|</span>       <span class="operator">|</span>          <span class="operator">|</span></span><br><span class="line"><span class="comment">------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">Predicate Information (identified <span class="keyword">by</span> operation id):</span><br><span class="line"><span class="comment">---------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">   <span class="number">3</span> <span class="operator">-</span> <span class="keyword">filter</span>(&quot;REGION&quot;<span class="operator">=</span><span class="number">311</span>)</span><br><span class="line"></span><br><span class="line">Note</span><br><span class="line"><span class="comment">-----</span></span><br><span class="line">   <span class="operator">-</span> <span class="keyword">dynamic</span> sampling used <span class="keyword">for</span> this statement (level<span class="operator">=</span><span class="number">2</span>)</span><br><span class="line">   <span class="operator">-</span> Warning: basic plan statistics <span class="keyword">not</span> available. These <span class="keyword">are</span> <span class="keyword">only</span> collected <span class="keyword">when</span>:</span><br><span class="line">       <span class="operator">*</span> hint <span class="string">&#x27;gather_plan_statistics&#x27;</span> <span class="keyword">is</span> used <span class="keyword">for</span> the statement <span class="keyword">or</span></span><br><span class="line">       <span class="operator">*</span> <span class="keyword">parameter</span> <span class="string">&#x27;statistics_level&#x27;</span> <span class="keyword">is</span> <span class="keyword">set</span> <span class="keyword">to</span> <span class="string">&#x27;ALL&#x27;</span>, <span class="keyword">at</span> session <span class="keyword">or</span> <span class="keyword">system</span> level</span><br><span class="line"><span class="number">29</span> <span class="keyword">rows</span> selected.</span><br></pre></td></tr></table></figure><p><strong>– 删除统计信息</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> analyze table TAB2 delete statistics;</span><br><span class="line">-- dbms_stats收集表的统计信息</span><br><span class="line">begin</span><br><span class="line">  dbms_stats.gather_table_stats(ownname          =&gt; &#x27;SYS&#x27;,</span><br><span class="line">                                tabname          =&gt; &#x27;TAB2&#x27;,</span><br><span class="line">                                estimate_percent =&gt; dbms_stats.AUTO_SAMPLE_SIZE,</span><br><span class="line">                                method_opt       =&gt; &#x27;for all indexed columns&#x27;,</span><br><span class="line">                                cascade          =&gt; true,</span><br><span class="line">                                degree           =&gt; 2);</span><br><span class="line">end;</span><br><span class="line">/</span><br></pre></td></tr></table></figure><p>按地市创建一个索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 创建索引</span><br><span class="line">create  index ind_tab2_region on TAB2(region);</span><br></pre></td></tr></table></figure><p>再看执行计划，走上建立的索引了，但是逻辑读 2286，比之前的全表扫描还高出 200，说明在内存中读取的数据块增加了，也没有用上分区裁剪。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/32462703/1724588600754-f9265d0d-5e51-4eee-a6bf-9661497f2c7c.png#averageHue=%23fdfcfc&clientId=u9e3d68c4-b57e-4&from=paste&height=570&id=Hec6i&originHeight=627&originWidth=988&originalType=binary&ratio=1.100000023841858&rotation=0&showTitle=false&size=37848&status=done&style=none&taskId=u8c3e3a23-1a13-40c1-b264-bd21017ba8d&title=&width=898.181798714252" alt="image.png"><br>接着用 hint 改回全表扫描，发现用上了分区裁剪，而且逻辑读降低了 200<br><img src="https://cdn.nlark.com/yuque/0/2024/png/32462703/1724588912200-d4d43c58-4c44-41de-94f7-b28fb118be99.png#averageHue=%23fdfdfc&clientId=u9e3d68c4-b57e-4&from=paste&height=683&id=iJvZG&originHeight=751&originWidth=886&originalType=binary&ratio=1.100000023841858&rotation=0&showTitle=false&size=43017&status=done&style=none&taskId=ue83a9a8d-8cf5-4fbc-98de-9eb69b27285&title=&width=805.4545279967887" alt="image.png"><br>说明地市索引的性能不如全表扫描，一个是选择性不太好，而且这里涉及到一个分区裁剪技术，有兴趣的可以了解：<a href="https://docs.oracle.com/database/121/VLDBG/GUID-E677C85E-C5E3-4927-B3DF-684007A7B05D.htm#VLDBG00401">Partition Pruning</a>。大概意思就是秒如果你的 where 条件中有一个字段是要查询表的分区字段那么才查询中可以直接去找你要的这个分区中去查，其他各个字段像这里的 3100，312 是不会读的。在一个这里全表扫面可以更直接多块读得到结果，但搜索引还需要回表扫描增加 IO，这里除了地市索引的选择性不太好以外，在下面可以在试试选择性好一点的索引看看效果。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/32462703/1724590668967-54ba1c49-298e-4445-9d2c-84ca76c98306.png#averageHue=%23fbf8f6&clientId=u9e3d68c4-b57e-4&from=paste&height=110&id=ubf0bba49&originHeight=121&originWidth=1515&originalType=binary&ratio=1.100000023841858&rotation=0&showTitle=false&size=14652&status=done&style=none&taskId=ua8443917-5dd5-4e06-bc76-635859c1c5c&title=&width=1377.2726974211455" alt="image.png"></p><h3 id="5、探究高水位线"><a href="#5、探究高水位线" class="headerlink" title="5、探究高水位线"></a>5、探究高水位线</h3><p>上面说生产环境是没有数据的，逻辑读很高，那我们也模拟一下把数据删除之后的场景，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">SYS@orcl&gt; DELETE FROM tab2 WHERE region = 311;</span><br><span class="line"></span><br><span class="line">300000 rows deleted.</span><br><span class="line"></span><br><span class="line">SYS@orcl&gt; COMMIT;</span><br><span class="line"></span><br><span class="line">Commit complete.</span><br><span class="line"></span><br><span class="line">SYS@orcl&gt; SELECT TO_CHAR(ACCOUNTID) AS ACCOUNTID,</span><br><span class="line">  2         TO_CHAR(created_time, &#x27;YYYY-MM-DD HH24:MI:SS&#x27;) AS INTIME,</span><br><span class="line">  3         name,</span><br><span class="line">  4         region</span><br><span class="line">  5    FROM TAB2</span><br><span class="line">  6   WHERE region = 311</span><br><span class="line">  7   ORDER BY created_time ASC;</span><br><span class="line"></span><br><span class="line">no rows selected</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/32462703/1724589655959-1ff380bf-6762-41b9-a777-33decdd6ce6b.png#averageHue=%23dadada&clientId=u9e3d68c4-b57e-4&from=paste&height=190&id=uac7dcba2&originHeight=209&originWidth=968&originalType=binary&ratio=1.100000023841858&rotation=0&showTitle=false&size=27820&status=done&style=none&taskId=u542d1470-03a8-48dc-a7f1-1cea0f0cbd2&title=&width=879.9999809265141" alt="image.png"><br>重新收一下统计信息，再看执行计划他还是一样的逻辑读<br><img src="https://cdn.nlark.com/yuque/0/2024/png/32462703/1724589123142-41088f3c-1119-474f-842a-e93cb5f9cce9.png#averageHue=%23fdfbfb&clientId=u9e3d68c4-b57e-4&from=paste&height=728&id=u52e879aa&originHeight=801&originWidth=937&originalType=binary&ratio=1.100000023841858&rotation=0&showTitle=false&size=47987&status=done&style=none&taskId=uc544795c-c67e-43b8-addf-b5efcd33eb8&title=&width=851.8181633555204" alt="image.png"><br>那可以初步判定原因之一是由于高水位引起的，但是每个分区 4M 大小好像又不需要在降低了，因为在测试环境我建立的测试表初始大小就是 8M<br><img src="https://cdn.nlark.com/yuque/0/2024/png/32462703/1724589935718-6bf9a058-289f-4c07-ad96-6846364d50ec.png#averageHue=%23dbdbdb&clientId=u9e3d68c4-b57e-4&from=paste&height=205&id=u5ce74c01&originHeight=225&originWidth=1528&originalType=binary&ratio=1.100000023841858&rotation=0&showTitle=false&size=46291&status=done&style=none&taskId=ubf182c23-6bc9-4494-86fe-8d551913c53&title=&width=1389.0908789831751" alt="image.png"><br>在创建数据库对象或表空间时通过 storage 子句中的 initial 参数来设置 INITIAL_EXTENT。</p><p>至于怎么降低高水位线线，请看最后的扩展一。</p><h2 id="扩展一：SQL-优化涉及的信息思维导图"><a href="#扩展一：SQL-优化涉及的信息思维导图" class="headerlink" title="扩展一：SQL 优化涉及的信息思维导图"></a>扩展一：SQL 优化涉及的信息思维导图</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/32462703/1724587503398-3d934552-6c8e-4147-9df8-bca71336bce9.png#averageHue=%23fbf7f6&from=url&id=ZCvP6&originHeight=597&originWidth=891&originalType=binary&ratio=1.100000023841858&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="扩展二：-高水位线操作相关"><a href="#扩展二：-高水位线操作相关" class="headerlink" title="扩展二： 高水位线操作相关"></a><strong>扩展二： 高水位线操作相关</strong></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 收集表统计信息</span></span><br><span class="line"><span class="keyword">exec</span> dbms_stats.gather_table_stats(ownname<span class="operator">=</span><span class="operator">&gt;</span><span class="string">&#x27;SCHEMA_NAME&#x27;</span>,tabname<span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;TABLE_NAME&#x27;</span>);</span><br><span class="line"><span class="comment">-- 确定碎片程度</span></span><br><span class="line"><span class="keyword">SELECT</span> table_name,</span><br><span class="line">         ROUND ( (blocks <span class="operator">*</span> <span class="number">8</span>), <span class="number">2</span>) &quot;高水位空间 k&quot;,</span><br><span class="line">         ROUND ( (num_rows <span class="operator">*</span> avg_row_len <span class="operator">/</span> <span class="number">1024</span>), <span class="number">2</span>) &quot;真实使用空间 k&quot;,</span><br><span class="line">         ROUND ( (blocks <span class="operator">*</span> <span class="number">10</span> <span class="operator">/</span> <span class="number">100</span>) <span class="operator">*</span> <span class="number">8</span>, <span class="number">2</span>) &quot;预留空间(pctfree) k&quot;,</span><br><span class="line">         ROUND (</span><br><span class="line">            (  blocks <span class="operator">*</span> <span class="number">8</span></span><br><span class="line">             <span class="operator">-</span> (num_rows <span class="operator">*</span> avg_row_len <span class="operator">/</span> <span class="number">1024</span>)</span><br><span class="line">             <span class="operator">-</span> blocks <span class="operator">*</span> <span class="number">8</span> <span class="operator">*</span> <span class="number">10</span> <span class="operator">/</span> <span class="number">100</span>),</span><br><span class="line">            <span class="number">2</span>)</span><br><span class="line">            &quot;浪费空间 k&quot;</span><br><span class="line">    <span class="keyword">FROM</span> user_tables</span><br><span class="line">   <span class="keyword">WHERE</span> temporary <span class="operator">=</span> <span class="string">&#x27;N&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">5</span> <span class="keyword">DESC</span>;</span><br><span class="line"><span class="comment">-- 查看表上次收集统计信息时间</span></span><br><span class="line"><span class="keyword">select</span> table_name,last_analyzed <span class="keyword">from</span> dba_tables <span class="keyword">where</span> owner <span class="operator">=</span> <span class="string">&#x27;SCOTT&#x27;</span>;</span><br><span class="line"><span class="comment">-- 收集整个 Schema 中对象的统计信息</span></span><br><span class="line"><span class="keyword">exec</span> dbms_stats.gather_schema_stats(ownname<span class="operator">=</span><span class="operator">&gt;</span><span class="string">&#x27;SCOTT&#x27;</span>);</span><br><span class="line"><span class="comment">-- 降低表的高水位线</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;alter table &#x27;</span><span class="operator">||</span>TABLE_NAME<span class="operator">||</span><span class="string">&#x27; move tablespace &#x27;</span><span class="operator">||</span>TABLESPACE_NAME<span class="operator">||</span><span class="string">&#x27;;&#x27;</span> <span class="keyword">from</span> user_tables <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;EMP&#x27;</span>;</span><br><span class="line"><span class="comment">-- 重建表上的索引</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;alter index &#x27;</span><span class="operator">||</span>index_name<span class="operator">||</span><span class="string">&#x27; rebuild online;&#x27;</span> <span class="keyword">from</span> user_indexes <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;EMP&#x27;</span>;</span><br><span class="line"><span class="comment">--  收集表上的统计信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;analyze table &#x27;</span><span class="operator">||</span>TABLE_NAME<span class="operator">||</span><span class="string">&#x27; compute statistics;&#x27;</span> <span class="keyword">from</span> user_tables <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;EMP&#x27;</span>;</span><br><span class="line"><span class="comment">--  收集索引上的统计信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;analyze index &#x27;</span><span class="operator">||</span>index_name<span class="operator">||</span><span class="string">&#x27; compute statistics;&#x27;</span> <span class="keyword">from</span> user_indexes <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;EMP&#x27;</span>;</span><br><span class="line"><span class="comment">-- 整理表，不影响 DML 操作</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> TABLE_NAME enable <span class="type">ROW</span> MOVEMENT;<span class="comment">--启动行移动功能</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> TABLE_NAME shrink space compact;  <span class="comment">--只整理碎片 不回收空间</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> TABLE_NAME shrink space; <span class="comment">--整理碎片并回收空间，并调整水位线。业务少时执行</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> TABLE_NAME disable <span class="type">ROW</span> MOVEMENT;<span class="comment">--关闭行移动</span></span><br><span class="line"><span class="comment">-- 一步到位</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> TABLE_NAME shrink space;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天查询三百万次的top SQL，数据竟是空的？</title>
      <link href="/2024/08/22/SQL%EF%BC%8C%E6%95%B0%E6%8D%AE%E7%AB%9F%E6%98%AF%E7%A9%BA%E7%9A%84%EF%BC%9F/"/>
      <url>/2024/08/22/SQL%EF%BC%8C%E6%95%B0%E6%8D%AE%E7%AB%9F%E6%98%AF%E7%A9%BA%E7%9A%84%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><pre><code>这周三在监控里看到一条 top sql，一天执行三百万次，平均每秒 34.7 次， 但是分区表里没有数据，每次逻辑读 78M 左右，很奇怪。我下面尽可能还原一下生产的情况。脱敏信息如下图：</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2024/png/32462703/1724288818454-a1165322-74c4-4646-9845-e0578d2016e5.png?x-oss-process=image/format,webp" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/32462703/1724307663195-6f2f9c21-15c3-432a-b500-45f360beea7a.png#averageHue=%23f7f7f6&clientId=ud21d0b7d-1052-4&from=paste&height=440&id=u23b6f830&originHeight=484&originWidth=1058&originalType=binary&ratio=1.100000023841858&rotation=0&showTitle=false&size=186041&status=done&style=none&taskId=u5f3a269f-d7f8-4db3-8c8e-f125400b089&title=&width=961.8181609713346" alt="image.png"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>我梳理了一些这次试验的疑问，如果有兴趣可以继续往下看，仅个人主观想法，欢迎指正讨论</p><ol><li>一天执行三百万次，平均每秒 34 次，分区表里还没有数据正常吗？</li><li>没有数据逻辑读却很大，平均每次 78M？高水位线造成的吗？但是每张分区表只有 4M 大小，还需要降吗？</li><li>SQL 语句能不能优化？SQL 涉及的表有没有索引？走没有索引？索引是不是最优的？索引选择性怎么样？</li><li>怎么改执行计划 走索引和走全表的区别？怎么优化？</li></ol><p>是不是可有选择单表，废掉分区表</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="1-一天执行三百万次，平均每秒-34-次，分区表里还没有数据正常吗？"><a href="#1-一天执行三百万次，平均每秒-34-次，分区表里还没有数据正常吗？" class="headerlink" title="1. 一天执行三百万次，平均每秒 34 次，分区表里还没有数据正常吗？"></a>1. 一天执行三百万次，平均每秒 34 次，分区表里还没有数据正常吗？</h3><p>每秒 34 次的执行频率并不算特别高，但是正常情况下，这种情况可能是由于这是一张中间缓存一些中间数据，或者 SQL 执行计划被频繁重用，即使没有数据，也可能因为计划的重用导致大量逻辑读。这个应该算正常。</p><h3 id="2-没有数据逻辑读却很大，平均每次-78M？高水位线造成的吗？但是每张分区表只有-4M-大小，还需要降吗？"><a href="#2-没有数据逻辑读却很大，平均每次-78M？高水位线造成的吗？但是每张分区表只有-4M-大小，还需要降吗？" class="headerlink" title="2. 没有数据逻辑读却很大，平均每次 78M？高水位线造成的吗？但是每张分区表只有 4M 大小，还需要降吗？"></a>2. 没有数据逻辑读却很大，平均每次 78M？高水位线造成的吗？但是每张分区表只有 4M 大小，还需要降吗？</h3><p>如果分区表中没有数据，逻辑读的数量应该很小，高逻辑读而没有数据，应该与高水位线（HWM）有关。高水位线指的是表或分区在物理层面上曾经达到过的数据量，即使数据被删除，HWM 并不会自动降低。这可能导致即使表或分区中没有实际数据，但 Oracle 仍然会继续扫描这些块，从而产生大量的逻辑读。那每个分区 4M 的大小值不值得去降水位线呢？</p><ul><li><strong>高水位线：</strong> 数据被删除后，仍然去扫描数据块为空的块。</li></ul><p><strong>是否需要降高水位线</strong>：<br>如果分区表中确实没有数据，但逻辑读仍然很高，那么可以考虑降低高水位线。你可以通过以下步骤完成：</p><ol><li><strong>收缩分区表</strong>：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>table_name<span class="operator">&gt;</span> MOVE <span class="keyword">PARTITION</span> <span class="operator">&lt;</span>partition_name<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>重建索引</strong>：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> INDEX <span class="operator">&lt;</span>index_name<span class="operator">&gt;</span> REBUILD;</span><br></pre></td></tr></table></figure><p>在移动分区或表之后，索引通常需要重建，以确保索引块与表数据块的一致性。</p><ol start="3"><li><strong>收缩空闲空间</strong>：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>table_name<span class="operator">&gt;</span> SHRINK SPACE;</span><br></pre></td></tr></table></figure><p><strong>扩展一：高水位线操作相关</strong><br><strong>4M 应该就是分区表段的初始大小了，应该也没有问题。分区裁剪按照地市去读，有 10 个左右的地市，大概 40M+数据，逻辑读读到 78M 也算正常吧，这个开销也能接受吧。</strong></p><h3 id="3-SQL-语句能不能优化？SQL-涉及的表有没有索引？走没有索引？索引是不是最优的？索引选择性怎么样？"><a href="#3-SQL-语句能不能优化？SQL-涉及的表有没有索引？走没有索引？索引是不是最优的？索引选择性怎么样？" class="headerlink" title="3. SQL 语句能不能优化？SQL 涉及的表有没有索引？走没有索引？索引是不是最优的？索引选择性怎么样？"></a>3. SQL 语句能不能优化？SQL 涉及的表有没有索引？走没有索引？索引是不是最优的？索引选择性怎么样？</h3><p><strong>SQL 优化</strong>：首先，你需要查看 SQL 的执行计划（使用 <code>EXPLAIN PLAN</code> 或者 <code>DBMS_XPLAN</code>）。检查执行计划时应注意以下几点：</p><ul><li><strong>是否使用索引</strong>：如果 SQL 没有使用索引，而是走了全表扫描（Full Table Scan），那么可能需要创建或优化索引。</li><li><strong>索引的选择性</strong>：选择性越高的索引效果越好。可以通过分析 <code>v$segment_statistics</code> 或 <code>DBA_HIST_SQLSTAT</code> 来查看索引的使用情况。</li><li><strong>索引是否最优</strong>：在创建索引时，确保索引的列是查询条件中最常使用的，并且顺序和组合要合理。</li></ul><p>这里可能出不知道各类的信息去哪里找？没事，作者整理一份思维导图，优化语句少不了要了解信息<br><strong>扩展二：SQL 优化涉及的信息思维导图</strong></p><h3 id="4-怎么改执行计划，走索引和走全表的区别？怎么优化？"><a href="#4-怎么改执行计划，走索引和走全表的区别？怎么优化？" class="headerlink" title="4. 怎么改执行计划，走索引和走全表的区别？怎么优化？"></a>4. 怎么改执行计划，走索引和走全表的区别？怎么优化？</h3><p><strong>改执行计划</strong>：要优化执行计划并强制走索引：</p><ol><li><strong>使用提示（Hint）</strong>：在 SQL 中直接使用 <code>INDEX</code> 提示强制使用索引。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="comment">/*+ INDEX(table_name index_name) */</span> column_list <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>调整统计信息</strong>：确保表和索引的统计信息是最新的。你可以使用以下命令收集统计信息：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXEC</span> DBMS_STATS.GATHER_TABLE_STATS(<span class="string">&#x27;schema_name&#x27;</span>, <span class="string">&#x27;table_name&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>避免全表扫描</strong>：如果表数据量较大，但 SQL 总是走全表扫描，可以尝试通过：<ul><li>增加筛选条件，减少全表扫描的必要性。</li><li>使用分区裁剪，确保查询只扫描必要的分区。</li></ul></li><li><strong>索引覆盖</strong>：如果查询中包含的列全部都在索引中，那么 Oracle 可以直接使用索引覆盖查询，避免访问表数据块。</li></ol><p>除了索引还能怎么优化呢？走了索引效果不一定就不全表扫效果要好，我们 <strong>生产上不宜操作，我们先模拟一个环境，在测试环境分析</strong> 吧！</p><h2 id="实验测试"><a href="#实验测试" class="headerlink" title="实验测试"></a>实验测试</h2><p> 我们先 <strong>创建一个分区表有几个地市的数据，按照‘地市-时间’联合字段分区，TOPSQL 是一个查询语句，要查询其中一个地市的数据，但是数据是空的，执行次数和逻辑读很高。</strong><br><strong>模拟一个类似的环境，看看有什么值得剖析的地方。</strong></p><h3 id="1、环境模拟"><a href="#1、环境模拟" class="headerlink" title="1、环境模拟"></a>1、环境模拟</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 模拟不存在数据但是逻辑读很大，索引能不能优化语句，每天执行三百万次</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">--查询表空间位置</span></span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> v$datafile;</span><br><span class="line"><span class="comment">--创建表空间</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>space tab2_r1_p310 datafile <span class="string">&#x27;/u01/oradata/tab2_r1_p310.dbf&#x27;</span> size <span class="number">20</span>m autoextend <span class="keyword">on</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>space tab2_r1_p311 datafile <span class="string">&#x27;/u01/oradata/tab2_r1_p311.dbf&#x27;</span> size <span class="number">20</span>m autoextend <span class="keyword">on</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>space tab2_r1_p312 datafile <span class="string">&#x27;/u01/oradata/tab2_r1_p312.dbf&#x27;</span> size <span class="number">20</span>m autoextend <span class="keyword">on</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>space tab2_r1_pmax datafile <span class="string">&#x27;/u01/oradata/tab2_r1_pmax.dbf&#x27;</span> size <span class="number">20</span>m autoextend <span class="keyword">on</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">-- 删除表空间</span></span><br><span class="line"> <span class="keyword">drop</span> tablespase tab2_r1_p310; <span class="comment">--文件系统物理上不会删除/ASM会自动删除</span></span><br><span class="line"> <span class="keyword">drop</span> TABLESPACE tab2_r1_p311;</span><br><span class="line"> <span class="keyword">drop</span> TABLESPACE tab2_r1_p312;</span><br><span class="line"> <span class="keyword">drop</span> TABLESPACE tab2_r1_pmax;</span><br><span class="line"> <span class="keyword">DROP</span> TABLESPACE tab2_r1_p310 INCLUDING CONTENTS <span class="keyword">AND</span> DATAFILES;</span><br><span class="line"><span class="comment">-- 删除表空间内的所有内容及其相关的数据文件,这个操作是不可逆的</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">--创建分区表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tab2 (</span><br><span class="line">    ACCOUNTID NUMBER(<span class="number">20</span>),</span><br><span class="line">    region NUMBER(<span class="number">20</span>),</span><br><span class="line">    name VARCHAR2(<span class="number">100</span>),</span><br><span class="line">    sex VARCHAR2(<span class="number">100</span>),</span><br><span class="line">    created_time <span class="type">DATE</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span> (region, created_time) (</span><br><span class="line">    <span class="keyword">PARTITION</span> PART_310_202304 <span class="keyword">VALUES</span> LESS THAN (<span class="number">310</span>, TO_DATE(<span class="string">&#x27;2023-05-01 00:00:00&#x27;</span>, <span class="string">&#x27;SYYYY-MM-DD HH24:MI:SS&#x27;</span>, <span class="string">&#x27;NLS_CALENDAR=GREGORIAN&#x27;</span>)) SEGMENT CREATION IMMEDIATE TABLESPACE tab2_r1_p310,</span><br><span class="line">    <span class="keyword">PARTITION</span> PART_310_202305 <span class="keyword">VALUES</span> LESS THAN (<span class="number">310</span>, TO_DATE(<span class="string">&#x27;2023-06-01 00:00:00&#x27;</span>, <span class="string">&#x27;SYYYY-MM-DD HH24:MI:SS&#x27;</span>, <span class="string">&#x27;NLS_CALENDAR=GREGORIAN&#x27;</span>)) SEGMENT CREATION IMMEDIATE TABLESPACE tab2_r1_p310,</span><br><span class="line">    <span class="keyword">PARTITION</span> PART_310_202306 <span class="keyword">VALUES</span> LESS THAN (<span class="number">310</span>, TO_DATE(<span class="string">&#x27;2023-07-01 00:00:00&#x27;</span>, <span class="string">&#x27;SYYYY-MM-DD HH24:MI:SS&#x27;</span>, <span class="string">&#x27;NLS_CALENDAR=GREGORIAN&#x27;</span>)) SEGMENT CREATION IMMEDIATE TABLESPACE tab2_r1_p310,</span><br><span class="line"><span class="keyword">PARTITION</span> PART_311_202304 <span class="keyword">VALUES</span> LESS THAN (<span class="number">311</span>, TO_DATE(<span class="string">&#x27;2023-05-01 00:00:00&#x27;</span>, <span class="string">&#x27;SYYYY-MM-DD HH24:MI:SS&#x27;</span>, <span class="string">&#x27;NLS_CALENDAR=GREGORIAN&#x27;</span>)) SEGMENT CREATION IMMEDIATE TABLESPACE tab2_r1_p311,</span><br><span class="line">    <span class="keyword">PARTITION</span> PART_311_202305 <span class="keyword">VALUES</span> LESS THAN (<span class="number">311</span>, TO_DATE(<span class="string">&#x27;2023-06-01 00:00:00&#x27;</span>, <span class="string">&#x27;SYYYY-MM-DD HH24:MI:SS&#x27;</span>, <span class="string">&#x27;NLS_CALENDAR=GREGORIAN&#x27;</span>)) SEGMENT CREATION IMMEDIATE TABLESPACE tab2_r1_p311,</span><br><span class="line">    <span class="keyword">PARTITION</span> PART_311_202306 <span class="keyword">VALUES</span> LESS THAN (<span class="number">311</span>, TO_DATE(<span class="string">&#x27;2023-07-01 00:00:00&#x27;</span>, <span class="string">&#x27;SYYYY-MM-DD HH24:MI:SS&#x27;</span>, <span class="string">&#x27;NLS_CALENDAR=GREGORIAN&#x27;</span>)) SEGMENT CREATION IMMEDIATE TABLESPACE tab2_r1_p311,</span><br><span class="line"><span class="keyword">PARTITION</span> PART_312_202304 <span class="keyword">VALUES</span> LESS THAN (<span class="number">312</span>, TO_DATE(<span class="string">&#x27;2023-05-01 00:00:00&#x27;</span>, <span class="string">&#x27;SYYYY-MM-DD HH24:MI:SS&#x27;</span>, <span class="string">&#x27;NLS_CALENDAR=GREGORIAN&#x27;</span>)) SEGMENT CREATION IMMEDIATE TABLESPACE tab2_r1_p312,</span><br><span class="line">    <span class="keyword">PARTITION</span> PART_312_202305 <span class="keyword">VALUES</span> LESS THAN (<span class="number">312</span>, TO_DATE(<span class="string">&#x27;2023-06-01 00:00:00&#x27;</span>, <span class="string">&#x27;SYYYY-MM-DD HH24:MI:SS&#x27;</span>, <span class="string">&#x27;NLS_CALENDAR=GREGORIAN&#x27;</span>)) SEGMENT CREATION IMMEDIATE TABLESPACE tab2_r1_p312,</span><br><span class="line">    <span class="keyword">PARTITION</span> PART_312_202306 <span class="keyword">VALUES</span> LESS THAN (<span class="number">312</span>, TO_DATE(<span class="string">&#x27;2023-07-01 00:00:00&#x27;</span>, <span class="string">&#x27;SYYYY-MM-DD HH24:MI:SS&#x27;</span>, <span class="string">&#x27;NLS_CALENDAR=GREGORIAN&#x27;</span>)) SEGMENT CREATION IMMEDIATE TABLESPACE tab2_r1_p312,</span><br><span class="line">    <span class="keyword">PARTITION</span> pmax <span class="keyword">VALUES</span> LESS THAN (MAXVALUE, MAXVALUE) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 310</span></span><br><span class="line"><span class="comment">-- 插入 2023 年 4 月的数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab2 (ACCOUNTID, name, region, sex, created_time)</span><br><span class="line"><span class="keyword">SELECT</span> rownum, <span class="string">&#x27;test&#x27;</span> <span class="operator">||</span> rownum, <span class="number">310</span>, DECODE(<span class="built_in">MOD</span>(rownum, <span class="number">2</span>), <span class="number">0</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>), </span><br><span class="line">       TO_DATE(<span class="string">&#x27;2023-04-15 12:00:00&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> dual</span><br><span class="line"><span class="keyword">CONNECT</span> <span class="keyword">BY</span> rownum <span class="operator">&lt;=</span> <span class="number">100000</span>;</span><br><span class="line"><span class="comment">-- 插入 2023 年 5 月的数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab2 (ACCOUNTID, name, region, sex, created_time)</span><br><span class="line"><span class="keyword">SELECT</span> rownum <span class="operator">+</span> <span class="number">100000</span>, <span class="string">&#x27;test&#x27;</span> <span class="operator">||</span> rownum, <span class="number">310</span>, DECODE(<span class="built_in">MOD</span>(rownum, <span class="number">2</span>), <span class="number">0</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>), </span><br><span class="line">       TO_DATE(<span class="string">&#x27;2023-05-15 12:00:00&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> dual</span><br><span class="line"><span class="keyword">CONNECT</span> <span class="keyword">BY</span> rownum <span class="operator">&lt;=</span> <span class="number">100000</span>;</span><br><span class="line"><span class="comment">-- 插入 2023 年 6 月的数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab2 (ACCOUNTID, name, region, sex, created_time)</span><br><span class="line"><span class="keyword">SELECT</span> rownum <span class="operator">+</span> <span class="number">200000</span>, <span class="string">&#x27;test&#x27;</span> <span class="operator">||</span> rownum, <span class="number">310</span>, DECODE(<span class="built_in">MOD</span>(rownum, <span class="number">2</span>), <span class="number">0</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>), </span><br><span class="line">       TO_DATE(<span class="string">&#x27;2023-06-15 12:00:00&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> dual</span><br><span class="line"><span class="keyword">CONNECT</span> <span class="keyword">BY</span> rownum <span class="operator">&lt;=</span> <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 311</span></span><br><span class="line"><span class="comment">-- 插入 2023 年 4 月的数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab2 (ACCOUNTID, name, region, sex, created_time)</span><br><span class="line"><span class="keyword">SELECT</span> rownum, <span class="string">&#x27;test&#x27;</span> <span class="operator">||</span> rownum, <span class="number">311</span>, DECODE(<span class="built_in">MOD</span>(rownum, <span class="number">2</span>), <span class="number">0</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>), </span><br><span class="line">       TO_DATE(<span class="string">&#x27;2023-04-15 12:00:00&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> dual</span><br><span class="line"><span class="keyword">CONNECT</span> <span class="keyword">BY</span> rownum <span class="operator">&lt;=</span> <span class="number">100000</span>;</span><br><span class="line"><span class="comment">-- 插入 2023 年 5 月的数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab2 (ACCOUNTID, name, region, sex, created_time)</span><br><span class="line"><span class="keyword">SELECT</span> rownum <span class="operator">+</span> <span class="number">100000</span>, <span class="string">&#x27;test&#x27;</span> <span class="operator">||</span> rownum, <span class="number">311</span>, DECODE(<span class="built_in">MOD</span>(rownum, <span class="number">2</span>), <span class="number">0</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>), </span><br><span class="line">       TO_DATE(<span class="string">&#x27;2023-05-15 12:00:00&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> dual</span><br><span class="line"><span class="keyword">CONNECT</span> <span class="keyword">BY</span> rownum <span class="operator">&lt;=</span> <span class="number">100000</span>;</span><br><span class="line"><span class="comment">-- 插入 2023 年 6 月的数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab2 (ACCOUNTID, name, region, sex, created_time)</span><br><span class="line"><span class="keyword">SELECT</span> rownum <span class="operator">+</span> <span class="number">200000</span>, <span class="string">&#x27;test&#x27;</span> <span class="operator">||</span> rownum, <span class="number">311</span>, DECODE(<span class="built_in">MOD</span>(rownum, <span class="number">2</span>), <span class="number">0</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>), </span><br><span class="line">       TO_DATE(<span class="string">&#x27;2023-06-15 12:00:00&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> dual</span><br><span class="line"><span class="keyword">CONNECT</span> <span class="keyword">BY</span> rownum <span class="operator">&lt;=</span> <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 312</span></span><br><span class="line"><span class="comment">-- 插入 2023 年 4 月的数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab2 (ACCOUNTID, name, region, sex, created_time)</span><br><span class="line"><span class="keyword">SELECT</span> rownum, <span class="string">&#x27;test&#x27;</span> <span class="operator">||</span> rownum, <span class="number">312</span>, DECODE(<span class="built_in">MOD</span>(rownum, <span class="number">2</span>), <span class="number">0</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>), </span><br><span class="line">       TO_DATE(<span class="string">&#x27;2023-04-15 12:00:00&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> dual</span><br><span class="line"><span class="keyword">CONNECT</span> <span class="keyword">BY</span> rownum <span class="operator">&lt;=</span> <span class="number">100000</span>;</span><br><span class="line"><span class="comment">-- 插入 2023 年 5 月的数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab2 (ACCOUNTID, name, region, sex, created_time)</span><br><span class="line"><span class="keyword">SELECT</span> rownum <span class="operator">+</span> <span class="number">100000</span>, <span class="string">&#x27;test&#x27;</span> <span class="operator">||</span> rownum, <span class="number">312</span>, DECODE(<span class="built_in">MOD</span>(rownum, <span class="number">2</span>), <span class="number">0</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>), </span><br><span class="line">       TO_DATE(<span class="string">&#x27;2023-05-15 12:00:00&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> dual</span><br><span class="line"><span class="keyword">CONNECT</span> <span class="keyword">BY</span> rownum <span class="operator">&lt;=</span> <span class="number">100000</span>;</span><br><span class="line"><span class="comment">-- 插入 2023 年 6 月的数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab2 (ACCOUNTID, name, region, sex, created_time)</span><br><span class="line"><span class="keyword">SELECT</span> rownum <span class="operator">+</span> <span class="number">200000</span>, <span class="string">&#x27;test&#x27;</span> <span class="operator">||</span> rownum, <span class="number">312</span>, DECODE(<span class="built_in">MOD</span>(rownum, <span class="number">2</span>), <span class="number">0</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>), </span><br><span class="line">       TO_DATE(<span class="string">&#x27;2023-06-15 12:00:00&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> dual</span><br><span class="line"><span class="keyword">CONNECT</span> <span class="keyword">BY</span> rownum <span class="operator">&lt;=</span> <span class="number">100000</span>;</span><br></pre></td></tr></table></figure><h3 id="2、模拟的查询语句-TOPSQL"><a href="#2、模拟的查询语句-TOPSQL" class="headerlink" title="2、模拟的查询语句 TOPSQL"></a>2、模拟的查询语句 TOPSQL</h3><p>需要从‘地市-时间’联合字段的分区表中查询一个分区的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TO_CHAR(ACCOUNTID) <span class="keyword">AS</span> ACCOUNTID,</span><br><span class="line">       TO_CHAR(created_time, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>) <span class="keyword">AS</span> INTIME,</span><br><span class="line">       name,</span><br><span class="line">       region</span><br><span class="line">  <span class="keyword">FROM</span> TAB2</span><br><span class="line"> <span class="keyword">WHERE</span> region <span class="operator">=</span> <span class="number">311</span></span><br><span class="line"> <span class="keyword">ORDER</span> <span class="keyword">BY</span> created_time <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><h3 id="3、查看执行计划"><a href="#3、查看执行计划" class="headerlink" title="3、查看执行计划"></a>3、查看执行计划</h3><p>–<strong>查询计划 set autotrace traceonly 同 set autotrace on，但是不显示查询输出。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">SYS<span class="variable">@orcl</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> TO_CHAR(ACCOUNTID) <span class="keyword">AS</span> ACCOUNTID,</span><br><span class="line">  <span class="number">2</span>         TO_CHAR(created_time, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>) <span class="keyword">AS</span> INTIME,</span><br><span class="line">  <span class="number">3</span>         name,</span><br><span class="line">  <span class="number">4</span>         region</span><br><span class="line">  <span class="number">5</span>    <span class="keyword">FROM</span> TAB2</span><br><span class="line">  <span class="number">6</span>   <span class="keyword">WHERE</span> region <span class="operator">=</span> <span class="number">311</span></span><br><span class="line">  <span class="number">7</span>   <span class="keyword">ORDER</span> <span class="keyword">BY</span> created_time <span class="keyword">ASC</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">300000</span> <span class="keyword">rows</span> selected.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Execution Plan</span><br><span class="line"><span class="comment">----------------------------------------------------------</span></span><br><span class="line">Plan hash <span class="keyword">value</span>: <span class="number">3230056249</span></span><br><span class="line"><span class="comment">----------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="operator">|</span> Id  <span class="operator">|</span> Operation                 <span class="operator">|</span> Name <span class="operator">|</span> <span class="keyword">Rows</span>  <span class="operator">|</span> Bytes <span class="operator">|</span>TempSpc<span class="operator">|</span> Cost (<span class="operator">%</span>CPU)<span class="operator">|</span> <span class="type">Time</span>     <span class="operator">|</span> Pstart<span class="operator">|</span> Pstop <span class="operator">|</span></span><br><span class="line"><span class="comment">----------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">0</span> <span class="operator">|</span> <span class="keyword">SELECT</span> STATEMENT          <span class="operator">|</span>      <span class="operator">|</span>   <span class="number">299</span>K<span class="operator">|</span>    <span class="number">24</span>M<span class="operator">|</span>       <span class="operator">|</span>  <span class="number">6763</span>   (<span class="number">3</span>)<span class="operator">|</span> <span class="number">00</span>:<span class="number">01</span>:<span class="number">22</span> <span class="operator">|</span>       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">1</span> <span class="operator">|</span>  SORT <span class="keyword">ORDER</span> <span class="keyword">BY</span>            <span class="operator">|</span>      <span class="operator">|</span>   <span class="number">299</span>K<span class="operator">|</span>    <span class="number">24</span>M<span class="operator">|</span>    <span class="number">28</span>M<span class="operator">|</span>  <span class="number">6763</span>   (<span class="number">3</span>)<span class="operator">|</span> <span class="number">00</span>:<span class="number">01</span>:<span class="number">22</span> <span class="operator">|</span>       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">2</span> <span class="operator">|</span>   <span class="keyword">PARTITION</span> <span class="keyword">RANGE</span> ITERATOR<span class="operator">|</span>      <span class="operator">|</span>   <span class="number">299</span>K<span class="operator">|</span>    <span class="number">24</span>M<span class="operator">|</span>       <span class="operator">|</span>   <span class="number">761</span>  (<span class="number">21</span>)<span class="operator">|</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">10</span> <span class="operator">|</span>     <span class="number">4</span> <span class="operator">|</span>     <span class="number">7</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span><span class="operator">*</span>  <span class="number">3</span> <span class="operator">|</span>    <span class="keyword">TABLE</span> ACCESS <span class="keyword">FULL</span>      <span class="operator">|</span> TAB2 <span class="operator">|</span>   <span class="number">299</span>K<span class="operator">|</span>    <span class="number">24</span>M<span class="operator">|</span>       <span class="operator">|</span>   <span class="number">761</span>  (<span class="number">21</span>)<span class="operator">|</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">10</span> <span class="operator">|</span>     <span class="number">4</span> <span class="operator">|</span>     <span class="number">7</span> <span class="operator">|</span></span><br><span class="line"><span class="comment">----------------------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">Predicate Information (identified <span class="keyword">by</span> operation id):</span><br><span class="line"><span class="comment">---------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">   <span class="number">3</span> <span class="operator">-</span> <span class="keyword">filter</span>(&quot;REGION&quot;<span class="operator">=</span><span class="number">311</span>)</span><br><span class="line"></span><br><span class="line">Note</span><br><span class="line"><span class="comment">-----</span></span><br><span class="line">   <span class="operator">-</span> <span class="keyword">dynamic</span> sampling used <span class="keyword">for</span> this statement (level<span class="operator">=</span><span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Statistics</span><br><span class="line"><span class="comment">----------------------------------------------------------</span></span><br><span class="line">          <span class="number">0</span>  <span class="keyword">recursive</span> calls</span><br><span class="line">          <span class="number">0</span>  db block gets</span><br><span class="line">       <span class="number">2068</span>  consistent gets</span><br><span class="line">          <span class="number">0</span>  physical <span class="keyword">reads</span></span><br><span class="line">          <span class="number">0</span>  redo size</span><br><span class="line">    <span class="number">6566052</span>  bytes sent via <span class="keyword">SQL</span><span class="operator">*</span>Net <span class="keyword">to</span> client</span><br><span class="line">       <span class="number">7109</span>  bytes received via <span class="keyword">SQL</span><span class="operator">*</span>Net <span class="keyword">from</span> client</span><br><span class="line">        <span class="number">601</span>  <span class="keyword">SQL</span><span class="operator">*</span>Net roundtrips <span class="keyword">to</span><span class="operator">/</span><span class="keyword">from</span> client</span><br><span class="line">          <span class="number">1</span>  sorts (memory)</span><br><span class="line">          <span class="number">0</span>  sorts (disk)</span><br><span class="line">     <span class="number">300000</span>  <span class="keyword">rows</span> processed</span><br></pre></td></tr></table></figure><p>没删除以前逻辑读大概有 2068</p><p>– <strong>找一下真实的执行计划</strong> 重新执行 SQL 语句, 我们要知道执行过 SQL 的 sql_id:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">SELECT TO_CHAR(ACCOUNTID) AS ACCOUNTID,</span><br><span class="line">       TO_CHAR(created_time, &#x27;YYYY-MM-DD HH24:MI:SS&#x27;) AS INTIME,</span><br><span class="line">       name,</span><br><span class="line">       region</span><br><span class="line">  FROM TAB2</span><br><span class="line"> WHERE region = 311</span><br><span class="line"> ORDER BY created_time ASC;</span><br><span class="line"></span><br><span class="line">-- 查询 SQL_ID</span><br><span class="line">SELECT SQL_ID</span><br><span class="line">  FROM V$SQL</span><br><span class="line"> WHERE SQL_FULLTEXT LIKE &#x27;%SELECT TO_CHAR(ACCOUNTID) AS ACCOUNTID,</span><br><span class="line">                               TO_CHAR(created_time, &#x27;&#x27;YYYY-MM-DD HH24:MI:SS&#x27;&#x27;) AS INTIME,</span><br><span class="line">                               name,</span><br><span class="line">                               region</span><br><span class="line">                          FROM TAB2</span><br><span class="line">                         WHERE region = 311</span><br><span class="line">                         ORDER BY created_time ASC%&#x27;;</span><br><span class="line">--检查 SQL 执行历史</span><br><span class="line">SELECT SQL_ID, SQL_TEXT</span><br><span class="line">  FROM DBA_HIST_SQLTEXT</span><br><span class="line"> WHERE SQL_TEXT LIKE &#x27;%SELECT TO_CHAR(ACCOUNTID)%FROM TAB2%WHERE region = 311%ORDER BY created_time ASC%&#x27;;</span><br><span class="line">--V$SQLAREA </span><br><span class="line">SELECT SQL_ID, SQL_TEXT</span><br><span class="line">  FROM V$SQLAREA</span><br><span class="line"> WHERE SQL_TEXT LIKE &#x27;%SELECT TO_CHAR(ACCOUNTID)%FROM TAB2%WHERE region = 311%ORDER BY created_time ASC%&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>找到 SQL_id: av8kv7900f6np</strong></p><h3 id="4、对比地市索引的差异"><a href="#4、对比地市索引的差异" class="headerlink" title="4、对比地市索引的差异"></a>4、对比地市索引的差异</h3><p>–<strong>查看真实的执行计划</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"># 根据sql_id查看执行计划</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span>(dbms_xplan.display_cursor(<span class="string">&#x27;av8kv7900f6np&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;ALLSTATS LAST&#x27;</span>));</span><br><span class="line"># 根据sql_id查看执行计划及其子游标的执行计划</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span>(dbms_xplan.display_cursor(<span class="string">&#x27;av8kv7900f6np&#x27;</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;ALLSTATS LAST&#x27;</span>));</span><br><span class="line"></span><br><span class="line">SYS<span class="variable">@orcl</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span>(dbms_xplan.display_cursor(<span class="string">&#x27;av8kv7900f6np&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;ALLSTATS LAST&#x27;</span>));</span><br><span class="line"></span><br><span class="line">PLAN_TABLE_OUTPUT</span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line">SQL_ID  av8kv7900f6np, child number <span class="number">0</span></span><br><span class="line"><span class="comment">-------------------------------------</span></span><br><span class="line"><span class="keyword">SELECT</span> TO_CHAR(ACCOUNTID) <span class="keyword">AS</span> ACCOUNTID,        TO_CHAR(created_time,</span><br><span class="line"><span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>) <span class="keyword">AS</span> INTIME,        name,       region   <span class="keyword">FROM</span></span><br><span class="line">TAB2  <span class="keyword">WHERE</span> region <span class="operator">=</span> <span class="number">311</span>  <span class="keyword">ORDER</span> <span class="keyword">BY</span> created_time <span class="keyword">ASC</span></span><br><span class="line"></span><br><span class="line">Plan hash <span class="keyword">value</span>: <span class="number">3230056249</span></span><br><span class="line"></span><br><span class="line"><span class="comment">------------------------------------------------------------------------------</span></span><br><span class="line"><span class="operator">|</span> Id  <span class="operator">|</span> Operation                 <span class="operator">|</span> Name <span class="operator">|</span> E<span class="operator">-</span><span class="keyword">Rows</span> <span class="operator">|</span>  OMem <span class="operator">|</span>  <span class="number">1</span>Mem <span class="operator">|</span> Used<span class="operator">-</span>Mem <span class="operator">|</span></span><br><span class="line"><span class="comment">------------------------------------------------------------------------------</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">0</span> <span class="operator">|</span> <span class="keyword">SELECT</span> STATEMENT          <span class="operator">|</span>      <span class="operator">|</span>        <span class="operator">|</span>       <span class="operator">|</span>       <span class="operator">|</span>          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">1</span> <span class="operator">|</span>  SORT <span class="keyword">ORDER</span> <span class="keyword">BY</span>            <span class="operator">|</span>      <span class="operator">|</span>    <span class="number">299</span>K<span class="operator">|</span>    <span class="number">22</span>M<span class="operator">|</span>  <span class="number">1753</span>K<span class="operator">|</span>   <span class="number">20</span>M (<span class="number">0</span>)<span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">2</span> <span class="operator">|</span>   <span class="keyword">PARTITION</span> <span class="keyword">RANGE</span> ITERATOR<span class="operator">|</span>      <span class="operator">|</span>    <span class="number">299</span>K<span class="operator">|</span>       <span class="operator">|</span>       <span class="operator">|</span>          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span><span class="operator">*</span>  <span class="number">3</span> <span class="operator">|</span>    <span class="keyword">TABLE</span> ACCESS <span class="keyword">FULL</span>      <span class="operator">|</span> TAB2 <span class="operator">|</span>    <span class="number">299</span>K<span class="operator">|</span>       <span class="operator">|</span>       <span class="operator">|</span>          <span class="operator">|</span></span><br><span class="line"><span class="comment">------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">Predicate Information (identified <span class="keyword">by</span> operation id):</span><br><span class="line"><span class="comment">---------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">   <span class="number">3</span> <span class="operator">-</span> <span class="keyword">filter</span>(&quot;REGION&quot;<span class="operator">=</span><span class="number">311</span>)</span><br><span class="line"></span><br><span class="line">Note</span><br><span class="line"><span class="comment">-----</span></span><br><span class="line">   <span class="operator">-</span> <span class="keyword">dynamic</span> sampling used <span class="keyword">for</span> this statement (level<span class="operator">=</span><span class="number">2</span>)</span><br><span class="line">   <span class="operator">-</span> Warning: basic plan statistics <span class="keyword">not</span> available. These <span class="keyword">are</span> <span class="keyword">only</span> collected <span class="keyword">when</span>:</span><br><span class="line">       <span class="operator">*</span> hint <span class="string">&#x27;gather_plan_statistics&#x27;</span> <span class="keyword">is</span> used <span class="keyword">for</span> the statement <span class="keyword">or</span></span><br><span class="line">       <span class="operator">*</span> <span class="keyword">parameter</span> <span class="string">&#x27;statistics_level&#x27;</span> <span class="keyword">is</span> <span class="keyword">set</span> <span class="keyword">to</span> <span class="string">&#x27;ALL&#x27;</span>, <span class="keyword">at</span> session <span class="keyword">or</span> <span class="keyword">system</span> level</span><br><span class="line"><span class="number">29</span> <span class="keyword">rows</span> selected.</span><br></pre></td></tr></table></figure><p><strong>– 删除统计信息</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> analyze table TAB2 delete statistics;</span><br><span class="line">-- dbms_stats收集表的统计信息</span><br><span class="line">begin</span><br><span class="line">  dbms_stats.gather_table_stats(ownname          =&gt; &#x27;SYS&#x27;,</span><br><span class="line">                                tabname          =&gt; &#x27;TAB2&#x27;,</span><br><span class="line">                                estimate_percent =&gt; dbms_stats.AUTO_SAMPLE_SIZE,</span><br><span class="line">                                method_opt       =&gt; &#x27;for all indexed columns&#x27;,</span><br><span class="line">                                cascade          =&gt; true,</span><br><span class="line">                                degree           =&gt; 2);</span><br><span class="line">end;</span><br><span class="line">/</span><br></pre></td></tr></table></figure><p>按地市创建一个索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 创建索引</span><br><span class="line">create  index ind_tab2_region on TAB2(region);</span><br></pre></td></tr></table></figure><p>再看执行计划，走上建立的索引了，但是逻辑读 2286，比之前的全表扫描还高出 200，说明在内存中读取的数据块增加了，也没有用上分区裁剪。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/32462703/1724588600754-f9265d0d-5e51-4eee-a6bf-9661497f2c7c.png#averageHue=%23fdfcfc&clientId=u9e3d68c4-b57e-4&from=paste&height=570&id=Hec6i&originHeight=627&originWidth=988&originalType=binary&ratio=1.100000023841858&rotation=0&showTitle=false&size=37848&status=done&style=none&taskId=u8c3e3a23-1a13-40c1-b264-bd21017ba8d&title=&width=898.181798714252" alt="image.png"><br>接着用 hint 改回全表扫描，发现用上了分区裁剪，而且逻辑读降低了 200<br><img src="https://cdn.nlark.com/yuque/0/2024/png/32462703/1724588912200-d4d43c58-4c44-41de-94f7-b28fb118be99.png#averageHue=%23fdfdfc&clientId=u9e3d68c4-b57e-4&from=paste&height=683&id=iJvZG&originHeight=751&originWidth=886&originalType=binary&ratio=1.100000023841858&rotation=0&showTitle=false&size=43017&status=done&style=none&taskId=ue83a9a8d-8cf5-4fbc-98de-9eb69b27285&title=&width=805.4545279967887" alt="image.png"><br>说明地市索引的性能不如全表扫描，一个是选择性不太好，而且这里涉及到一个分区裁剪技术，有兴趣的可以了解：<a href="https://docs.oracle.com/database/121/VLDBG/GUID-E677C85E-C5E3-4927-B3DF-684007A7B05D.htm#VLDBG00401">Partition Pruning</a>。大概意思就是秒如果你的 where 条件中有一个字段是要查询表的分区字段那么才查询中可以直接去找你要的这个分区中去查，其他各个字段像这里的 3100，312 是不会读的。在一个这里全表扫面可以更直接多块读得到结果，但搜索引还需要回表扫描增加 IO，这里除了地市索引的选择性不太好以外，在下面可以在试试选择性好一点的索引看看效果。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/32462703/1724590668967-54ba1c49-298e-4445-9d2c-84ca76c98306.png#averageHue=%23fbf8f6&clientId=u9e3d68c4-b57e-4&from=paste&height=110&id=ubf0bba49&originHeight=121&originWidth=1515&originalType=binary&ratio=1.100000023841858&rotation=0&showTitle=false&size=14652&status=done&style=none&taskId=ua8443917-5dd5-4e06-bc76-635859c1c5c&title=&width=1377.2726974211455" alt="image.png"></p><h3 id="5、探究高水位线"><a href="#5、探究高水位线" class="headerlink" title="5、探究高水位线"></a>5、探究高水位线</h3><p>上面说生产环境是没有数据的，逻辑读很高，那我们也模拟一下把数据删除之后的场景，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">SYS@orcl&gt; DELETE FROM tab2 WHERE region = 311;</span><br><span class="line"></span><br><span class="line">300000 rows deleted.</span><br><span class="line"></span><br><span class="line">SYS@orcl&gt; COMMIT;</span><br><span class="line"></span><br><span class="line">Commit complete.</span><br><span class="line"></span><br><span class="line">SYS@orcl&gt; SELECT TO_CHAR(ACCOUNTID) AS ACCOUNTID,</span><br><span class="line">  2         TO_CHAR(created_time, &#x27;YYYY-MM-DD HH24:MI:SS&#x27;) AS INTIME,</span><br><span class="line">  3         name,</span><br><span class="line">  4         region</span><br><span class="line">  5    FROM TAB2</span><br><span class="line">  6   WHERE region = 311</span><br><span class="line">  7   ORDER BY created_time ASC;</span><br><span class="line"></span><br><span class="line">no rows selected</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/32462703/1724589655959-1ff380bf-6762-41b9-a777-33decdd6ce6b.png#averageHue=%23dadada&clientId=u9e3d68c4-b57e-4&from=paste&height=190&id=uac7dcba2&originHeight=209&originWidth=968&originalType=binary&ratio=1.100000023841858&rotation=0&showTitle=false&size=27820&status=done&style=none&taskId=u542d1470-03a8-48dc-a7f1-1cea0f0cbd2&title=&width=879.9999809265141" alt="image.png"><br>重新收一下统计信息，再看执行计划他还是一样的逻辑读<br><img src="https://cdn.nlark.com/yuque/0/2024/png/32462703/1724589123142-41088f3c-1119-474f-842a-e93cb5f9cce9.png#averageHue=%23fdfbfb&clientId=u9e3d68c4-b57e-4&from=paste&height=728&id=u52e879aa&originHeight=801&originWidth=937&originalType=binary&ratio=1.100000023841858&rotation=0&showTitle=false&size=47987&status=done&style=none&taskId=uc544795c-c67e-43b8-addf-b5efcd33eb8&title=&width=851.8181633555204" alt="image.png"><br>那可以初步判定原因之一是由于高水位引起的，但是每个分区 4M 大小好像又不需要在降低了，因为在测试环境我建立的测试表初始大小就是 8M<br><img src="https://cdn.nlark.com/yuque/0/2024/png/32462703/1724589935718-6bf9a058-289f-4c07-ad96-6846364d50ec.png#averageHue=%23dbdbdb&clientId=u9e3d68c4-b57e-4&from=paste&height=205&id=u5ce74c01&originHeight=225&originWidth=1528&originalType=binary&ratio=1.100000023841858&rotation=0&showTitle=false&size=46291&status=done&style=none&taskId=ubf182c23-6bc9-4494-86fe-8d551913c53&title=&width=1389.0908789831751" alt="image.png"><br>在创建数据库对象或表空间时通过 storage 子句中的 initial 参数来设置 INITIAL_EXTENT。</p><p>至于怎么降低高水位线线，请看最后的扩展一。</p><h2 id="扩展一：SQL-优化涉及的信息思维导图"><a href="#扩展一：SQL-优化涉及的信息思维导图" class="headerlink" title="扩展一：SQL 优化涉及的信息思维导图"></a>扩展一：SQL 优化涉及的信息思维导图</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/32462703/1724587503398-3d934552-6c8e-4147-9df8-bca71336bce9.png#averageHue=%23fbf7f6&from=url&id=ZCvP6&originHeight=597&originWidth=891&originalType=binary&ratio=1.100000023841858&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="扩展二：-高水位线操作相关"><a href="#扩展二：-高水位线操作相关" class="headerlink" title="扩展二： 高水位线操作相关"></a><strong>扩展二： 高水位线操作相关</strong></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 收集表统计信息</span></span><br><span class="line"><span class="keyword">exec</span> dbms_stats.gather_table_stats(ownname<span class="operator">=</span><span class="operator">&gt;</span><span class="string">&#x27;SCHEMA_NAME&#x27;</span>,tabname<span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;TABLE_NAME&#x27;</span>);</span><br><span class="line"><span class="comment">-- 确定碎片程度</span></span><br><span class="line"><span class="keyword">SELECT</span> table_name,</span><br><span class="line">         ROUND ( (blocks <span class="operator">*</span> <span class="number">8</span>), <span class="number">2</span>) &quot;高水位空间 k&quot;,</span><br><span class="line">         ROUND ( (num_rows <span class="operator">*</span> avg_row_len <span class="operator">/</span> <span class="number">1024</span>), <span class="number">2</span>) &quot;真实使用空间 k&quot;,</span><br><span class="line">         ROUND ( (blocks <span class="operator">*</span> <span class="number">10</span> <span class="operator">/</span> <span class="number">100</span>) <span class="operator">*</span> <span class="number">8</span>, <span class="number">2</span>) &quot;预留空间(pctfree) k&quot;,</span><br><span class="line">         ROUND (</span><br><span class="line">            (  blocks <span class="operator">*</span> <span class="number">8</span></span><br><span class="line">             <span class="operator">-</span> (num_rows <span class="operator">*</span> avg_row_len <span class="operator">/</span> <span class="number">1024</span>)</span><br><span class="line">             <span class="operator">-</span> blocks <span class="operator">*</span> <span class="number">8</span> <span class="operator">*</span> <span class="number">10</span> <span class="operator">/</span> <span class="number">100</span>),</span><br><span class="line">            <span class="number">2</span>)</span><br><span class="line">            &quot;浪费空间 k&quot;</span><br><span class="line">    <span class="keyword">FROM</span> user_tables</span><br><span class="line">   <span class="keyword">WHERE</span> temporary <span class="operator">=</span> <span class="string">&#x27;N&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">5</span> <span class="keyword">DESC</span>;</span><br><span class="line"><span class="comment">-- 查看表上次收集统计信息时间</span></span><br><span class="line"><span class="keyword">select</span> table_name,last_analyzed <span class="keyword">from</span> dba_tables <span class="keyword">where</span> owner <span class="operator">=</span> <span class="string">&#x27;SCOTT&#x27;</span>;</span><br><span class="line"><span class="comment">-- 收集整个 Schema 中对象的统计信息</span></span><br><span class="line"><span class="keyword">exec</span> dbms_stats.gather_schema_stats(ownname<span class="operator">=</span><span class="operator">&gt;</span><span class="string">&#x27;SCOTT&#x27;</span>);</span><br><span class="line"><span class="comment">-- 降低表的高水位线</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;alter table &#x27;</span><span class="operator">||</span>TABLE_NAME<span class="operator">||</span><span class="string">&#x27; move tablespace &#x27;</span><span class="operator">||</span>TABLESPACE_NAME<span class="operator">||</span><span class="string">&#x27;;&#x27;</span> <span class="keyword">from</span> user_tables <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;EMP&#x27;</span>;</span><br><span class="line"><span class="comment">-- 重建表上的索引</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;alter index &#x27;</span><span class="operator">||</span>index_name<span class="operator">||</span><span class="string">&#x27; rebuild online;&#x27;</span> <span class="keyword">from</span> user_indexes <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;EMP&#x27;</span>;</span><br><span class="line"><span class="comment">--  收集表上的统计信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;analyze table &#x27;</span><span class="operator">||</span>TABLE_NAME<span class="operator">||</span><span class="string">&#x27; compute statistics;&#x27;</span> <span class="keyword">from</span> user_tables <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;EMP&#x27;</span>;</span><br><span class="line"><span class="comment">--  收集索引上的统计信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;analyze index &#x27;</span><span class="operator">||</span>index_name<span class="operator">||</span><span class="string">&#x27; compute statistics;&#x27;</span> <span class="keyword">from</span> user_indexes <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;EMP&#x27;</span>;</span><br><span class="line"><span class="comment">-- 整理表，不影响 DML 操作</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> TABLE_NAME enable <span class="type">ROW</span> MOVEMENT;<span class="comment">--启动行移动功能</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> TABLE_NAME shrink space compact;  <span class="comment">--只整理碎片 不回收空间</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> TABLE_NAME shrink space; <span class="comment">--整理碎片并回收空间，并调整水位线。业务少时执行</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> TABLE_NAME disable <span class="type">ROW</span> MOVEMENT;<span class="comment">--关闭行移动</span></span><br><span class="line"><span class="comment">-- 一步到位</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> TABLE_NAME shrink space;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/08/16/LOCAL-LISTENER%E5%8F%82%E6%95%B0%E5%AF%BC%E8%87%B4%E4%B8%9A%E5%8A%A1%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%8C%E6%96%87%E6%9C%AB%E9%99%84Oracle%E8%BF%9E%E6%8E%A5%E6%95%85%E9%9A%9C%E6%A3%80%E6%9F%A5%E7%9B%91%E5%90%AC%E7%9A%84%E6%8E%92%E6%9F%A5%E6%B5%81%E7%A8%8B/"/>
      <url>/2024/08/16/LOCAL-LISTENER%E5%8F%82%E6%95%B0%E5%AF%BC%E8%87%B4%E4%B8%9A%E5%8A%A1%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%8C%E6%96%87%E6%9C%AB%E9%99%84Oracle%E8%BF%9E%E6%8E%A5%E6%95%85%E9%9A%9C%E6%A3%80%E6%9F%A5%E7%9B%91%E5%90%AC%E7%9A%84%E6%8E%92%E6%9F%A5%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="背景及问题"><a href="#背景及问题" class="headerlink" title="背景及问题"></a>背景及问题</h1><p>今天在Oracle BCV技术[1]做数据同步，建立生产库的测试库，需要DBA配合同步前后的停库和起库。在同步完起库后，有部门反应<strong>同步好的测试库连接不上去</strong>。</p><h1 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h1><p>以我当前的知识储备，能想到的可能就是以下几点进行检查：</p><ol><li>数据库实例状态，是不是没有open —&gt; select status from v$instance;</li><li>监听器状态,是不是监听没起来  —&gt;  lsnrctl status|start</li><li>Oralce黑白名单配置问题  —&gt;   $ORACLE_HOME&#x2F;network&#x2F;admin&#x2F;sqlnet.ora  </li><li>客户端 tnsnames.ora 配置问题，连接符写错了  —&gt;  tnsping  </li><li>网络连接问题，端口是否开放  —&gt; ping IP 、 telnet IP 1521</li></ol><p>这些都不是，由于情况紧急，测试环境等着用，部门同事再三提示下，我还是不知道他们说的那个参数—<strong>LOCAL_LISTENER</strong>，这个就是引起这次数据库连接不上的罪魁祸首，导师一下就解决了👍！<br>我把生产的服务名拿到测试库注册了，导致测试库没有对外提供网络连接，只能通过本地访问数据库，通过将<strong>LOCAL_LISTENER该参数</strong>重置成默认参数、置空或者修改测试库的服务名就解决了，总之就是使测试库对外提供网络连接，但上面的问题还存在一个非常大的安全隐患，下面细说</p><p>还有什么情况连接不上数据库，欢迎大家在评论区补充！</p><h1 id="事后回顾"><a href="#事后回顾" class="headerlink" title="事后回顾"></a>事后回顾</h1><p>今天这个任务的流程是这样的：停库 —&gt; BCV同步测试数据 —&gt; 起库，1、3步骤是需要DBA配合来做的，因为是从其他库同步过来的数据，再数据库启动阶段Oracle会做一个<strong>数据库启动验证</strong>，其实就是对比各个文件数据是否一致，是否需要恢复，首先Oracle启动时会检查<strong>数据文件头</strong>中的checkpoint cnt是否与对应<strong>控制文件</strong>中的checkpoint cnt一致，如果一致，进行第二次检查，<strong>数据文件头的开始scn</strong>和对应<strong>控制文件中的结束scn</strong>是否一致，如果结束scn等于开始scn，则不需要要对那个文件进行恢复，没问题启动数据库。<br>我拿其中一部分操作步骤来说今天这次事故发生的原因：<br>刚刚从生产同步过来的测试库，需要经历启动验证这个阶段，回过来，数据库起库三阶段，</p><ol><li>加载参数文件 –》startup nomount</li><li>加载控制文件 –》startup mount</li><li>加载数据文件等所有文件–》startup （打开到open）</li></ol><p>同步过来的测试库可能有日志文件不一致，先以RESETLOGS方式起库</p><blockquote><p><strong>扩展一：Resetlogs 与 NoResetlogs 的区别</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter database open RESETLOGS;</span><br></pre></td></tr></table></figure><p>找到测试库控制文件位置，在后面的参数文件修改成本库的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show parameter control_files</span><br></pre></td></tr></table></figure><p>重点来了，关库，去同步的生产库创建一份参数文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create pfile=&#x27;/home/oracle/inittbcsd1.ora&#x27; from spfile;</span><br></pre></td></tr></table></figure><p>用生产库的参数文件起测试库，这份参数文件我只修改了两个参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*.cluster_database=FALSE</span><br><span class="line">control_files</span><br></pre></td></tr></table></figure><p>其中有关参数文件参数的介绍和管理部分，可<strong>参考</strong>我之前发的一篇文章：<br><a href="https://www.modb.pro/db/1817911042438082560">Oracle 文件管理-参数文件、控制文件、归档 - 墨天轮</a><br>其中忽略了一个参数也就是本文的主角 <strong>local_listener</strong>-本地监听服务的名称。<br>测试库起库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">shutdown immediate;</span><br><span class="line">startup mount pfile=&#x27;/home/oracle/inittbcsd1.ora&#x27;; ---用pfile文件起库</span><br><span class="line">alter database noarchivelog;</span><br><span class="line">alter database open;</span><br></pre></td></tr></table></figure><p>先介绍一下<strong>LOCAL_LISTENER参数，</strong>该参数指定了数据库PMON进程需要将数据库实例注册到哪个端口，参数文件是这样配置的 <strong>local_listener</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*.local_listener=&#x27;LISTENER_1523&#x27;,&#x27;LISTENER_TUX&#x27;,&#x27;LISTENER_1529&#x27;,&#x27;LISTENER&#x27;</span><br></pre></td></tr></table></figure><blockquote><h3 id="扩展二：local-listener-与-remote-listener-设置监听"><a href="#扩展二：local-listener-与-remote-listener-设置监听" class="headerlink" title="扩展二：local_listener 与 remote_listener 设置监听"></a>扩展二：<strong>local_listener 与 remote_listener 设置监听</strong></h3></blockquote><p>如果没有设置这个参数，PMON进程默认将数据库的服务注册到本地节点的1521端口，这还好说，我偏偏就指定了这个参数，这个参数是用于本地监听的服务名，也就是说，我把生产的服务名拿到测试库注册了。有什么影响呢？他可能会把当前的服务名按照连接符去生产在注册一遍。<br>所以问题解决了，为什么连不上库，因为没有该库没有对外提供测试库的监听，业务想要连接数据库需要通过网络连接，即<strong>Listener连接到服务器，</strong>但是测试库参数指定的监听服务的名称是生产库的，外面肯定连接不上来。</p><blockquote><p>扩展三：连接(访问)数据库的两种方式：LOCAL&#x3D;NO 和 LOCAL&#x3D;YES</p></blockquote><p>Oracle的监听就类似与开发中的封装思想， 将对象的属性和方法隐藏起来，通过公开的接口提供对这些属性和方法的访问。  而Oracle监听器（Listener）责管理客户端与数据库实例之间的连接，当客户端发起连接请求时，监听器接收该请求，并将其引导至适当的数据库服务。监听器隐藏了数据库实例的复杂性，只对外提供统一的接口——服务名和连接字符串，让客户端不需要了解数据库实例的具体配置和位置，也可提供服务。<br>Oracle Listener 可以视为数据库的“前门”，它通过监听网络上的连接请求，封装了数据库的物理细节，比如IP地址、端口号、实例名等，Oracle 将客户端和服务器彻底隔离开来，客户端通过配置的连接字符串、服务名就可以连接到数据库，而不需要知道数据库的内部结构和配置细节，对于客户端来说，它不用关心数据库的名字、实例名到底是什么，它只需要知道数据库对外提供服务。<br>关于数据库的访问，这里引用一下<strong>盖总《深入解析Oracle》</strong>一书中的介绍，<br>数据库启动之后，要想提供网络服务，通过远程连接访问，我们还需要启动数据库的监听器(配置文件通常为 listener.ora)，监听器用于在特定的端口上(缺省的端口是 1521)提供监听，接收来自客户端的访问请求(客户端请求通过 tmnsnames.ora 文件定义发送)。在专用服务器模式下(Dedicated Server)，监听器会为每个请求衍生一个服务器进程相对应，通过这个服务器进程将客户端与数据库联系起来。下图描述了建立网络连接时客户端以及服务器端的相关文件及关系:<br><img src="https://cdn.nlark.com/yuque/0/2024/png/32462703/1723893740374-67c5a2e9-e7d5-4cf9-8504-a99fd83e86b6.png#averageHue=%23a7a9a8&clientId=ud9d11d68-70bf-4&from=paste&height=350&id=u9955ac4a&originHeight=385&originWidth=694&originalType=binary&ratio=1.100000023841858&rotation=0&showTitle=false&size=163949&status=done&style=none&taskId=u4f8ab5ef-8193-4efe-bb9d-d82ecc35e73&title=&width=630.9090772345049" alt="image.png"><br>该书虽然写的早，但是文章对Oracle数据库的讲解非常全面，通俗易懂，很适合当教材。<br><strong>常用的配置文件介绍</strong><br>以下是Oracle网络配置文件的简洁描述：</p><ol><li><code>ldap.ora</code>  <ul><li>配置LDAP目录名称解析，允许通过LDAP查询数据库服务信息。</li></ul></li><li><code>cman.ora</code>  <ul><li>配置Oracle连接管理器参数，用于管理和路由客户端连接。</li></ul></li><li><code>tnsnames.ora</code>  <ul><li>配置本地或远程客户端的本地名称解析，定义数据库服务的网络地址映射。</li></ul></li><li><code>listener.ora</code>  <ul><li>配置监听器的注册信息，指定监听的数据库服务和网络参数。</li></ul></li><li><code>sqlnet.ora</code>  <ul><li>配置服务器或客户端的网络协议支持、解析方式、安全、认证等设置。</li></ul></li></ol><p>上面提到测试库注册了生产库的服务名，但是因为是是别名，在测试库的tnsname.ora里并没有识别到，还有一种写法，可以直接写连接符，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">SQL&gt; </span><span class="language-bash">alter system <span class="built_in">set</span> local_listener=<span class="string">&#x27;ADDRESS=(PROTOCOL=TCP)(HOST=192.168.60.101)(PORT=1521)&#x27;</span>;</span> </span><br><span class="line"><span class="meta prompt_">SQL&gt; </span><span class="language-bash">show parameter local_listener;</span></span><br><span class="line">NAME     TYPE VALUE</span><br><span class="line">------------------------------------ ----------- ------------------------------</span><br><span class="line">local_listener     string  (ADDRESS=(PROTOCOL=TCP)(HOST=192.168.60.101)(PORT=1521))</span><br></pre></td></tr></table></figure><p>但如果测试库的tnsname.ora配置了一样的名字，成功识别到了这些信息，将信息注册到生产库上会造成什么影响呢？可能有两种可能<br>1、服务名一样，IP一样<br>2、服务名一样，IP不一样</p><h1 id="测试和验证-Oracle测试库与生产库使用相同服务名的影响分析及验证"><a href="#测试和验证-Oracle测试库与生产库使用相同服务名的影响分析及验证" class="headerlink" title="测试和验证- Oracle测试库与生产库使用相同服务名的影响分析及验证"></a>测试和验证- Oracle测试库与生产库使用相同服务名的影响分析及验证</h1><p>后面单独写一篇文章来测试吧！</p><h1 id="总结-—-Oracle-客户端无法连接之监听的分析流程"><a href="#总结-—-Oracle-客户端无法连接之监听的分析流程" class="headerlink" title="总结 — Oracle 客户端无法连接之监听的分析流程"></a>总结 — Oracle 客户端无法连接之监听的分析流程</h1><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/32462703/1723899142660-42f8b5b1-b9da-4bff-867d-41786b884369.jpeg"></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.dbs724.com/303818.html">架构师深入解析Oracle BCV技术（oracle bcv）</a><br><a href="https://www.modb.pro/db/1817911042438082560">Oracle 文件管理-参数文件、控制文件、归档 - 墨天轮</a></p><h1 id="扩展一：控制文件中关于-Resetlogs-和-NoResetlogs-的区别"><a href="#扩展一：控制文件中关于-Resetlogs-和-NoResetlogs-的区别" class="headerlink" title="扩展一：控制文件中关于 Resetlogs 和 NoResetlogs 的区别"></a>扩展一：控制文件中关于 Resetlogs 和 NoResetlogs 的区别</h1><p><code>**RESETLOGS**</code> 会重置在线重做日志文件，并重新开始日志序列号。通常在不完全恢复或数据库克隆时用。<code>RESETLOGS</code>之后，之前的日志和备份将不再有效，因此必须重新创建全备份。通常用在：不完全恢复、 数据库复制或克隆 、 备份丢失或不全的场景下。<br><code>**NORESETLOGS**</code> 则保持现有的日志序列号，不会创建新的日志文件。通常在完全恢复时使用，能够继续使用现有的备份和日志文件，不需要立即重新备份数据库。<br>通常在不使用备份控制文件恢复的情况下，是可以使用 noresetlog 方式打开数据库的。 前提是不能丢失日志文件。假若丢失了控制文件和数据文件但还是想以 noresetlog打开的话，就必须手动以noresetlogs方式重建控制文件，而且redolog 的状态都必须正常<br>其他恢复情况：失控制文件及各种日志REDOLOG、所有的不完全恢复包括SCN，TIME，跨越 REDO，都必须使用 resetlogs，重置日志，肯定会丢数据，只能恢复到日志当前的数据。<br>在同步完测试库后，控制文件会去读数据文件头中与 CHECKPOINT SCN 对应的 RBA 信息来确定从那个序列的归档日志开始恢复，一直推进恢复到 NEXT SCN 是无穷大的那个 REDOLOG，此时恢复是完全恢复的，但打开的时候还要以 resetlogs 方式打开。<br>并且有些情况Oracle是允许以不一致的状态打开数据库，可以创建一份参数文件指定数据库的DBID，allow_resetlogs_corruption参数，手工起库，但这可能导致数据库进一步损坏。因此，此参数应仅在没有其他恢复选项且需要立即访问数据库时使用。</p><h1 id="扩展二：local-listener-与-remote-listener-设置监听-1"><a href="#扩展二：local-listener-与-remote-listener-设置监听-1" class="headerlink" title="扩展二：local_listener 与 remote_listener 设置监听"></a>扩展二：local_listener 与 remote_listener 设置监听</h1><h3 id="1、LOCAL-LISTENER-参数配置"><a href="#1、LOCAL-LISTENER-参数配置" class="headerlink" title="1、LOCAL_LISTENER 参数配置"></a>1、LOCAL_LISTENER 参数配置</h3><p>首先将监听的信息添加到 tnsnames.ora 文件中。 动态注册监听时要从 tnsnames.ora 中读取相关信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LISTENER_PRODFS <span class="operator">=</span> (ADDRESS_LIST <span class="operator">=</span></span><br><span class="line">                   (ADDRESS <span class="operator">=</span> (PROTOCOL <span class="operator">=</span> TCP)(HOST <span class="operator">=</span> <span class="number">192.168</span><span class="number">.66</span><span class="number">.101</span>)(PORT <span class="operator">=</span> <span class="number">1521</span>))</span><br><span class="line">                  )</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后以 sys 用戶修改 local_listener 参数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> local_listener<span class="operator">=</span><span class="string">&#x27;LISTENER_PRODFS&#x27;</span>;</span><br></pre></td></tr></table></figure><p>也可以不使用别名直接指定连接符（加服务器模式）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QL<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> LOCAL_LISTENER<span class="operator">=</span><span class="string">&#x27;(ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.66.101)(PORT = 1521))&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这样，在 DB 启动的时候，就会自动的把 instence_name 和 service_name 注册到监听。 如果在这期间，监听重启了，监听里的信息也会丢失，这时就需要手动的把信息注册到监听：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">system</span> register;</span><br></pre></td></tr></table></figure><h3 id="2-REMOTE-LISTENER-参数配置"><a href="#2-REMOTE-LISTENER-参数配置" class="headerlink" title="2. REMOTE_LISTENER 参数配置"></a>2. <code>REMOTE_LISTENER</code> 参数配置</h3><p><code>REMOTE_LISTENER</code> 参数指定了远程监听器的地址，用于支持远程连接。配置远程监听器时，需要在 <code>tnsnames.ora</code> 文件中添加相应的监听器信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LISTENERS_DB01 = (DESCRIPTION =</span><br><span class="line">                  (ADDRESS_LIST =</span><br><span class="line">   (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.66.101)(PORT = 1521))</span><br><span class="line">   (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.66.102)(PORT = 1522))</span><br><span class="line">  )</span><br><span class="line">                 )</span><br></pre></td></tr></table></figure><p>测试配置是否正确，可以使用 <code>tnsping</code> 命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tnsping LISTENERS_DB01</span><br></pre></td></tr></table></figure><p>在所有节点上设置远程监听器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; ALTER SYSTEM SET REMOTE_LISTENER=&#x27;LISTENERS_DB01&#x27; SCOPE=BOTH;</span><br></pre></td></tr></table></figure><p>⭐此外还有还有一个参数listener_networks，用来增加一个监听用来使用专门的网络<strong>传输归档日志到DG库，这样不会影响业务。</strong><br><strong>参考MOS</strong>[<strong>ID 1063571.1</strong>]<strong>：</strong>How to Configure A Second Listener on a Separate Network in 11.2 Grid Infrastructure </p><h1 id="扩展三：连接-访问-数据库的两种方式：LOCAL-x3D-NO-和-LOCAL-x3D-YES"><a href="#扩展三：连接-访问-数据库的两种方式：LOCAL-x3D-NO-和-LOCAL-x3D-YES" class="headerlink" title="扩展三：连接(访问)数据库的两种方式：LOCAL&#x3D;NO 和 LOCAL&#x3D;YES"></a>扩展三：连接(访问)数据库的两种方式：LOCAL&#x3D;NO 和 LOCAL&#x3D;YES</h1><p> 在Oracle数据库中，连接到数据库可以通过两种主要方式：<strong>本地连接</strong>（LOCAL&#x3D;YES）和<strong>非本地连接</strong>（LOCAL&#x3D;NO）。  </p><ol><li><strong>非本地连接（LOCAL&#x3D;NO）</strong>：<br>非本地连接，也称为网络连接，通过监听器（Listener）与数据库服务器进行通信。在这种方式下，客户端应用程序通过本地监听器将请求发送到服务器端监听器。服务器端监听器接收请求后，将其转发到数据库实例，数据库实例执行操作并将结果返回给客户端。因此，客户端需要配置监听器信息，通常在<code>tnsnames.ora</code>文件中进行设置。</li><li><strong>本地连接（LOCAL&#x3D;YES）</strong>：<br>本地连接直接在数据库服务器上进行，不经过网络监听器。在这种模式下，即使服务器上的监听器未启动， 通过本地的 sqlplus 还是可以连上数据库的 。</li></ol><h1 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h1><p><strong>在通过BCV同步创建测试库的场景下，出现<code>LOCAL_LISTENER</code>参数与生产库保持一致的问题，可能导致数据库监听配置不正确，无法连接到测试库。这种情况通常需要DBA手动调整<code>LOCAL_LISTENER</code>参数，确保测试库的监听器配置正确。</strong></p><h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="### 1. 问题描述"></a>### 1. 问题描述</h2><p><strong>在通过BCV卷进行同步后，测试库中的参数往往会保留生产库的</strong><br><strong>配置，特别是<code>LOCAL_LISTENER</code>参数。由于<code>LOCAL_LISTENER</code>指定了数据库监听的地址或网络接口，保持与生产库相同的配置可能导致测试库监听器无法正确启动，或者导致客户端连接失败。</strong></p><p><strong>### 2. 解决方案概述</strong><br><strong>为了避免<code>LOCAL_LISTENER</code>参数保留生产库的配置，需要在同步后的启动过程中调整测试库的<code>LOCAL_LISTENER</code>参数，使其与测试库的网络环境相匹配。以下是具体的解决方案步骤：</strong></p><p><strong>### 3. 解决方案步骤</strong></p><p><strong>#### 步骤1：停库进行BCV同步</strong><br><strong>此步骤由DBA负责，停止数据库实例并通过存储系统（如BCV卷）进行数据同步操作。通常这一阶段不会涉及参数配置的调整，但需要确保在停库前进行适当的备份，以便在出现问题时可以回滚。</strong></p><p><strong>#### 步骤2：调整测试库的<code>LOCAL_LISTENER</code>参数</strong><br><strong>在BCV同步完成后，启动测试库之前，DBA需要手动调整<code>LOCAL_LISTENER</code>参数，使其指向测试环境中的监听器地址。</strong></p><p><strong>##### 方法1：手动修改<code>LOCAL_LISTENER</code>参数</strong><br><strong>1. <strong>通过SQL*Plus连接数据库实例（在<code>NOMOUNT</code>或<code>MOUNT</code>状态下）</strong>：</strong><br>**   如果数据库已经启动至<code>MOUNT</code>状态，可以通过<code>SYSDBA</code>权限登录到数据库。**<br>**   <code>bash** **   sqlplus / as sysdba** **   </code>**</p><p><strong>2. <strong>检查当前<code>LOCAL_LISTENER</code>参数值</strong>：</strong><br>**   <code>sql** **   SQL&gt; show parameter local_listener;** **   </code>**</p><p>**   这将显示当前的<code>LOCAL_LISTENER</code>配置，通常是生产环境的地址或主机名。**</p><p><strong>3. <strong>修改<code>LOCAL_LISTENER</code>参数</strong>：</strong><br>**   使用<code>ALTER SYSTEM</code>命令修改测试库的<code>LOCAL_LISTENER</code>参数，使其与测试环境的监听器配置相匹配。假设测试库的监听器在<code>testdb_host</code>的<code>1521</code>端口上运行，配置如下：**<br>**   <code>sql** **   SQL&gt; ALTER SYSTEM SET LOCAL_LISTENER=&#39;(ADDRESS=(PROTOCOL=TCP)(HOST=testdb_host)(PORT=1521))&#39; SCOPE=SPFILE;** **   </code>**</p><p>**   这种方式将<code>LOCAL_LISTENER</code>参数修改为指向测试库的监听地址，并且使用<code>SCOPE=SPFILE</code>确保该修改在下次数据库启动时生效。**</p><p><strong>4. <strong>重启数据库</strong>：</strong><br>**   为了应用配置更改，重启测试数据库实例：**<br>**   <code>sql** **   SQL&gt; SHUTDOWN IMMEDIATE;** **   SQL&gt; STARTUP;** **   </code>**</p><p><strong>##### 方法2：通过<code>TNSNAMES.ORA</code>文件配置</strong><br><strong>如果不想直接在参数文件中硬编码监听地址，可以通过<code>TNSNAMES.ORA</code>文件来配置<code>LOCAL_LISTENER</code>参数。首先在测试库的<code>TNSNAMES.ORA</code>文件中添加一个新的监听器配置：</strong></p><p><strong>1. <strong>编辑<code>tnsnames.ora</code>文件</strong>：</strong><br>**   在测试库的<code>$ORACLE_HOME/network/admin/tnsnames.ora</code>文件中添加以下条目：**<br>**   <code>plaintext** **   TESTDB_LISTENER =** **     (DESCRIPTION =** **       (ADDRESS = (PROTOCOL = TCP)(HOST=testdb_host)(PORT=1521))** **     )** **   </code>**</p><p><strong>2. <strong>修改<code>LOCAL_LISTENER</code>参数</strong>：</strong><br>**   使用以下命令修改<code>LOCAL_LISTENER</code>，指向<code>TNSNAMES.ORA</code>中配置的监听器条目：**<br>**   <code>sql** **   SQL&gt; ALTER SYSTEM SET LOCAL_LISTENER=&#39;TESTDB_LISTENER&#39; SCOPE=SPFILE;** **   </code>**</p><p><strong>3. <strong>重启数据库</strong>：</strong><br>**   通过重启数据库使修改生效。**</p><p><strong>#### 步骤3：启动测试库并验证配置</strong><br><strong>完成参数修改后，启动测试库并验证连接是否正常。</strong></p><p><strong>1. <strong>启动测试库</strong>：</strong><br>**   <code>sql** **   SQL&gt; STARTUP;** **   </code>**</p><p><strong>2. <strong>验证监听器配置</strong>：</strong><br>**   在数据库启动后，使用<code>lsnrctl</code>工具检查监听器状态，确保其监听了正确的服务和端口：**<br>**   <code>bash** **   $ lsnrctl status** **   </code>**</p><p><strong>3. <strong>测试数据库连接</strong>：</strong><br>**   尝试通过SQL<em>Plus或其他数据库客户端工具连接测试库，确保连接正常：</em>*<br>**   <code>bash** **   sqlplus test_user@TESTDB** **   </code>**</p><p><strong>### 4. 注意事项</strong><br><strong>- <strong>自动化调整</strong>：如果测试库经常需要从生产库同步，考虑编写脚本在同步后自动调整<code>LOCAL_LISTENER</code>参数，以减少手动干预的可能性。</strong><br><strong>- <strong>网络配置一致性</strong>：确保测试库的网络配置与生产库有所区别，避免因网络冲突导致的连接问题。</strong><br><strong>- <strong>TNS文件同步</strong>：如果使用<code>TNSNAMES.ORA</code>来管理监听器配置，确保测试库的网络配置文件与实际的网络环境相匹配。</strong></p><p><strong>### 5. 总结</strong><br><strong>在通过BCV同步测试库的场景中，由于<code>LOCAL_LISTENER</code>参数仍然保持生产库的配置，导致测试库的监听器设置不正确。通过手动调整<code>LOCAL_LISTENER</code>参数，指向测试环境中的正确地址，DBA可以确保测试库在同步后能够正常启动和连接。</strong></p><p>在通过BCV（Business Continuance Volume）同步创建测试库的过程中，使用生产库的参数文件（SPFILE&#x2F;PFILE）来启动数据库是一个常见的做法，主要原因与以下几个方面有关：</p><h2 id="数据库的一致性"><a href="#数据库的一致性" class="headerlink" title="数据库的一致性"></a>数据库的一致性</h2><p>BCV同步通常涉及将生产数据库的存储卷直接复制到测试环境。为了确保数据库的一致性，特别是在涉及物理结构和存储配置时，使用生产库的参数文件可以确保同步后的测试库能够正确识别数据文件、日志文件以及其他与存储相关的配置。<br>生产库的参数文件包含了数据库的关键配置，例如：</p><ul><li>数据文件和重做日志文件的路径</li><li>控制文件的路径</li><li>内存参数（如<code>SGA</code>和<code>PGA</code>的配置）</li><li>启动模式（如归档日志模式等）</li></ul><p>如果不使用生产库的参数文件，数据库可能无法正确加载这些配置，导致启动失败或者出现其他问题。</p><h3 id="2-物理结构一致性"><a href="#2-物理结构一致性" class="headerlink" title="2. 物理结构一致性"></a>2. <strong>物理结构一致性</strong></h3><p>数据库的物理结构（包括数据文件、日志文件、控制文件等）在生产环境中已经得到了详细的定义，这些信息在参数文件中进行了明确的指定。BCV同步的目的是将生产环境的存储直接复制到测试环境，因此为了确保测试库的物理结构与生产库一致，通常需要使用生产库的参数文件来启动。<br>如果使用不同的参数文件，可能导致以下问题：</p><ul><li><strong>路径不匹配</strong>：测试库的数据文件、日志文件路径与实际物理存储不符，导致无法启动。</li><li><strong>文件名不匹配</strong>：参数文件中指定的控制文件或日志文件名与实际BCV同步后的文件名不匹配。</li></ul><h3 id="3-环境的快速恢复"><a href="#3-环境的快速恢复" class="headerlink" title="3. 环境的快速恢复"></a>3. <strong>环境的快速恢复</strong></h3><p>BCV同步的一个主要目的就是快速创建一个与生产环境几乎一致的测试库或灾备库。通过使用生产库的参数文件，可以最大程度地减少手动配置的步骤，从而加快恢复和启动的速度。<br>在某些场景下，比如在灾备环境中，快速恢复生产库的能力是非常关键的。使用生产的参数文件可以确保数据库实例能够在短时间内通过BCV同步恢复并重新启动。</p><h3 id="4-生产配置的继承"><a href="#4-生产配置的继承" class="headerlink" title="4. 生产配置的继承"></a>4. <strong>生产配置的继承</strong></h3><p>生产库的参数文件已经过仔细的调优和配置，特别是在性能、内存、并发处理等方面。测试库往往需要继承生产库的这些配置，以便在测试环境中模拟真实的生产场景。使用生产的参数文件能够确保测试库的配置与生产库保持一致，使测试结果更具有参考价值。</p><h3 id="5-避免不必要的错误"><a href="#5-避免不必要的错误" class="headerlink" title="5. 避免不必要的错误"></a>5. <strong>避免不必要的错误</strong></h3><p>在数据库启动过程中，参数文件起着至关重要的作用，它定义了数据库实例的许多重要属性。如果使用一个与生产库不同的参数文件（特别是一个未经过调试和优化的参数文件），可能会引发启动失败、性能问题，甚至数据损坏等问题。因此，使用生产库的参数文件可以避免这些潜在的错误。</p><h3 id="6-后续的调整"><a href="#6-后续的调整" class="headerlink" title="6. 后续的调整"></a>6. <strong>后续的调整</strong></h3><p>虽然使用生产的参数文件启动了测试库，但在数据库启动后，可以根据测试环境的具体需求，对某些参数进行调整。这些调整通常涉及：</p><ul><li><strong>网络配置</strong>：如<code>LOCAL_LISTENER</code>、<code>REMOTE_LISTENER</code>等，确保测试库的网络配置适应当前环境。</li><li><strong>内存配置</strong>：测试环境的硬件资源可能不同于生产环境，因此可以调整内存参数（如<code>SGA</code>、<code>PGA</code>）。</li><li><strong>路径调整</strong>：如果测试环境的数据文件路径与生产环境不同，可以手动修改相关文件路径或使用存储设备的映射功能。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>使用生产库的参数文件启动通过BCV同步的测试库，主要是为了确保数据库的物理结构和配置的一致性，避免启动过程中出现错误，并加快恢复和启动的速度。虽然在启动后可能需要进行一些特定的环境调整，但总体而言，这种做法可以减少手动配置的步骤，并确保测试环境与生产环境尽可能一致。<br>在Oracle数据库中，恢复过程涉及到的控制文件、数据文件和重做日志文件的处理非常重要。你的描述准确地涵盖了如何在恢复过程中处理这些文件。让我们详细解释一下这个过程，并简化描述：</p><h2 id="恢复过程简述"><a href="#恢复过程简述" class="headerlink" title="恢复过程简述"></a>恢复过程简述</h2><ol><li><strong>同步测试库</strong>：<ul><li>在数据库恢复操作中，特别是从备份或克隆数据库时，测试库可能会与生产库同步。这通常包括将测试库的数据文件与生产库的数据文件同步，以确保数据一致性。</li></ul></li><li><strong>控制文件读取</strong>：<ul><li>恢复过程中，控制文件会读取数据文件头中的<code>CHECKPOINT SCN</code>（系统变更号）信息。<code>CHECKPOINT SCN</code>标记了数据文件中最后一个写入的变更点。</li></ul></li><li><strong>归档日志恢复</strong>：<ul><li>控制文件会使用<code>CHECKPOINT SCN</code>来确定从哪个归档日志文件开始恢复。恢复会从对应的归档日志文件开始，逐步应用日志中的变更。</li><li>恢复会一直推进到<code>NEXT SCN</code>，即无穷大的SCN，标志着所有必要的日志文件都已经应用完毕。</li></ul></li><li><strong>完全恢复与</strong><code>RESETLOGS</code>：<ul><li>在完成上述恢复过程后，数据库会处于一个完全恢复状态，但由于日志链的可能中断（如丢失的日志或恢复过程中的重置），需要使用<code>RESETLOGS</code>来打开数据库。</li><li><code>RESETLOGS</code> 会重置日志序列号并创建新的日志文件。这样可以确保数据库从当前状态继续一致运行，但之前的日志文件将不再使用。</li></ul></li></ol><h3 id="简化描述"><a href="#简化描述" class="headerlink" title="简化描述"></a>简化描述</h3><p>在同步完测试库后，控制文件读取数据文件中的<code>CHECKPOINT SCN</code>，确定从哪个归档日志开始恢复，直到所有变更都应用完毕。这时，数据库已经恢复到一个一致的状态，但为了完成恢复并确保一致性，需要使用<code>RESETLOGS</code>来打开数据库。这一过程确保数据库能够从当前恢复点继续运行，并创建新的日志链。</p><h2 id="Oracle数据库监听与客户端连接故障检查分析流程"><a href="#Oracle数据库监听与客户端连接故障检查分析流程" class="headerlink" title="Oracle数据库监听与客户端连接故障检查分析流程"></a>Oracle数据库监听与客户端连接故障检查分析流程</h2><p>在Oracle数据库管理中，连接问题是常见的挑战。本文将详细分析如何排查和解决客户端连接故障，包括常见的配置问题和故障排查步骤。</p><h4 id="1-客户端与服务器的兼容性"><a href="#1-客户端与服务器的兼容性" class="headerlink" title="1. 客户端与服务器的兼容性"></a>1. 客户端与服务器的兼容性</h4><p>Oracle客户端通常向下兼容，允许高版本客户端连接低版本服务器。Oracle服务器上默认安装了客户端核心组件，因此，如果机器上已经有数据库服务器，就不需要额外安装客户端。多个客户端版本并存可能会导致冲突，特别是当存在不同版本（如9i与10g）的客户端时。为了避免冲突，建议在PATH环境变量中仅设置一个客户端的bin目录。</p><h4 id="2-操作系统位数兼容问题"><a href="#2-操作系统位数兼容问题" class="headerlink" title="2. 操作系统位数兼容问题"></a>2. 操作系统位数兼容问题</h4><p>在64位操作系统上安装64位Oracle Client通常没有问题，但在使用32位应用程序（如PL&#x2F;SQL Developer）时可能会遇到兼容性问题。64位操作系统兼容32位程序，但32位应用程序需要32位客户端。如果遇到连接问题，尝试安装32位的Oracle Client来解决。</p><h4 id="3-客户端命名配置"><a href="#3-客户端命名配置" class="headerlink" title="3. 客户端命名配置"></a>3. 客户端命名配置</h4><p>确保本地命名（如<code>ora11g</code>）能被正确解析。可以使用<code>tnsping</code>命令检查配置是否正确。<code>tnsping</code>命令的主要作用是验证TNS配置文件的位置、检查本地命名解析和远程监听器状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tnsping ora11g</span><br></pre></td></tr></table></figure><h4 id="4-监听器故障排查"><a href="#4-监听器故障排查" class="headerlink" title="4. 监听器故障排查"></a>4. 监听器故障排查</h4><p>监听器负责建立实例和客户端的连接。使用以下命令检查监听器状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lsnrctl status</span><br></pre></td></tr></table></figure><p>如果监听器未启动，请启动它。如果监听器启动但没有服务注册，可能是监听器未正确注册服务名和实例信息。这涉及到实例的动态和静态注册。</p><h4 id="5-数据库实例的注册"><a href="#5-数据库实例的注册" class="headerlink" title="5. 数据库实例的注册"></a>5. 数据库实例的注册</h4><ul><li><strong>动态注册</strong>：数据库实例通过PMON进程定期向监听器报告自身状态。若实例启动后未能自动注册，可以手动执行以下命令进行注册：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> REGISTER;</span><br></pre></td></tr></table></figure><ul><li><strong>静态注册</strong>：需要在<code>listener.ora</code>文件中配置服务名称和实例信息。</li></ul><h4 id="6-客户端和服务器端的跟踪"><a href="#6-客户端和服务器端的跟踪" class="headerlink" title="6. 客户端和服务器端的跟踪"></a>6. 客户端和服务器端的跟踪</h4><ul><li><strong>客户端跟踪</strong>：<ul><li>在客户端<code>sqlnet.ora</code>中设置跟踪参数：</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TRACE_LEVEL_CLIENT=16</span><br><span class="line">TRACE_FILE_CLIENT=CLIENT</span><br><span class="line">TRACE_TIMESTAMP_CLIENT=ON</span><br><span class="line">TRACE_DIRECTORY_CLIENT=&lt;path&gt;</span><br></pre></td></tr></table></figure><ul><li>跟踪客户端连接过程，定位无法连接的原因，如防火墙问题。跟踪完成后，务必关闭跟踪参数。</li><li><strong>服务器端跟踪</strong>：<ul><li>在AIX系统中，可以使用<code>truss</code>工具跟踪本地<code>sqlplus</code>连接过程：</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ truss -D sqlplus <span class="string">&quot;/as sysdba&quot;</span></span><br></pre></td></tr></table></figure><ul><li>跟踪过程中可以帮助排查连接挂起等问题。</li><li><strong>客户端</strong><code>tnsping</code><strong>跟踪</strong>：<ul><li>在客户端<code>sqlnet.ora</code>中设置跟踪参数：</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TNSPING.TRACE_LEVEL=[OFF|USER|ADMIN|SUPPORT]</span><br><span class="line">TNSPING.TRACE_DIRECTORY=&lt;path&gt;</span><br></pre></td></tr></table></figure><ul><li>完成后关闭跟踪参数。</li></ul><h4 id="7-故障处理思路"><a href="#7-故障处理思路" class="headerlink" title="7. 故障处理思路"></a>7. 故障处理思路</h4><p>当客户端无法连接到服务端时，可以按以下步骤进行排查：</p><ol><li><strong>尝试登录</strong>：<ul><li>确认客户端是否能<code>tnsping</code>到服务端。</li><li>尝试使用<code>sqlplus</code>在服务端进行连接：</li></ul></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sqlplus <span class="string">&quot;sys/xxx@xxx as sysdba&quot;</span></span><br><span class="line">$ sqlplus <span class="string">&quot;/as sysdba&quot;</span></span><br></pre></td></tr></table></figure><ol><li><strong>观察监听器状态</strong>：<ul><li>检查监听器状态及其服务：</li></ul></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lsnrctl status</span><br></pre></td></tr></table></figure><ul><li>查看监听器的内存和CPU使用情况。</li><li>检查<code>listener.ora</code>、<code>sqlnet.ora</code>和<code>listener.log</code>文件。</li></ul><ol><li><strong>尝试跟踪</strong>：<ul><li>设置客户端跟踪参数，记录连接过程。</li><li>进行服务器端<code>sqlplus</code>连接跟踪。</li></ul></li><li><strong>查看数据库状态</strong>：<ul><li>检查主机资源消耗情况。</li><li>查看数据库的等待事件（如<code>v$session_wait</code>）。</li><li>确认<code>$ORACLE_HOME/bin/oracle</code>的权限和大小。</li></ul></li></ol><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>通过以上步骤，可以系统地排查和解决Oracle数据库客户端连接故障。理解客户端与服务器的兼容性、正确配置监听器、动态与静态注册以及使用跟踪工具是排查和解决连接问题的关键。</p><h2 id="客户端无法连接至服务端的故障处理思路"><a href="#客户端无法连接至服务端的故障处理思路" class="headerlink" title="客户端无法连接至服务端的故障处理思路"></a>客户端无法连接至服务端的故障处理思路</h2><p>当客户端无法连接至Oracle数据库服务端时，可以按照以下步骤系统地排查和解决问题：</p><h4 id="1-尝试登录"><a href="#1-尝试登录" class="headerlink" title="1. 尝试登录"></a>1. 尝试登录</h4><ol><li><strong>客户端能 <strong><code>tnsping</code></strong> 通吗？</strong><ul><li>使用<code>tnsping</code>命令检查客户端是否能解析到目标服务的TNS名称。这有助于验证网络连接和TNS配置。</li></ul></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tnsping &lt;SERVICE_NAME&gt;</span><br></pre></td></tr></table></figure><ol><li><strong>能ping通服务端吗？</strong><ul><li>确认客户端是否能够通过网络ping通服务端IP地址或主机名。这验证了基本的网络连通性。</li></ul></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ping &lt;SERVICE_IP&gt;</span><br></pre></td></tr></table></figure><ol><li><strong>服务端 <strong><code>sqlplus</code></strong> 连接是否成功？</strong><ul><li>在服务端，尝试通过<code>sqlplus</code>连接数据库：</li></ul></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sqlplus sys/xxx@xxx as sysdba</span><br></pre></td></tr></table></figure><ul><li>或者使用本地连接方式：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sqlplus /as sysdba</span><br></pre></td></tr></table></figure><h4 id="2-观察监听状态"><a href="#2-观察监听状态" class="headerlink" title="2. 观察监听状态"></a>2. 观察监听状态</h4><ol><li><strong>检查监听器状态</strong><ul><li>执行以下命令查看监听器的状态，确认它是否启动并正在监听预期的服务：</li></ul></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lsnrctl status</span><br></pre></td></tr></table></figure><ol><li><strong>查看监听进程的资源使用情况</strong><ul><li>确认监听进程的内存和CPU使用率是否正常，以排除资源瓶颈。</li></ul></li><li><strong>检查配置文件和日志</strong><ul><li>查看<code>listener.ora</code>和<code>sqlnet.ora</code>文件中的配置是否正确。</li><li>检查<code>listener.log</code>文件中的错误信息，了解监听器的运行状况。</li></ul></li></ol><h4 id="3-尝试跟踪"><a href="#3-尝试跟踪" class="headerlink" title="3. 尝试跟踪"></a>3. 尝试跟踪</h4><ol><li><strong>客户端设置跟踪参数</strong><ul><li>在客户端的<code>sqlnet.ora</code>文件中启用跟踪，记录连接过程中的详细信息：</li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TRACE_LEVEL_CLIENT=16</span><br><span class="line">TRACE_FILE_CLIENT=CLIENT</span><br><span class="line">TRACE_TIMESTAMP_CLIENT=ON</span><br><span class="line">TRACE_DIRECTORY_CLIENT=&lt;path&gt;</span><br></pre></td></tr></table></figure><ol><li><strong>服务端跟踪 <strong><code>sqlplus</code></strong> 连接过程</strong><ul><li>使用<code>truss</code>（AIX系统）或类似工具跟踪服务端<code>sqlplus</code>的连接过程，以诊断连接挂起或错误：</li></ul></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ truss -D sqlplus <span class="string">&quot;/as sysdba&quot;</span></span><br></pre></td></tr></table></figure><h4 id="4-查看数据库状态"><a href="#4-查看数据库状态" class="headerlink" title="4. 查看数据库状态"></a>4. 查看数据库状态</h4><ol><li><strong>检查主机资源消耗情况</strong><ul><li>确认数据库主机的CPU、内存和磁盘使用情况是否正常，避免因资源不足导致的连接问题。</li></ul></li><li><strong>检查数据库等待事件</strong><ul><li>使用以下SQL查询数据库的等待事件，以识别潜在的性能问题：</li></ul></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> v$session_wait;</span><br></pre></td></tr></table></figure><ol><li><strong>检查</strong><code>$ORACLE_HOME/bin/oracle</code><strong>权限和大小</strong><ul><li>确认<code>$ORACLE_HOME/bin/oracle</code>文件的权限和大小是否正常，确保数据库进程能够正确运行。</li></ul></li></ol><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>以上步骤提供了系统化的故障排查方法，涵盖了客户端连接问题的各个方面。通过这些步骤，可以有效地定位和解决客户端无法连接到服务端的问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/07/29/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86-%E5%8F%82%E6%95%B0%E6%96%87%E4%BB%B6%E3%80%81%E6%8E%A7%E5%88%B6%E6%96%87%E4%BB%B6%E3%80%81%E5%BD%92%E6%A1%A3/"/>
      <url>/2024/07/29/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86-%E5%8F%82%E6%95%B0%E6%96%87%E4%BB%B6%E3%80%81%E6%8E%A7%E5%88%B6%E6%96%87%E4%BB%B6%E3%80%81%E5%BD%92%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="STARTUP-起库："><a href="#STARTUP-起库：" class="headerlink" title="STARTUP 起库："></a>STARTUP 起库：</h3><ol><li>加载参数文件 –》startup nomount</li><li>加载控制文件 –》startup mount</li><li>加载数据文件等所有文件–》startup （打开到open）</li></ol><h3 id="1-1-参数文件"><a href="#1-1-参数文件" class="headerlink" title="1.1 参数文件"></a>1.1 参数文件</h3><p><strong>spfile（服务器参数文件）</strong> 是一个二进制文件，存储在服务端的 <code>$ORACLE_HOME/dbs</code> 目录下。不能直接用文本编辑器修改参数，而是通过 <code>sqlplus</code> 中的命令动态修改。由于其二进制特性，修改后可以立即生效，无需重启数据库。<br><strong>pfile（参数文件）</strong> 是一个文本文件，可以存储在客户端或服务端，用文本编辑器进行查看和修改。修改 <code>pfile</code> 后，需要重启数据库才能使更改生效。<code>pfile</code> 在启动数据库时提供参数配置，可以作为 spfile 的备份或在特定情况下使用。</p><h4 id="1-1-1-优先级别："><a href="#1-1-1-优先级别：" class="headerlink" title="1.1.1 优先级别："></a><strong>1.1.1</strong> <strong>优先级别：</strong></h4><p>oracle 启动读取参数文件的顺序,如果个文件都不存在，则Oracle会报错<br>spfile.ora –&gt; spfile.ora –&gt;init.ora –&gt;init.ora</p><h4 id="1-1-2-默认目录："><a href="#1-1-2-默认目录：" class="headerlink" title="1.1.2 默认目录："></a><strong>1.1.2</strong> <strong>默认目录：</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ORACLE_HOME</span>/dbs</span><br></pre></td></tr></table></figure><h4 id="1-1-3-参数文件之间的转换"><a href="#1-1-3-参数文件之间的转换" class="headerlink" title="1.1.3 参数文件之间的转换"></a><strong>1.1.3</strong> <strong>参数文件之间的转换</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- spfile--&gt;pfile转换</span><br><span class="line">SQL&gt; create pfile from spfile;</span><br><span class="line">SQL&gt; !ls $ORACLE_HOME/dbs/initorcl.ora</span><br><span class="line">/u01/app/oracle/product/11.2.0/db_1/dbs/initorcl.ora</span><br><span class="line"></span><br><span class="line">-- 生成在指定路径</span><br><span class="line">SQL&gt; create pfile=&#x27;/tmp/initorcl.ora&#x27; from spfile;</span><br><span class="line"></span><br><span class="line">-- pfile--&gt;spfile 转换</span><br><span class="line">SQL&gt; create spfile=&#x27;/tmp/spfileorcl.ora&#x27; from pfile;</span><br><span class="line"></span><br><span class="line">--可以用strings命令查看创建的spfile文件，查出来的结过和pfile是一样的。</span><br></pre></td></tr></table></figure><p>其他：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">--优先级：</span><br><span class="line">SINSTANCE_MODIFIABLE &gt; ISSYS_MODIFIABLE &gt; ISSES_MODIFIABLE </span><br><span class="line"></span><br><span class="line">--修改参数</span><br><span class="line">altersystem|session setparameter_name=values scope=memory|spfile|both sid=&#x27;&lt;sid&gt;&#x27;|&#x27;*&#x27;;</span><br><span class="line"></span><br><span class="line">--重置默认参数</span><br><span class="line">aler system reset parameter_name scope=spfile sid=&#x27;&lt;sid&gt;&#x27;|&#x27;*&#x27;;</span><br><span class="line"></span><br><span class="line">--显示系统中隐藏参数：</span><br><span class="line">select ksppinm,ksppstvl from x$ksppi a, x$ksppcv b where a.indx=b.indx</span><br></pre></td></tr></table></figure><h4 id="1-1-4-判断数据库从SPFILE还是PFILE启动"><a href="#1-1-4-判断数据库从SPFILE还是PFILE启动" class="headerlink" title="1.1.4 判断数据库从SPFILE还是PFILE启动"></a>1.1.4 判断数据库从SPFILE还是PFILE启动</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 方式1：</span></span><br><span class="line"><span class="comment">-- 如果是spfile，则value是有值的</span></span><br><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">parameter</span> spfile</span><br><span class="line">NAME TYPE <span class="keyword">VALUE</span></span><br><span class="line"><span class="comment">------------------------------------ ---------- ----------------------------</span></span><br><span class="line">spfile string <span class="operator">/</span>u01<span class="operator">/</span>app<span class="operator">/</span>oracle<span class="operator">/</span>product<span class="operator">/</span><span class="number">11.2</span><span class="number">.0</span></span><br><span class="line"><span class="operator">/</span>db_1<span class="operator">/</span>dbs<span class="operator">/</span>spfileorcl.ora</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 方式2：</span></span><br><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">set</span> linesize <span class="number">120</span></span><br><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> col name format a10</span><br><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> col <span class="keyword">value</span> format a60</span><br><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> name,<span class="keyword">value</span> <span class="keyword">from</span> v$<span class="keyword">parameter</span> <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;spfile&#x27;</span>;</span><br><span class="line">NAME <span class="keyword">VALUE</span></span><br><span class="line"><span class="comment">------ --------------------------------------------------------</span></span><br><span class="line">spfile <span class="operator">/</span>u01<span class="operator">/</span>app<span class="operator">/</span>oracle<span class="operator">/</span>product<span class="operator">/</span><span class="number">11.2</span><span class="number">.0</span><span class="operator">/</span>db_1<span class="operator">/</span>dbs<span class="operator">/</span>spfileorcl.ora</span><br></pre></td></tr></table></figure><h4 id="1-1-5-修改参数文件的三种模式："><a href="#1-1-5-修改参数文件的三种模式：" class="headerlink" title="1.1.5 修改参数文件的三种模式："></a><strong>1.1.5</strong> <strong>修改参数文件的三种模式：</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">scope=both 立即并永久生效，（默认模式）</span><br><span class="line">scope=spfile 下次启动才能生效。</span><br><span class="line">scope=memory 立即生效但下次启动时失效</span><br><span class="line"></span><br><span class="line">##查询方法：v$parameter</span><br><span class="line">isses_modifiable:</span><br><span class="line">ISSES_MODIFIABLE＝true</span><br><span class="line">表明这个参数可以在session级别可以修改，并且立即生效。false就是不能修改</span><br><span class="line">issys_modifiable:</span><br><span class="line">issys_modifiable＝immediate</span><br><span class="line">表示这个参数可以在system立即修改，并且立即生效。</span><br><span class="line">若如果issys_modifiable=deferred</span><br><span class="line">会话级别参数，直接通过alter session set 参数名=值；</span><br><span class="line">issys_modifiable=false</span><br><span class="line">表示这个参数不能在直接修改在内存中，需要加scope=spfile，重启后才能生效。</span><br><span class="line"></span><br><span class="line">比如：</span><br><span class="line">SQL&gt; select name, isses_modifiable,issys_modifiable from v$parameter where</span><br><span class="line">name=&#x27;sga_max_size&#x27;;</span><br><span class="line">NAME ISSES ISSYS_MOD</span><br><span class="line">------------------------------ ----- ---------</span><br><span class="line">sga_max_size FALSE FALSE ##两个都为false</span><br><span class="line">SQL&gt; alter system set sga_max_size=900M;</span><br><span class="line">alter system set sga_max_size=900M</span><br><span class="line">*</span><br><span class="line">第 1 行出现错误:</span><br><span class="line">ORA-02095: 无法修改指定的初始化参数</span><br><span class="line">SQL&gt; alter system set sga_max_size=800M scope=spfile;</span><br><span class="line">系统已更改。</span><br><span class="line">恢复参数到默认值</span><br><span class="line">SQL&gt; alter system reset sga_max_size scope=spfile;</span><br><span class="line">总结：</span><br><span class="line">一般scope常用的参数是both和spfile。</span><br></pre></td></tr></table></figure><h4 id="扩展1：spfile-默认参数文件含义介绍"><a href="#扩展1：spfile-默认参数文件含义介绍" class="headerlink" title="扩展1：spfile 默认参数文件含义介绍"></a>扩展1：spfile 默认参数文件含义介绍</h4><p>在Oracle数据库中，spfile（服务器参数文件）和pfile（文本参数文件）用于存储初始化参数。spfile参数带有前缀<code>*</code>，而pfile参数则不带。以下是一些常见的spfile参数及其含义：</p><ul><li><strong>db_name</strong>：这是数据库的名称，是在创建数据库时指定的。</li><li><strong>compatible</strong>：用于指定数据库的兼容版本，允许数据库在旧版本的兼容模式下运行。</li><li><strong>allow_resetlogs_corruption</strong>：危险参数，仅在紧急恢复情况下使用，可能会导致数据库损坏。</li><li><strong>remote_login_passwordfile</strong>：定义密码文件的使用方式，有三种选项：none（不使用），shared（多个实例共享），exclusive（仅本实例使用）。</li><li><strong>audit_file_dest</strong>：审计文件的存放位置。</li><li><strong>background_dump_dest</strong>：后台进程日志的存放位置。</li><li><strong>control_files</strong>：指定控制文件的位置。</li><li><strong>core_dump_dest</strong>：核心转储文件的存放位置。</li><li><strong>db_block_size</strong>：数据库的块大小，通常为8KB。</li><li><strong>db_domain</strong>：数据库的域名，通常为空。</li><li><strong>db_file_multiblock_read_count</strong>：指定单次I&#x2F;O操作可以读取的块数。</li><li><strong>db_recovery_file_dest</strong>：闪回恢复区的存放路径。</li><li><strong>db_recovery_file_dest_size</strong>：闪回恢复区的大小。</li><li><strong>dispatchers</strong>：配置共享服务器进程。</li><li><strong>job_queue_processes</strong>：允许并发运行的作业进程数。</li><li><strong>local_listener</strong>：本地监听服务的名称。</li><li><strong>open_cursors</strong>：允许同时打开的游标数。</li><li><strong>pga_aggregate_target</strong>：PGA的内存大小。</li><li><strong>processes</strong>：允许并发运行的进程数。</li><li><strong>sga_target</strong>：SGA的内存大小。</li><li><strong>undo_management</strong>：Undo表空间的管理方式，通常为AUTO。</li><li><strong>undo_tablespace</strong>：Undo表空间的名称。</li><li><strong>user_dump_dest</strong>：用户进程转储文件的存放位置。</li></ul><h3 id="1-2-控制文件"><a href="#1-2-控制文件" class="headerlink" title="1.2 控制文件"></a><strong>1.2</strong> <strong>控制文件</strong></h3><h4 id="1-2-1-控制文件存储的主要信息"><a href="#1-2-1-控制文件存储的主要信息" class="headerlink" title="1.2.1 控制文件存储的主要信息"></a><strong>1.2.1</strong> <strong>控制文件存储的主要信息</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DBID</span><br><span class="line">数据库名称和SID标识</span><br><span class="line">数据文件和日志文件列表</span><br><span class="line">数据库创建的时间戳</span><br><span class="line">表空间信息</span><br><span class="line">当前重做日志文件序列号（scn）</span><br><span class="line">归档日志信息</span><br><span class="line">检查点信息</span><br><span class="line">回滚段的起始与结束</span><br><span class="line">备份数据文件信息</span><br></pre></td></tr></table></figure><h4 id="1-2-2-控制文件位置"><a href="#1-2-2-控制文件位置" class="headerlink" title="1.2.2 控制文件位置"></a><strong>1.2.2</strong> <strong>控制文件位置</strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> v$controlfile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">parameter</span> control_files;</span><br></pre></td></tr></table></figure><h4 id="1-2-3-控制文件管理"><a href="#1-2-3-控制文件管理" class="headerlink" title="1.2.3 控制文件管理"></a><strong>1.2.3 控制文件管理</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">为了提高数据库的安全性，至少要为数据库建立两个控制文件，而且这两个文件最好分别放在不同的磁盘</span><br><span class="line">中，这样可以避免产生由于某个磁盘故障而无法启动数据库的危险，该管理策略称为多路复用控制文件。</span><br><span class="line">当多路复用控制文件某个磁盘发生故障导致其包含的控制文件损坏，数据库将被关闭或者发生异常，</span><br><span class="line">此时可以用另一磁盘中保存的控制文件来恢复被损坏的控制位文件，然后再重启数据库，</span><br><span class="line">达到保护控制文件的目的。</span><br><span class="line"></span><br><span class="line">数据库建立时，一般会默认创建两个控制文件，我们可以手动的再创建多个控制文件且不要与默认的放在</span><br><span class="line">同一个磁盘中，首先我们可以修改control_files参数来增加控制文件。</span><br></pre></td></tr></table></figure><h4 id="实战一：重建控制文件"><a href="#实战一：重建控制文件" class="headerlink" title="实战一：重建控制文件"></a>实战一：重建控制文件</h4><p>1.<strong>备份</strong> <strong>backup controlfile</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 数据库打开时是不能直接操作系统界别cp控制文件的，可以使用backup语句</span><br><span class="line"><span class="keyword">alter</span> database backup controlfile <span class="keyword">to</span> <span class="string">&#x27;/u01/app/oracle/oradata/PROD/control.ctl.bk&#x27;</span>;</span><br></pre></td></tr></table></figure><p>2.<strong>backup to trace</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>）#在 mount 或 <span class="keyword">open</span> 模式生成一个 trace 文件，包含重建控制文件的语句  </span><br><span class="line"><span class="keyword">alter</span> database backup controlfile <span class="keyword">to</span> trace;</span><br><span class="line">#默认文件内容保存在 <span class="keyword">Default</span> Trace File 中 </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> v$diag_info;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>）#查看控制文件位置：<span class="keyword">show</span> <span class="keyword">parameter</span> control files;</span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> v$controlfile；</span><br><span class="line">#存到自己起的文件名里control.trc</span><br><span class="line"><span class="keyword">alter</span> database backup controlfile <span class="keyword">to</span> trace <span class="keyword">as</span> <span class="string">&#x27;/u01/app/oracle/oradata/PROD/control.trc&#x27;</span>;</span><br></pre></td></tr></table></figure><ol><li>恢复控制文件方法</li></ol><p>单个文件损毁，通过简单的在操作系统上复制解决</p><p>2.所有的控制文件丢失：<br>①如果有 binary 控制文件备份，利用备份恢复控制文件<br>②如果没有备份，利用 trace 脚本文件重新创建控制文件（代价：丢失归档记录信息和 RMAN 备份信息）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#Mount 或 <span class="keyword">open</span> 下生成 trace 脚本  可以cat more查看一下，后面恢复会执行这个control.trc</span><br><span class="line"><span class="keyword">alter</span> database backup controlfile <span class="keyword">to</span> trace <span class="keyword">as</span> <span class="string">&#x27;/u01/app/oracle/oradata/PROD/control.trc&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#正常关库，模拟全部控制文件丢失 启动数据库实例报错 </span><br><span class="line">    #shutdown immediate; </span><br><span class="line">    #rm control0[<span class="number">1</span><span class="number">-3</span>].ctl</span><br><span class="line">    #startup</span><br><span class="line">    </span><br><span class="line">#nomount 状态 执行重建控制文件语句</span><br><span class="line">#OS:more control.trc</span><br><span class="line">#<span class="keyword">SQL</span>:</span><br><span class="line">STARTUP NOMOUNT</span><br><span class="line"><span class="keyword">CREATE</span> CONTROLFILE REUSE DATABASE &quot;PROD&quot; NORESETLOGS NOARCHIVELOG</span><br><span class="line"> MAXLOGFILES <span class="number">16</span></span><br><span class="line"> MAXLOGMEMBERS <span class="number">3</span></span><br><span class="line"> MAXDATAFILES <span class="number">100</span></span><br><span class="line"> MAXINSTANCES <span class="number">8</span></span><br><span class="line"> MAXLOGHISTORY <span class="number">292</span></span><br><span class="line">LOGFILE</span><br><span class="line"> <span class="keyword">GROUP</span> <span class="number">1</span> <span class="string">&#x27;/u01/app/oracle/oradata/PROD/redo01.log&#x27;</span> SIZE <span class="number">50</span>M BLOCKSIZE <span class="number">512</span>,</span><br><span class="line"> <span class="keyword">GROUP</span> <span class="number">2</span> <span class="string">&#x27;/u01/app/oracle/oradata/PROD/redo02.log&#x27;</span> SIZE <span class="number">50</span>M BLOCKSIZE <span class="number">512</span>,</span><br><span class="line"> <span class="keyword">GROUP</span> <span class="number">3</span> <span class="string">&#x27;/u01/app/oracle/oradata/PROD/redo01.log&#x27;</span> SIZE <span class="number">50</span>M BLOCKSIZE <span class="number">512</span></span><br><span class="line"><span class="comment">-- STANDBY LOGFILE</span></span><br><span class="line">DATAFILE</span><br><span class="line"> <span class="string">&#x27;/u01/app/oracle/oradata/PROD/system01.dbf&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;/u01/app/oracle/oradata/PROD/sysaux01.dbf&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;/u01/app/oracle/oradata/PROD/undotbs01.dbf&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;/u01/app/oracle/oradata/PROD/users01.dbf&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;/u01/app/oracle/oradata/PROD/example01.dbf&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;/u01/app/oracle/oradata/PROD/tbs16k.dbf&#x27;</span></span><br><span class="line"><span class="type">CHARACTER</span> <span class="keyword">SET</span> AL32UTF8</span><br><span class="line">;</span><br><span class="line">#这时数据库已在 mount 下 </span><br><span class="line"></span><br><span class="line">#<span class="keyword">open</span> 打开数据库 </span><br><span class="line"><span class="keyword">ALTER</span> DATABASE <span class="keyword">OPEN</span>; </span><br><span class="line">#查看有无临时文件</span><br><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dba_temp files</span><br><span class="line"></span><br><span class="line">#添加临时数据文件信息 </span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span>SPACE TEMP <span class="keyword">ADD</span> TEMPFILE <span class="string">&#x27;/u01/app/oracle/oradata/PROD/temp01.dbf&#x27;</span> </span><br><span class="line"> SIZE <span class="number">30408704</span> REUSE AUTOEXTEND <span class="keyword">ON</span> NEXT <span class="number">655360</span> MAXSIZE <span class="number">32767</span>M;</span><br></pre></td></tr></table></figure><blockquote><p>—<strong>如果使用的是 noresetlogs，直接 open 数据库就可以了：</strong><br>SQL&gt;alter database open;</p><p>—<strong>如果使用的是 resetlogs 创建的控制文件，那么我们就需要使用：</strong><br>SQL&gt;alter database open resetlogs;<br>来打开 DB.</p><p>（3）<strong>添加 TEMP 表空间</strong><br>SQL&gt;ALTER TABLESPACE TEMP ADD TEMPFILE ‘&#x2F;oracle&#x2F;app&#x2F;oracle&#x2F;oradata&#x2F;PRODdb&#x2F;temp01.dbf’ size 100M;</p></blockquote><p><code>v$datafile</code>视图显示的是数据文件（data files），而临时文件（temp files）通常是在<code>v$tempfile</code>视图中查看的。<br>显示TEMP表空间中所有的临时文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> file_name, tablespace_name, bytes</span><br><span class="line"><span class="keyword">FROM</span> dba_temp_files;</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明：这个重建控制文件的过程主要有两大部分内容：</strong><br><strong>第一部分是脚本中的可见信息：</strong><br><strong>1</strong>）定义 <strong>db_name,</strong><br><strong>2</strong>）指定几个参数限定控制文件的最大值，<br><strong>3</strong>）在线日志的物理信息，<br><strong>4</strong>）数据文件的物理信息，<br><strong>5</strong>）使用的字符集。<br><strong>第二部分是隐含的不可见信息，比如</strong> <strong>SCN</strong>信息，重建复制了当前所有数据文件头部的最新 <strong>SCN</strong><br><strong>信息复制到了控制文件中。以便接下来打开数据库。</strong><br>SQL&gt; select file#,checkpoint_change# from v$datafile;<br>SQL&gt; select file#,checkpoint_change# from v$datafile_header; </p></blockquote><h4 id="什么时候用-RESETLOGS-和-NORESETLOGS-几种情况的说明"><a href="#什么时候用-RESETLOGS-和-NORESETLOGS-几种情况的说明" class="headerlink" title="什么时候用 RESETLOGS 和 NORESETLOGS 几种情况的说明"></a>什么时候用 RESETLOGS 和 NORESETLOGS 几种情况的说明</h4><ul><li><strong>RESETLOGS</strong>：用于不完全恢复、丢失REDOLOG文件或使用备份控制文件的情况。</li><li><strong>NORESETLOGS</strong>：用于完全恢复且控制文件和所有日志文件完好无损的情况。</li></ul><h3 id="1-3-归档文件"><a href="#1-3-归档文件" class="headerlink" title="1.3 归档文件"></a>1.3 归档文件</h3><h4 id="1-3-1-开归档"><a href="#1-3-1-开归档" class="headerlink" title="1.3.1 开归档"></a>1.3.1 开归档</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /archivelog</span><br><span class="line"> ls -ld /archivelog</span><br><span class="line"> alter system set log_archive_dest_1=&#x27;location=/archivelog&#x27;;</span><br><span class="line"> show parameter log_archive_dest_1</span><br><span class="line"> #静态参数，scope=spfile,重启后生效</span><br><span class="line"> alter system set log_archive_format=&#x27;arch_PROD_%t_%s_%r.dbf&#x27; scope=spfile;</span><br><span class="line"> shutdown immediate;</span><br><span class="line"> startup mount;</span><br><span class="line"> archive log list</span><br><span class="line"> alter database archivelog;</span><br><span class="line"> alter database open;</span><br><span class="line"> archive log list;</span><br></pre></td></tr></table></figure><h4 id="实战二：创建Catalog恢复目录"><a href="#实战二：创建Catalog恢复目录" class="headerlink" title="实战二：创建Catalog恢复目录"></a>实战二：创建Catalog恢复目录</h4><p>Catalog用于存储RMAN备份信息，并提供更高级的备份和恢复管理功能。确保定期备份恢复目录数据库以避免数据丢失。</p><h4 id="方法1：在本地数据库上创建Recovery-Catalog"><a href="#方法1：在本地数据库上创建Recovery-Catalog" class="headerlink" title="方法1：在本地数据库上创建Recovery Catalog"></a>方法1：在本地数据库上创建Recovery Catalog</h4><h5 id="1-1-启动监听器"><a href="#1-1-启动监听器" class="headerlink" title="1.1 启动监听器"></a>1.1 启动监听器</h5><p>首先确保监听器已经启动并且运行正常：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">有效的配置lsnrctl start</span><br><span class="line">lsnrctl status</span><br></pre></td></tr></table></figure><h5 id="1-2-配置tnsnames-ora"><a href="#1-2-配置tnsnames-ora" class="headerlink" title="1.2 配置tnsnames.ora"></a>1.2 配置<code>tnsnames.ora</code></h5><p>确保能够连接到目标数据库和恢复目录数据库。在<code>$ORACLE_HOME/network/admin</code>目录下配置<code>tnsnames.ora</code>文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$ORACLE_HOME</span>/network/admin</span><br><span class="line">vi tnsnames.ora</span><br></pre></td></tr></table></figure><p>添加如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">EMREP =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS_LIST =</span><br><span class="line">      (ADDRESS = (PROTOCOL = TCP)(HOST = your_host)(PORT = 1521))</span><br><span class="line">    )</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVICE_NAME = emrep)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">ORCL =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS_LIST =</span><br><span class="line">      (ADDRESS = (PROTOCOL = TCP)(HOST = your_host)(PORT = 1521))</span><br><span class="line">    )</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVICE_NAME = orcl)</span><br><span class="line">    )</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><h5 id="1-3-创建表空间和用户"><a href="#1-3-创建表空间和用户" class="headerlink" title="1.3 创建表空间和用户"></a>1.3 创建表空间和用户</h5><p>连接到恢复目录数据库并创建表空间和用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlplus sys/oracle@emrep as sysdba</span><br></pre></td></tr></table></figure><p>执行以下SQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span>SPACE rmantbs </span><br><span class="line">DATAFILE <span class="string">&#x27;/oradata/orcl/rmantbs.dbf&#x27;</span> </span><br><span class="line">SIZE <span class="number">50</span>M </span><br><span class="line">AUTOEXTEND <span class="keyword">ON</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> rman IDENTIFIED <span class="keyword">BY</span> rman </span><br><span class="line"><span class="keyword">DEFAULT</span> TABLESPACE rmantbs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CONNECT</span>, RESOURCE, RECOVERY_CATALOG_OWNER <span class="keyword">TO</span> rman;</span><br></pre></td></tr></table></figure><h5 id="1-4-创建Catalog"><a href="#1-4-创建Catalog" class="headerlink" title="1.4 创建Catalog"></a>1.4 创建Catalog</h5><p>使用RMAN连接到恢复目录数据库并创建Catalog：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rman catalog rman/rman@emrep</span><br><span class="line"></span><br><span class="line">RMAN&gt; CREATE CATALOG;</span><br></pre></td></tr></table></figure><p>验证Catalog创建成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sqlplus rman/rman@emrep</span><br><span class="line"></span><br><span class="line">SELECT table_name, tablespace_name FROM user_tables;</span><br></pre></td></tr></table></figure><h5 id="1-5-注册目标数据库"><a href="#1-5-注册目标数据库" class="headerlink" title="1.5 注册目标数据库"></a>1.5 注册目标数据库</h5><p>使用RMAN连接到目标数据库并注册到恢复目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rman target / catalog rman/rman@emrep</span><br><span class="line"></span><br><span class="line">RMAN&gt; REGISTER DATABASE;</span><br></pre></td></tr></table></figure><p>验证目标数据库是否已注册：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sqlplus rman/rman@emrep</span><br><span class="line"></span><br><span class="line">SELECT * FROM rc_database;</span><br></pre></td></tr></table></figure><h4 id="方法2：在远程数据库上创建Recovery-Catalog"><a href="#方法2：在远程数据库上创建Recovery-Catalog" class="headerlink" title="方法2：在远程数据库上创建Recovery Catalog"></a>方法2：在远程数据库上创建Recovery Catalog</h4><p> 单独的恢复目录，能有效提高安全性。  </p><h5 id="2-1-创建一个单独的数据库（prod）"><a href="#2-1-创建一个单独的数据库（prod）" class="headerlink" title="2.1 创建一个单独的数据库（prod）"></a>2.1 创建一个单独的数据库（prod）</h5><p>假设您已经在<code>prod</code>库中创建了恢复目录数据库。我们要对<code>orcl</code>库进行备份，即<code>orcl</code>是目标数据库，<code>prod</code>是恢复目录数据库。</p><h5 id="2-2-在prod库中创建表空间"><a href="#2-2-在prod库中创建表空间" class="headerlink" title="2.2 在prod库中创建表空间"></a>2.2 在<code>prod</code>库中创建表空间</h5><p>连接到<code>prod</code>数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlplus sys/oracle@prod as sysdba</span><br></pre></td></tr></table></figure><p>创建表空间：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span>SPACE rc_data </span><br><span class="line">DATAFILE <span class="string">&#x27;/u01/app/oracle/oradata/prod/rc_data01.dbf&#x27;</span> </span><br><span class="line">SIZE <span class="number">100</span>M </span><br><span class="line">AUTOEXTEND <span class="keyword">ON</span> </span><br><span class="line">NEXT <span class="number">10</span>M </span><br><span class="line">MAXSIZE UNLIMITED;</span><br></pre></td></tr></table></figure><h5 id="2-3-创建用户并授予权限"><a href="#2-3-创建用户并授予权限" class="headerlink" title="2.3 创建用户并授予权限"></a>2.3 创建用户并授予权限</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> rc_admin IDENTIFIED <span class="keyword">BY</span> rc_admin </span><br><span class="line"><span class="keyword">DEFAULT</span> TABLESPACE rc_data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CONNECT</span>, RESOURCE, RECOVERY_CATALOG_OWNER <span class="keyword">TO</span> rc_admin;</span><br></pre></td></tr></table></figure><h5 id="2-4-在RMAN中创建Catalog"><a href="#2-4-在RMAN中创建Catalog" class="headerlink" title="2.4 在RMAN中创建Catalog"></a>2.4 在RMAN中创建Catalog</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rman catalog rc_admin/rc_admin@prod</span><br><span class="line"></span><br><span class="line">RMAN&gt; CREATE CATALOG TABLESPACE rc_data;</span><br></pre></td></tr></table></figure><h5 id="2-5-注册目标数据库"><a href="#2-5-注册目标数据库" class="headerlink" title="2.5 注册目标数据库"></a>2.5 注册目标数据库</h5><p>连接并注册目标数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rman target sys/oracle@orcl catalog rc_admin/rc_admin@prod</span><br><span class="line"></span><br><span class="line">RMAN&gt; REGISTER DATABASE;</span><br><span class="line">-- 手动同步Catalog</span><br><span class="line">RMAN&gt; RESYNC CATALOG;</span><br></pre></td></tr></table></figure><h5 id="2-6-取消Catalog"><a href="#2-6-取消Catalog" class="headerlink" title="2.6 取消Catalog"></a>2.6 取消Catalog</h5><p>如果需要取消注册，可以执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rman target sys/oracle@orcl catalog rc_admin/rc_admin@prod</span><br><span class="line"></span><br><span class="line">RMAN&gt; UNREGISTER DATABASE;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何查询Oracle数据库一周内每天的SQL执行次数</title>
      <link href="/2024/07/18/%E5%A6%82%E4%BD%95%E6%9F%A5%E8%AF%A2Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%80%E5%91%A8%E5%86%85%E6%AF%8F%E5%A4%A9%E7%9A%84SQL%E6%89%A7%E8%A1%8C%E6%AC%A1%E6%95%B0/"/>
      <url>/2024/07/18/%E5%A6%82%E4%BD%95%E6%9F%A5%E8%AF%A2Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%80%E5%91%A8%E5%86%85%E6%AF%8F%E5%A4%A9%E7%9A%84SQL%E6%89%A7%E8%A1%8C%E6%AC%A1%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、问题："><a href="#一、问题：" class="headerlink" title="一、问题："></a>一、问题：</h2><p> 今天引入的问题是：oracle数据库怎么查询一周内，每天的查询次数？  </p><p>正好这周在学数据库的调优工作，我记得数据库的AWR报告会记录SQL的执行情况，可以从DBA_HIST_SNAPSHOT里面找出7天的快照ID，在DBA_HIST_SQLSTAT收集一下。<br>先来了解一下这两个相关视图</p><h2 id="二、相关视图："><a href="#二、相关视图：" class="headerlink" title="二、相关视图："></a>二、相关视图：</h2><p>dba_hist_sqlstat 和dba_hist_snapshot视图是 Oracle AWR（Automatic Workload Repository）的一部分。其中，  </p><h3 id="1、DBA-HIST-SQLSTAT"><a href="#1、DBA-HIST-SQLSTAT" class="headerlink" title="1、DBA_HIST_SQLSTAT"></a>1、DBA_HIST_SQLSTAT</h3><p>dba_hist_sqlstat是Oracle数据库中的历史SQL统计信息视图，用于提供有关SQL语句执行的历史性能信息。它记录了SQL语句的执行计划、执行时间、消耗的资源等统计数据。dba_hist_sqlstat可以用于监控和分析数据库中的SQL性能问题。<br><strong>常用字段：</strong><br>SQL_ID：SQL语句的唯一标识符。<br>SNAP_ID：快照ID，表示采样的时间点。<br>DBID：数据库ID。<br>INSTANCE_NUMBER：实例编号。<br>PLAN_HASH_VALUE：SQL执行计划的哈希值。</p><h3 id="2、DBA-HIST-SNAPSHOT"><a href="#2、DBA-HIST-SNAPSHOT" class="headerlink" title="2、DBA_HIST_SNAPSHOT"></a>2、DBA_HIST_SNAPSHOT</h3><p>dba_hist_snapshot是Oracle数据库中的动态视图，用于提供有关历史性能快照的信息。它记录了数据库在不同时间点的性能指标和统计数据。dba_hist_snapshot可以用于分析数据库的性能变化和趋势，帮助管理员进行性能监控和故障排查。<br><strong>常用字段：</strong><br>SNAP_ID：快照的唯一标识符。<br>BEGIN_INTERVAL_TIME：快照的开始时间。<br>END_INTERVAL_TIME：快照的结束时间。<br>DBID：数据库的唯一标识符。<br>INSTANCE_NUMBER：实例的编号。</p><h3 id="3、v-SQLTEXT"><a href="#3、v-SQLTEXT" class="headerlink" title="3、v$SQLTEXT"></a>3、v$SQLTEXT</h3><p>用于提供有关共享SQL区域中SQL语句文本的信息。它记录了数据库中执行过的SQL语句的文本。vsqltext可以用于查看和分析数据库中执行过的SQL语句的具体文本内容。<br><strong>常用字段：</strong><br>SQL_ID：SQL语句的唯一标识符。<br>SQL_TEXT：SQL语句的文本。</p><h3 id="4、v-SQL⭐"><a href="#4、v-SQL⭐" class="headerlink" title="4、v$SQL⭐"></a>4、v$SQL⭐</h3><p>用于提供有关SQL语句执行的统计信息和执行计划<br>SQL_TEXT：SQL语句的文本，最多1000个字符。<br>SQL_FULLTEXT：SQL语句的完整文本，以CLOB（Character Large Object）形式存储。SQL_ID：SQL语句的唯一标识符，最多13个字符。<br>SHARABLE_MEM：共享内存的大小，以字节为单位。<br>PERSISTENT_MEM：持久内存的大小，以字节为单位。<br>RUNTIME_MEM：运行时内存的大小，以字节为单位。<br>SORTS：排序操作的次数。<br><strong>EXECUTIONS：SQL语句的执行次数。</strong><br>PARSE_CALLS：解析调用的次数。<br>DISK_READS：磁盘读取的次数。<br>DIRECT_WRITES：直接写入的次数。<br>DIRECT_READS：直接读取的次数。<br>BUFFER_GETS：缓冲区获取的次数。<br>APPLICATION_WAIT_TIME：应用程序等待的时间。<br>CONCURRENCY_WAIT_TIME：并发等待的时间。<br>CLUSTER_WAIT_TIME：集群等待的时间。<br>USER_IO_WAIT_TIME：用户I&#x2F;O等待的时间。<br>PLSQL_EXEC_TIME：PL&#x2F;SQL执行的时间。<br>JAVA_EXEC_TIME：Java执行的时间。<br>ROWS_PROCESSED：处理的行数。<br>COMMAND_TYPE：命令类型的编号。<br>OPTIMIZER_MODE：优化器模式。<br>OPTIMIZER_COST：优化器成本。<br>OPTIMIZER_ENV：优化器环境。</p><h2 id="三、SQL语句"><a href="#三、SQL语句" class="headerlink" title="三、SQL语句"></a>三、SQL语句</h2><p>将这两个视图通过快照 id join一下得到SQL，记录了系统七天内Oracle数据库的SQL执行次数</p><h3 id="1、七天内Oracle数据库的SQL执行次数"><a href="#1、七天内Oracle数据库的SQL执行次数" class="headerlink" title="1、七天内Oracle数据库的SQL执行次数"></a>1、七天内Oracle数据库的SQL执行次数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    SUM(ss.executions_delta) AS total_executions</span><br><span class="line">FROM</span><br><span class="line">    DBA_HIST_SQLSTAT ss</span><br><span class="line">JOIN</span><br><span class="line">    DBA_HIST_SNAPSHOT sn ON ss.snap_id = sn.snap_id</span><br><span class="line">WHERE</span><br><span class="line">    sn.begin_interval_time BETWEEN SYSDATE - 7 AND SYSDATE;</span><br><span class="line"></span><br><span class="line">--结果</span><br><span class="line">TOTAL_EXECUTIONS</span><br><span class="line">----------------</span><br><span class="line">  122282</span><br></pre></td></tr></table></figure><p>注意：<br><strong>1、AWR收集</strong>：该查询依赖于AWR数据，因此AWR必须启用，需要确保系统快照的保留策略为7天以上。详情请<strong>看扩展1</strong>，平时如何管理AWR报告的收集时间，默认是1小时收集一次，保留策略怎么设置。<br><strong>2、 executions_delta</strong>参数指的是该查询计算的过去7天内所有 SQL 语句的<strong>总执行次数变化</strong>。⭐<br>Oracle给出的定义是：自将此对象引入库缓存以来，对该对象执行的增量执行次数<br>参考文档：<a href="https://docs.oracle.com/en/database/oracle/oracle-database/19/refrn/DBA_HIST_SQLSTAT.html">https://docs.oracle.com/en/database/oracle/oracle-database/19/refrn/DBA_HIST_SQLSTAT.html</a></p><h3 id="2、优化：按天分组按次数降序排列"><a href="#2、优化：按天分组按次数降序排列" class="headerlink" title="2、优化：按天分组按次数降序排列"></a>2、优化：按天分组按次数降序排列</h3><p> 现在想要了解在特定时间范围内 SQL 语句的执行频率。  所以更改一下SQL查询每天的SQL执行次数，通过TRUN 截断日期时间值 ，<strong>按日期分组并按照每天总执行次数降序排序</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">SELECT TRUNC(sn.begin_interval_time) AS query_date,</span><br><span class="line">       SUM(ss.executions_delta) AS total_executions</span><br><span class="line">  FROM DBA_HIST_SQLSTAT ss</span><br><span class="line">  JOIN DBA_HIST_SNAPSHOT sn</span><br><span class="line">    ON ss.snap_id = sn.snap_id</span><br><span class="line"> WHERE sn.begin_interval_time BETWEEN SYSDATE - 7 AND SYSDATE</span><br><span class="line"> GROUP BY TRUNC(sn.begin_interval_time)</span><br><span class="line"> ORDER BY total_executions desc;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> QUERY_DATE   TOTAL_EXECUTIONS</span><br><span class="line">------------------ ----------------</span><br><span class="line">16-JUL-24      59989</span><br><span class="line">18-JUL-24      21884</span><br><span class="line">17-JUL-24      21523</span><br><span class="line">12-JUL-24      12903</span><br><span class="line">15-JUL-24      10264</span><br></pre></td></tr></table></figure><p>在项目上大神开发的可视化界面首页应该就是用的这条SQL，可以很明显看出哪一天的SQL执行量，如果有异常，再去分析问题。<br>如果某一条SQL执行异常，需要做分析，怎么找出这条SQL文本。</p><h3 id="3、根据sql-id查询SQL语句"><a href="#3、根据sql-id查询SQL语句" class="headerlink" title="3、根据sql_id查询SQL语句"></a>3、根据sql_id查询SQL语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT SQL_TEXT FROM v$sqltext WHERE SQL_ID = &#x27;cmhz88h821m04&#x27;;</span><br></pre></td></tr></table></figure><p>有时SQL文本过长v$sqltext中SQL_TEXT字段最多1000个字符，可能放不下，我们可以看v$sql中的SQL_FULLTEXT字段保留了SQL语句的完整文本，以CLOB形式存储。</p><h3 id="4、根据sql-id查询完整的SQL"><a href="#4、根据sql-id查询完整的SQL" class="headerlink" title="4、根据sql_id查询完整的SQL"></a>4、根据sql_id查询完整的SQL</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT SQL_FULLTEXT FROM v$sql WHERE SQL_ID = &#x27;cmhz88h821m04&#x27;;</span><br></pre></td></tr></table></figure><p>拿到SQL之后可以看看<strong>sql的执行计划</strong>分析问题</p><h3 id="5、根据sql-id查看执行计划"><a href="#5、根据sql-id查看执行计划" class="headerlink" title="5、根据sql_id查看执行计划"></a>5、根据sql_id查看执行计划</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from table(dbms_xplan.display_cursor(&#x27;cmhz88h821m04&#x27;,0,&#x27;ALLSTATS LAST&#x27;));</span><br></pre></td></tr></table></figure><p><strong>扩展2</strong>，查看执行计划的方法<br><strong>可以先从v$sql中查出sql_id，再通过dbms_xplan_display_cursor( sql_id,child_number,format)查指定的sql执行计划</strong><br><strong>sql_id：</strong>指定位于库缓存执行计划中 SQL 语句的父游标。默认值为 null，表示最后一条语句的执行计划，可以换成想要查看SQL的sql_id。通过查询V$SQL 或V$SQLAREA的SQL_ID列来获得SQL语句的SQL_ID。<br><strong>child_number：</strong>指定父游标下子游标的序号，默认值为 0，不返回子游标的执行计划，null则全部返回。<br><strong>format：</strong>控制 SQL 语句执行计划的输出部分。常用的有：BASIC: 显示最少的信息、TYPICAL: 默认值。SERIAL、ALL: 显示最多的信息、<strong>IOSTATS、MEMSTATS、ALLSTATS等。</strong></p><h3 id="6、查询指定SQL语句的历史执行计划"><a href="#6、查询指定SQL语句的历史执行计划" class="headerlink" title="6、查询指定SQL语句的历史执行计划"></a>6、查询指定SQL语句的历史执行计划</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT SQL_ID, PLAN_HASH_VALUE, OPERATION, OPTIONS, OBJECT_NAME, OBJECT_TYPE, COST, CARDINALITY, BYTES, PARTITION_START, PARTITION_STOP FROM dba_hist_sql_plan WHERE SQL_ID = &#x27;cmhz88h821m04&#x27;;</span><br></pre></td></tr></table></figure><p>这里可以再做一个<strong>扩展3</strong>，快照的管理，手工创建快照。再找出SQL之后，我们还可能会用到AWR和ADDM等工具帮助我们去分析问题，AWR报告默认是一个小时收集一次快照，我们可以在想要分析的SQL语句执行前后手工创建或者建一个基线，方面分析报告。</p><p>工作中往往会遇到紧急案例CPU、IO、内存飙升、甚至宕机，下一篇我可能会写关于紧急案例-CPU飙升如何快速定位到SQL语句，数据库hang住，杀会话等问题的处理。<br>下面扩展2应该是重点部分，之前在天津实习的时候在那用不到，只学到了备份恢复那一块，来河北刚进组就听什么慢SQL处理，性能优化，压力很大啊。后面可能会开一个优化专题，关注博主，哈哈！</p><h2 id="扩展1：AWR性能报告收集的管理"><a href="#扩展1：AWR性能报告收集的管理" class="headerlink" title="扩展1：AWR性能报告收集的管理"></a>扩展1：AWR性能报告收集的管理</h2><h4 id="查看AWR的收集时间和保留时间"><a href="#查看AWR的收集时间和保留时间" class="headerlink" title="查看AWR的收集时间和保留时间"></a>查看AWR的收集时间和保留时间</h4><p>  可以通过dba_hist_wr_control视图进行AWR的设置控制，包括快照间隔、保留时间和TOPNSQL设置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">select * from dba_hist_wr_control;</span><br><span class="line"></span><br><span class="line">      DBID SNAP_INTERVAL</span><br><span class="line">---------- ---------------------------------------------------------------------------</span><br><span class="line">RETENTION    TOPNSQL</span><br><span class="line">--------------------------------------------------------------------------- ----------</span><br><span class="line">1696225019 +00000 01:00:00.0</span><br><span class="line">+00008 00:00:00.0    DEFAULT</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>DBID：</strong>数据库实例的唯一标识<br><strong>SNAP_INTERVAL：</strong>快照间隔，每一小时收集一次快照。格式天，时分秒，<br><strong>RETENTION：</strong>快照保留时间，这里为8天，所以可以完全可以收集七天内的信息。格式，天，时分秒<br><strong>TOPNSQL：</strong>在每个AWR快照期间收集的SQL语句数量</p><h4 id="修改AWR收集时间和保留策略"><a href="#修改AWR收集时间和保留策略" class="headerlink" title="修改AWR收集时间和保留策略"></a>修改AWR收集时间和保留策略</h4><p>awr 默认通过 mmon 及 mmnl 进程来<strong>每小自动收集一次</strong>，为了节省空间，采集的数据在在保留一定时间后自动清除。上面看到的是11g Oracle默认保留8天，10g为7天。<br>可以用PL&#x2F;SQL中的dbms_workload_repository.modify_snapshot_settings设置<br><strong>案例：设置AWR的收集时间为60min，保留时间为30day。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">SYS@orcl&gt; </span><br><span class="line">begin</span><br><span class="line">  dbms_workload_repository.modify_snapshot_settings(interval =&gt; 60,</span><br><span class="line">                                                    retention =&gt; 30*24*60);</span><br><span class="line">  end;</span><br><span class="line">/</span><br><span class="line"></span><br><span class="line">PL/SQL procedure successfully completed.</span><br><span class="line"></span><br><span class="line">SYS@orcl&gt; </span><br><span class="line">SYS@orcl&gt; select * from dba_hist_wr_control;</span><br><span class="line"></span><br><span class="line">      DBID SNAP_INTERVAL</span><br><span class="line">---------- ---------------------------------------------------------------------------</span><br><span class="line">RETENTION    TOPNSQL</span><br><span class="line">--------------------------------------------------------------------------- ----------</span><br><span class="line">1696225019 +00000 01:00:00.0</span><br><span class="line">+00030 00:00:00.0</span><br></pre></td></tr></table></figure><h2 id="扩展2：查看执行计划的方法"><a href="#扩展2：查看执行计划的方法" class="headerlink" title="扩展2：查看执行计划的方法"></a>扩展2：查看执行计划的方法</h2><p><strong>SQLPLUS AUTOTRACE</strong> –计划执行不真实<br>**Explain Plan For SQL     **–计划执行不真实<br><strong>使用 DBMS_XPLAN 包</strong>–计划执行真实⭐<br>**statistics_level&#x3D;all;**–计划执行真实<br>**sql_trace 与 10046**–计划执行真实⭐</p><h2 id="扩展3：快照的管理"><a href="#扩展3：快照的管理" class="headerlink" title="扩展3：快照的管理"></a>扩展3：快照的管理</h2><h3 id="1、场景："><a href="#1、场景：" class="headerlink" title="1、场景："></a>1、场景：</h3><p>Ⅰ、<strong>我不想要一个小时的，只想要看目标语句、性能测试、压力测试那一段的报告。</strong><br>Ⅱ、数据库出现过异常，无法生成AWR，检查能否创建快照。</p><h3 id="2、手工创建快照："><a href="#2、手工创建快照：" class="headerlink" title="2、手工创建快照："></a>2、手工创建快照：</h3><p>用 create_snapshot 存储过程手动创建快照：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">begin</span><br><span class="line">  dbms_workload_repository.create_snapshot();</span><br><span class="line">   end;</span><br><span class="line">/</span><br></pre></td></tr></table></figure><h3 id="3、查看快照信息"><a href="#3、查看快照信息" class="headerlink" title="3、查看快照信息"></a>3、查看快照信息</h3><p><strong>select * from dba_hist_snapshot;</strong></p><h3 id="4、手工删除快照"><a href="#4、手工删除快照" class="headerlink" title="4、手工删除快照"></a>4、手工删除快照</h3><p><strong>指定要删除的快照id范围</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">begin</span><br><span class="line">  dbms_workload_repository.drop_snapshot_range(low_snap_id =&gt; 30,high_snap_id =&gt; 31);</span><br><span class="line">  end;</span><br><span class="line">/</span><br></pre></td></tr></table></figure><p>如果有删不掉的快照，可能是创建了基线，需要先把极限删除，再删除快照。</p><h3 id="5、查看基线的视图"><a href="#5、查看基线的视图" class="headerlink" title="5、查看基线的视图"></a>5、查看基线的视图</h3><p><strong>select * from dba_hist_baseline;</strong></p><h3 id="6、删除基线及其快照"><a href="#6、删除基线及其快照" class="headerlink" title="6、删除基线及其快照"></a>6、删除基线及其快照</h3><p>也可以在删除基线的时候连快照一起删掉：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">begin</span><br><span class="line">  dbms_workload_repository.drop_baseline(baseline_name =&gt; &#x27;xxx&#x27;,</span><br><span class="line">                                        cascade =&gt; true);</span><br><span class="line">  end;</span><br><span class="line">/</span><br></pre></td></tr></table></figure><p><strong>cascade 默认false不删除快照，true删除快照。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟DML、DDL与undo的关系</title>
      <link href="/2024/07/10/%E6%A8%A1%E6%8B%9FDML%E3%80%81DDL%E4%B8%8Eundo%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
      <url>/2024/07/10/%E6%A8%A1%E6%8B%9FDML%E3%80%81DDL%E4%B8%8Eundo%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<p>已经有两个月没有更新博客了，主要实在忙毕设和毕业的一些事情！<br>这两个月也是非常的精彩呀，充分体会到了职场的和校园的不同，作为一名刚毕业就满 1 年工作经验的牛马人，在两个月期间经历了两次调岗、两次降薪，如果再来个裁员那就更精彩了！！哈哈</p><p>废话不多说，上菜</p><p>今天主要来研究DDL、DML与undo的关系？<br>前两天部门有同事问：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/32462703/1720595533215-662c2ecb-def5-4974-a590-466cc3dc5f7d.png#averageHue=%23e4e6e9&clientId=u3ca6f77c-132a-4&from=paste&height=78&id=uddd73599&originHeight=86&originWidth=344&originalType=binary&ratio=1.100000023841858&rotation=0&showTitle=false&size=3819&status=done&style=none&taskId=u4df73319-55fe-4695-bd0e-d71fe4b161f&title=&width=312.72726594909176" alt="image.png"><br>大概意思就是：在执行插入语句时能否理解为它占用的undo表空间和该表所占数据文件的大小一致，<br>我是这么回答的：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/32462703/1720595927324-b4758f88-901e-4353-b4a3-b6ab2bbfa873.png#averageHue=%23c2e2fc&clientId=u3ca6f77c-132a-4&from=paste&height=194&id=u718d0e35&originHeight=213&originWidth=509&originalType=binary&ratio=1.100000023841858&rotation=0&showTitle=false&size=18641&status=done&style=none&taskId=u3f25a774-cd17-4470-963f-b334e627680&title=&width=462.7272626979294" alt="image.png"><br>小小获得了部门主管的称赞！</p><p>​在数据库事务四大特性中有一个是<strong>原子性</strong>，具体来说就是 <strong>原子性是指对数据库的一系列操作，要么全部成功，要么全部失败，不可能出现部分成功的情况</strong>。实际上，<strong>原子性</strong>底层就是通过<code>undo log</code>实现的。<code>undo log</code>主要记录了数据的逻辑变化，比如一条<code>INSERT</code>语句，对应一条<code>DELETE</code>的<code>undo log</code>，对于每个<code>UPDATE</code>语句，对应一条相反的<code>UPDATE</code>的<code>undo log</code>，这样在发生错误时，就能回滚到事务之前的数据状态。同时，<code>undo log</code>也是<code>MVCC</code>(多版本并发控制)实现的关键。<br>​<strong>undo空间主要用于存储事务未提交之前的数据快照，方便回滚事务。</strong>理论上在undo里面只需要记录关键信息（最少信息）确保能够回滚到事务之前的数据就可以。所以<br>**对于insert语句，undo只需要记录插入行的 ROWID，就可以完成回滚；<br>delete语句需要在 Undo 中记录被删除行所有列的前镜像和其 ROWID；<br>update语句需要在 Undo 中记录被更新列的前镜像和被更新行 ROWID； **</p><p><code>究竟为什么呢？对不对呢？</code></p><blockquote><p>今天就来研究下为什么undo(insert) &lt; undo(update) &lt; undo(delete) &lt; 数据文件中记录的表大小 </p></blockquote><h2 id="一、用到的SQL"><a href="#一、用到的SQL" class="headerlink" title="一、用到的SQL"></a>一、用到的SQL</h2><p><strong>1、查询当前会话中undo的大小</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> vs.name, ms.value</span><br><span class="line">  <span class="keyword">from</span> v$mystat ms, v$sysstat vs</span><br><span class="line"> <span class="keyword">where</span> ms.statistic# <span class="operator">=</span> vs.statistic#</span><br><span class="line">   <span class="keyword">and</span> name <span class="operator">=</span> <span class="string">&#x27;undo change vector size&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>ps：后面经常会用到这条SQL，不一一写出了，查看undo大小用这个SQL。表时当前会话产生undo的大小。重进会话可以刷新。</strong><br><strong>2、启用SQL跟踪的SQL，用10046 事件查看跟踪SQL执行情况， 设置level 1只查看基本的 SQL 跟踪，包括 SQL 语句的执行情况。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">oradebug setmypid; </span><br><span class="line">oradebug event <span class="number">10046</span> trace name context forever,level <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="二、DML语句占undo表空间的大小"><a href="#二、DML语句占undo表空间的大小" class="headerlink" title="二、DML语句占undo表空间的大小"></a>二、DML语句占undo表空间的大小</h2><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>先说结论：<br>一般情况下undo(insert) &lt; undo(update) &lt; undo(delete) &lt; 数据文件中记录的表大小   </p><p>数据操纵语言 Data Manipulation Language<br>DML：SELECT,UPDATE,INSERT,DELETE</p><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><h4 id="1、环境准备："><a href="#1、环境准备：" class="headerlink" title="1、环境准备："></a>1、环境准备：</h4><p><strong>sqlplus 进入实验环境，查看undo大小为0</strong><br>NAME      VALUE</p><hr><p>undo change vector size   0</p><p><strong>建表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> pandatbtb (id <span class="type">int</span>,name varchar2(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><p><strong>查undo：</strong><br>NAME      VALUE</p><hr><p>undo change vector size        2628</p><p>细心的人会发现了，create是DDL语句啊，直接提交不会回滚，为什么会产生undo呢？别急下个实验我们再看。</p><p><strong>现在我们需要刷新当前会话的undo：</strong><br><code>v$mystat </code>和 <code>v$sysstat </code>是 Oracle 数据库中的动态性能视图，分别存储当前会话的统计信息和系统级别的统计信息。  所以退出去，重登录可以刷新会话即刷新当前会话undo，查看undo大小为0就对了。</p><p>NAME VALUE</p><hr><p>undo change vector size0</p><p>环境准备好了，我们来实验INSERT,DMLUPDATE,DELETE三条语句所占undo的大小吧：</p><h4 id="2、insert语句占用undo的大小："><a href="#2、insert语句占用undo的大小：" class="headerlink" title="2、insert语句占用undo的大小："></a>2、insert语句占用undo的大小：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> pandatb <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;panda01&#x27;</span>);</span><br></pre></td></tr></table></figure><p>查看undo大小：<br>NAME      VALUE</p><hr><p><strong>undo change vector size 112</strong></p><p>退出重进，或者看增量。</p><h4 id="3、update语句占用undo的大小："><a href="#3、update语句占用undo的大小：" class="headerlink" title="3、update语句占用undo的大小："></a>3、update语句占用undo的大小：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> pandatb <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;panda02&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>查看undo大小：<br>NAME      VALUE</p><hr><p>undo change vector size 168</p><h4 id="4、delete语句占用undo的大小："><a href="#4、delete语句占用undo的大小：" class="headerlink" title="4、delete语句占用undo的大小："></a>4、delete语句占用undo的大小：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> panda02 <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>查看undo大小：<br>NAME      VALUE</p><hr><p>undo change vector size 260</p><blockquote><p>由此可见，一般情况下，undo(insert) &lt; undo(update) &lt; undo(delete)<br>但是由于实验数据过小，不具有普遍性，仅供参考，这不是绝对，在某种情况有可能会发生顺序颠倒的时候。</p></blockquote><h4 id="5、数据文件中记录的表大小"><a href="#5、数据文件中记录的表大小" class="headerlink" title="5、数据文件中记录的表大小"></a>5、数据文件中记录的表大小</h4><p>analyze简单收集一下表的统计信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SYS<span class="variable">@orcl</span><span class="operator">&gt;</span> analyze <span class="keyword">table</span> PANDATB compute statistics <span class="keyword">for</span> <span class="keyword">table</span>;</span><br><span class="line"><span class="keyword">Table</span> analyzed.</span><br><span class="line">SYS<span class="variable">@orcl</span><span class="operator">&gt;</span> <span class="keyword">select</span> table_name, blocks, empty_blocks, num_rows</span><br><span class="line"><span class="keyword">from</span> dba_tables</span><br><span class="line"><span class="keyword">where</span> table_name <span class="operator">=</span> <span class="string">&#x27;PANDATB&#x27;</span>;</span><br></pre></td></tr></table></figure><p>TABLE_NAMEBLOCKS EMPTY_BLOCKS NUM_ROWS</p><hr><p>PANDATB 1     61<br><strong>可以看到现在还有一行数据，用到一个8k的块，还有6个空的块。</strong></p><h4 id="扩展1：如何不产生-UNDO-或少量的-UNDO-呢？"><a href="#扩展1：如何不产生-UNDO-或少量的-UNDO-呢？" class="headerlink" title="扩展1：如何不产生 UNDO 或少量的 UNDO 呢？"></a>扩展1：如何不产生 UNDO 或少量的 UNDO 呢？</h4><p>在 Oracle 数据库中，DML（数据操作语言）语句通常会生成 undo 数据，以确保事务的原子性、一致性、隔离性和持久性（ACID）。然而，在某些情况下，我们可能希望减少 undo 的生成量，以提高性能或处理特定的需求。以下是一些方法，可以减少 DML 操作生成的 undo 数据量：</p><h5 id="1-使用直接路径插入（Direct-Path-Insert）"><a href="#1-使用直接路径插入（Direct-Path-Insert）" class="headerlink" title="1. 使用直接路径插入（Direct-Path Insert）"></a>1. 使用直接路径插入（Direct-Path Insert）</h5><p>使用 append 提示进行 insert 叫做直接路径加载插入。加载大数据的时候可以采用这种方式。直接路径插入会绕过缓冲缓存（buffer cache），将数据直接写入数据文件，从而减少 undo 的生成。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="comment">/*+ APPEND */</span> <span class="keyword">INTO</span> target_table</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> source_table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="comment">/*+ append */</span> panda02 <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：直接路径插入可能会持久化数据，不可回滚，所以要小心使用。并且加入&#x2F;<em>+append</em>&#x2F;提示插入数据后需要马上 commit 事务，不然会出现ERROR 位于第 1 行:ORA-12838: 无法在并行模式下修改之后读&#x2F;修改对象的错误。 会影响下一次修改失败（insert,update,delete）<br>即使此时 select 这个表都会报错。因此 append 提示的语句首先不能是业务表，其次要尽快提交 commit。</p><h5 id="2-使用批量操作（Bulk-Operations）"><a href="#2-使用批量操作（Bulk-Operations）" class="headerlink" title="2. 使用批量操作（Bulk Operations）"></a>2. 使用批量操作（Bulk Operations）</h5><p>批量操作可以减少每个单独 DML 语句的开销，从而间接减少 undo 数据量。</p><p>使用 PL&#x2F;SQL 的 <code>FORALL</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DECLARE</span><br><span class="line">  TYPE numlist IS TABLE OF NUMBER;</span><br><span class="line">  mylist numlist := numlist(1, 2, 3, 4, 5);</span><br><span class="line">BEGIN</span><br><span class="line">  FORALL i IN mylist.FIRST..mylist.LAST</span><br><span class="line">    INSERT INTO my_table (column1) VALUES (mylist(i));</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><h5 id="3-减少事务大小"><a href="#3-减少事务大小" class="headerlink" title="3. 减少事务大小"></a>3. 减少事务大小</h5><p>通过减少单个事务中操作的记录数，可以减少每个事务生成的 undo 数据量。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 小事务</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_table <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;data1&#x27;</span>);</span><br><span class="line">  <span class="keyword">COMMIT</span>;</span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_table <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;data2&#x27;</span>);</span><br><span class="line">  <span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><h5 id="4-使用分区表（Partitioned-Tables）"><a href="#4-使用分区表（Partitioned-Tables）" class="headerlink" title="4. 使用分区表（Partitioned Tables）"></a>4. 使用分区表（Partitioned Tables）</h5><p>使用分区表将大表分成多个小的独立部分，可以减少每个分区上的 DML 操作生成的 undo 数据量。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> partitioned_table (</span><br><span class="line">  id NUMBER,</span><br><span class="line">  data VARCHAR2(<span class="number">100</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span> (id) (</span><br><span class="line">  <span class="keyword">PARTITION</span> p1 <span class="keyword">VALUES</span> LESS THAN (<span class="number">1000</span>),</span><br><span class="line">  <span class="keyword">PARTITION</span> p2 <span class="keyword">VALUES</span> LESS THAN (<span class="number">2000</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="5-使用不可回滚表（Non-Undo-Tables）"><a href="#5-使用不可回滚表（Non-Undo-Tables）" class="headerlink" title="5. 使用不可回滚表（Non-Undo Tables）"></a>5. 使用不可回滚表（Non-Undo Tables）</h5><p>在某些特殊情况下（如临时表），可以选择使用不产生 undo 数据的表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">GLOBAL</span> TEMPORARY <span class="keyword">TABLE</span> temp_table (</span><br><span class="line">  id NUMBER,</span><br><span class="line">  data VARCHAR2(<span class="number">100</span>)</span><br><span class="line">) <span class="keyword">ON</span> <span class="keyword">COMMIT</span> <span class="keyword">DELETE</span> <span class="keyword">ROWS</span>;</span><br></pre></td></tr></table></figure><p>在某些特殊情况下（如临时表），可以选择使用不产生 undo 数据的表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">GLOBAL</span> TEMPORARY <span class="keyword">TABLE</span> temp_table (</span><br><span class="line">  id NUMBER,</span><br><span class="line">  data VARCHAR2(<span class="number">100</span>)</span><br><span class="line">) <span class="keyword">ON</span> <span class="keyword">COMMIT</span> <span class="keyword">DELETE</span> <span class="keyword">ROWS</span>;</span><br></pre></td></tr></table></figure><h5 id="6-调整批量提交频率"><a href="#6-调整批量提交频率" class="headerlink" title="6. 调整批量提交频率"></a>6. 调整批量提交频率</h5><p>在大量 DML 操作中，增加批量提交的频率可以减少每个事务生成的 undo 数据量。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">  <span class="keyword">CURSOR</span> c <span class="keyword">IS</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> source_table;</span><br><span class="line">  counter <span class="type">INTEGER</span> :<span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">FOR</span> r <span class="keyword">IN</span> c LOOP</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> target_table <span class="keyword">VALUES</span> (r.id, r.data);</span><br><span class="line">    counter :<span class="operator">=</span> counter <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">    IF counter <span class="operator">=</span> <span class="number">1000</span> <span class="keyword">THEN</span></span><br><span class="line">      <span class="keyword">COMMIT</span>;</span><br><span class="line">      counter :<span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line">  <span class="keyword">END</span> LOOP;</span><br><span class="line">  <span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><h5 id="7-使用-TRUNCATE-代替-DELETE"><a href="#7-使用-TRUNCATE-代替-DELETE" class="headerlink" title="7. 使用 TRUNCATE 代替 DELETE"></a>7. 使用 <code>TRUNCATE</code> 代替 <code>DELETE</code></h5><p><code>TRUNCATE</code> 表操作不会生成 undo 数据，因为它直接重置高水位标记，而不是逐行删除数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> my_table;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：<code>TRUNCATE</code> 操作是不可回滚的。</p><p>虽然在很多情况下生成 undo 数据是必须的，但通过上述方法，可以有效地减少 DML 操作生成的 undo 数据量，从而提升性能和效率。具体选择哪种方法，需要根据实际业务需求和数据库的使用场景来确定。</p><h4 id="扩展2：select会产生undo吗？"><a href="#扩展2：select会产生undo吗？" class="headerlink" title="扩展2：select会产生undo吗？"></a>扩展2：select会产生undo吗？</h4><p>select属于DQL是DML的一个分支，查询语句并不会造成数据的更改，不会记录在undo中。<br>但是在某些情况下select也会产生undo<br><strong>1. SELECT FOR UPDATE</strong><br>当使用 SELECT … FOR UPDATE 语句时，数据库会对被查询的行加锁，以防止其他事务对这些行进行更改。这种情况下，会产生 undo 信息来记录锁的状态，以便在事务回滚时能够正确释放锁。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM my_table WHERE id = 1 FOR UPDATE;</span><br></pre></td></tr></table></figure><p><strong>2. 查询触发了内部修改</strong><br>在某些情况下，查询可能会触发内部的自动修改。例如，某些存储过程或触发器在查询期间被调用，并且这些过程或触发器对数据进行了修改。虽然这种情况不常见，但它确实会导致产生 undo。<br><strong>3. Flashback Query</strong><br>在使用 Flashback Query 功能时，Oracle 需要读取 undo 数据来恢复到指定的时间点。这意味着即使查询本身不产生 undo，它仍然依赖于 undo 数据来完成查询。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM my_table AS OF TIMESTAMP (SYSTIMESTAMP - INTERVAL &#x27;5&#x27; MINUTE);</span><br></pre></td></tr></table></figure><p><strong>4. 读一致性</strong><br>Oracle 数据库为了实现读一致性，可能会在查询过程中使用 undo 数据来确保返回的数据是一致的，特别是在多事务并发访问的环境中。虽然这不会直接导致查询生成 undo，但 undo 的使用在这个过程中是必要的。<br><strong>5. 索引和统计信息更新</strong><br>有时查询可能会触发统计信息或索引的更新，特别是在查询优化器决定收集统计信息以优化查询性能的情况下。这些更新操作可能会产生 undo。</p><h2 id="三、DDL语句占用undo表空间的大小"><a href="#三、DDL语句占用undo表空间的大小" class="headerlink" title="三、DDL语句占用undo表空间的大小"></a>三、DDL语句占用undo表空间的大小</h2><p>DDL都是直接提交的？没有回滚这一说，也有会产生undo吗？<br>事实是几乎每个 ddl 操作都会产生 undo,我们来探究一下:ddl 是否会产生 undo:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> vs.name, ms.value</span><br><span class="line">  <span class="keyword">from</span> v$mystat ms, v$sysstat vs</span><br><span class="line"> <span class="keyword">where</span> ms.statistic# <span class="operator">=</span> vs.statistic#</span><br><span class="line">   <span class="keyword">and</span> name <span class="operator">=</span> <span class="string">&#x27;undo change vector size&#x27;</span>;</span><br></pre></td></tr></table></figure><p>NAME VALUE</p><hr><p>undochangevectorsize 0</p><h3 id="DDL语句是否占用undo空间探究"><a href="#DDL语句是否占用undo空间探究" class="headerlink" title="DDL语句是否占用undo空间探究"></a>DDL语句是否占用undo空间探究</h3><p>SQL&gt; create table pandatb2 as select name from v$datafile;<br>Table created.<br><strong>查看undo大小：</strong><br>NAME      VALUE</p><hr><p>undo change vector size        2400</p><p>create table 的 ddl 语句产生了大约 2400 bytes 的撤销变化向量</p><p>drop table PANDATB2;<br><strong>查看undo大小：</strong><br>NAME      VALUE</p><hr><p>undo change vector size        4936</p><p>drop table 语句产生 4936-2400&#x3D;2536 bytes 的 undo 数据，drop多于 create table；<br>从结果中可以看出，DDL 操作也产生 UNDO。</p><h3 id="10046跟踪探究DDL过程"><a href="#10046跟踪探究DDL过程" class="headerlink" title="10046跟踪探究DDL过程"></a>10046跟踪探究DDL过程</h3><p>有些人可能会奇怪 DDL 怎么产生了 UNDO？DDL 不是不能 ROLLBACK 么？ 我们需要查看 DDL 语<br>句执行过程。这里我们通过 10046 trace 来查看：</p><p>猜测：可能是 create table 时 Oracle 需要向基表中 insert 数据，而 drop table 时则需要 delete&#x2F;update 数据，递归调用了DML语句，比如一些存储过程、在建表的时候需要创建一些基表和隐藏字段，显然后者产生更多的 undo</p><p>我们下面用 10046 来跟踪一下 create table 与 drop table 到底做了哪些操作？</p><h4 id="1、10046-来跟踪-create-table"><a href="#1、10046-来跟踪-create-table" class="headerlink" title="1、10046 来跟踪 create table"></a>1、10046 来跟踪 create table</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">SYS<span class="variable">@orcl</span><span class="operator">&gt;</span> oradebug setmypid; </span><br><span class="line">Statement processed.</span><br><span class="line">SYS<span class="variable">@orcl</span><span class="operator">&gt;</span> oradebug event <span class="number">10046</span> trace name context forever,level <span class="number">1</span>; </span><br><span class="line">Statement processed.</span><br><span class="line">SYS<span class="variable">@orcl</span><span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> pandatb02 (id <span class="type">int</span>,name varchar2(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">Table</span> created.</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> vs.name, ms.value</span><br><span class="line"><span class="keyword">from</span> v$mystat ms, v$sysstat vs <span class="keyword">where</span> ms.statistic# <span class="operator">=</span> vs.statistic#</span><br><span class="line">  <span class="number">3</span>  <span class="keyword">and</span> name <span class="operator">=</span> <span class="string">&#x27;undo change vector size&#x27;</span>;</span><br><span class="line"></span><br><span class="line">NAME      <span class="keyword">VALUE</span></span><br><span class="line"><span class="comment">---------------------------------------------------------------- ----------</span></span><br><span class="line">undo change vector size        <span class="number">2312</span></span><br><span class="line"></span><br><span class="line">SYS<span class="variable">@orcl</span><span class="operator">&gt;</span> </span><br></pre></td></tr></table></figure><p>create 产生了 2.3k 的 undo</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">SYS<span class="variable">@orcl</span><span class="operator">&gt;</span> oradebug tracefile_name; </span><br><span class="line"><span class="operator">/</span>u01<span class="operator">/</span>app<span class="operator">/</span>oracle<span class="operator">/</span>diag<span class="operator">/</span>rdbms<span class="operator">/</span>orcl<span class="operator">/</span>orcl<span class="operator">/</span>trace<span class="operator">/</span>orcl_ora_10078.trc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root<span class="variable">@orcl</span>:<span class="operator">/</span>root]$ cat <span class="operator">/</span>u01<span class="operator">/</span>app<span class="operator">/</span>oracle<span class="operator">/</span>diag<span class="operator">/</span>rdbms<span class="operator">/</span>orcl<span class="operator">/</span>orcl<span class="operator">/</span>trace<span class="operator">/</span>orcl_ora_10078.trc <span class="operator">|</span> egrep &quot;insert|update|delete&quot;</span><br><span class="line">   m_stmt:<span class="operator">=</span><span class="string">&#x27;insert into sdo_geor_ddl__table$$ values (1)&#x27;</span>;</span><br><span class="line">   m_stmt:<span class="operator">=</span><span class="string">&#x27;insert into sdo_geor_ddl__table$$ values (2)&#x27;</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> obj$(owner#,name,namespace,obj#,type#,ctime,mtime,stime,status,remoteowner,linkname,subname,dataobj#,flags,oid$,spare1,spare2,spare3) <span class="keyword">values</span>(:<span class="number">1</span>,:<span class="number">2</span>,:<span class="number">3</span>,:<span class="number">4</span>,:<span class="number">5</span>,:<span class="number">6</span>,:<span class="number">7</span>,:<span class="number">8</span>,:<span class="number">9</span>,:<span class="number">10</span>,:<span class="number">11</span>,:<span class="number">12</span>,:<span class="number">13</span>,:<span class="number">14</span>,:<span class="number">15</span>,:<span class="number">16</span>,:<span class="number">17</span>,:<span class="number">18</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seg$ (file#,block#,type#,ts#,blocks,extents,minexts,maxexts,extsize,extpct,<span class="keyword">user</span>#,iniexts,lists,<span class="keyword">groups</span>,cachehint,hwmincr, spare1, scanhint, bitmapranges) <span class="keyword">values</span> (:<span class="number">1</span>,:<span class="number">2</span>,:<span class="number">3</span>,:<span class="number">4</span>,:<span class="number">5</span>,:<span class="number">6</span>,:<span class="number">7</span>,:<span class="number">8</span>,:<span class="number">9</span>,:<span class="number">10</span>,:<span class="number">11</span>,:<span class="number">12</span>,:<span class="number">13</span>,:<span class="number">14</span>,:<span class="number">15</span>,:<span class="number">16</span>,DECODE(:<span class="number">17</span>,<span class="number">0</span>,<span class="keyword">NULL</span>,:<span class="number">17</span>),:<span class="number">18</span>,:<span class="number">19</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tab$(obj#,ts#,file#,block#,bobj#,tab#,intcols,kernelcols,clucols,audit$,flags,pctfree$,pctused$,initrans,maxtrans,rowcnt,blkcnt,empcnt,avgspc,chncnt,avgrln,analyzetime,samplesize,cols,property,degree,instances,dataobj#,avgspc_flb,flbcnt,trigflag,spare1,spare6)<span class="keyword">values</span>(:<span class="number">1</span>,:<span class="number">2</span>,:<span class="number">3</span>,:<span class="number">4</span>,decode(:<span class="number">5</span>,<span class="number">0</span>,<span class="keyword">null</span>,:<span class="number">5</span>),decode(:<span class="number">6</span>,<span class="number">0</span>,<span class="keyword">null</span>,:<span class="number">6</span>),:<span class="number">7</span>,:<span class="number">8</span>,decode(:<span class="number">9</span>,<span class="number">0</span>,<span class="keyword">null</span>,:<span class="number">9</span>),:<span class="number">10</span>,:<span class="number">11</span>,:<span class="number">12</span>,:<span class="number">13</span>,:<span class="number">14</span>,:<span class="number">15</span>,:<span class="number">16</span>,:<span class="number">17</span>,:<span class="number">18</span>,:<span class="number">19</span>,:<span class="number">20</span>,:<span class="number">21</span>,:<span class="number">22</span>,:<span class="number">23</span>,:<span class="number">24</span>,:<span class="number">25</span>,decode(:<span class="number">26</span>,<span class="number">1</span>,<span class="keyword">null</span>,:<span class="number">26</span>),decode(:<span class="number">27</span>,<span class="number">1</span>,<span class="keyword">null</span>,:<span class="number">27</span>),:<span class="number">28</span>,:<span class="number">29</span>,:<span class="number">30</span>,:<span class="number">31</span>,:<span class="number">32</span>,:<span class="number">33</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> col$(obj#,name,intcol#,segcol#,type#,length,<span class="keyword">precision</span>#,scale,<span class="keyword">null</span>$,<span class="keyword">offset</span>,fixedstorage,segcollength,deflength,<span class="keyword">default</span>$,col#,property,charsetid,charsetform,spare1,spare2,spare3)<span class="keyword">values</span>(:<span class="number">1</span>,:<span class="number">2</span>,:<span class="number">3</span>,:<span class="number">4</span>,:<span class="number">5</span>,:<span class="number">6</span>,decode(:<span class="number">5</span>,<span class="number">182</span><span class="comment">/*DTYIYM*/</span>,:<span class="number">7</span>,<span class="number">183</span><span class="comment">/*DTYIDS*/</span>,:<span class="number">7</span>,decode(:<span class="number">7</span>,<span class="number">0</span>,<span class="keyword">null</span>,:<span class="number">7</span>)),decode(:<span class="number">5</span>,<span class="number">2</span>,decode(:<span class="number">8</span>,<span class="number">-127</span><span class="comment">/*MAXSB1MINAL*/</span>,<span class="keyword">null</span>,:<span class="number">8</span>),<span class="number">178</span>,:<span class="number">8</span>,<span class="number">179</span>,:<span class="number">8</span>,<span class="number">180</span>,:<span class="number">8</span>,<span class="number">181</span>,:<span class="number">8</span>,<span class="number">182</span>,:<span class="number">8</span>,<span class="number">183</span>,:<span class="number">8</span>,<span class="number">231</span>,:<span class="number">8</span>,<span class="keyword">null</span>),:<span class="number">9</span>,<span class="number">0</span>,:<span class="number">10</span>,:<span class="number">11</span>,decode(:<span class="number">12</span>,<span class="number">0</span>,<span class="keyword">null</span>,:<span class="number">12</span>),:<span class="number">13</span>,:<span class="number">14</span>,:<span class="number">15</span>,:<span class="number">16</span>,:<span class="number">17</span>,:<span class="number">18</span>,:<span class="number">19</span>,:<span class="number">20</span>)</span><br><span class="line">   m_stmt:<span class="operator">=</span><span class="string">&#x27;delete from sdo_geor_ddl__table$$ where id=2&#x27;</span>;</span><br><span class="line">   m_stmt:<span class="operator">=</span><span class="string">&#x27;delete from sdo_geor_ddl__table$$&#x27;</span>;</span><br><span class="line"><span class="keyword">update</span> seg$ <span class="keyword">set</span> type#<span class="operator">=</span>:<span class="number">4</span>,blocks<span class="operator">=</span>:<span class="number">5</span>,extents<span class="operator">=</span>:<span class="number">6</span>,minexts<span class="operator">=</span>:<span class="number">7</span>,maxexts<span class="operator">=</span>:<span class="number">8</span>,extsize<span class="operator">=</span>:<span class="number">9</span>,extpct<span class="operator">=</span>:<span class="number">10</span>,<span class="keyword">user</span>#<span class="operator">=</span>:<span class="number">11</span>,iniexts<span class="operator">=</span>:<span class="number">12</span>,lists<span class="operator">=</span>decode(:<span class="number">13</span>, <span class="number">65535</span>, <span class="keyword">NULL</span>, :<span class="number">13</span>),<span class="keyword">groups</span><span class="operator">=</span>decode(:<span class="number">14</span>, <span class="number">65535</span>, <span class="keyword">NULL</span>, :<span class="number">14</span>), cachehint<span class="operator">=</span>:<span class="number">15</span>, hwmincr<span class="operator">=</span>:<span class="number">16</span>, spare1<span class="operator">=</span>DECODE(:<span class="number">17</span>,<span class="number">0</span>,<span class="keyword">NULL</span>,:<span class="number">17</span>),scanhint<span class="operator">=</span>:<span class="number">18</span>, bitmapranges<span class="operator">=</span>:<span class="number">19</span> <span class="keyword">where</span> ts#<span class="operator">=</span>:<span class="number">1</span> <span class="keyword">and</span> file#<span class="operator">=</span>:<span class="number">2</span> <span class="keyword">and</span> block#<span class="operator">=</span>:<span class="number">3</span></span><br><span class="line">[root<span class="variable">@orcl</span>:<span class="operator">/</span>root]$ </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主要是向基表中插入数据<br>可见 DDL 语句递归做了很多 DML 操作，这些都将产生 UNDO。</p><h4 id="2、10046-来跟踪-drop-table"><a href="#2、10046-来跟踪-drop-table" class="headerlink" title="2、10046 来跟踪 drop table"></a>2、10046 来跟踪 drop table</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">SYS<span class="variable">@orcl</span><span class="operator">&gt;</span> oradebug setmypid; </span><br><span class="line">Statement processed.</span><br><span class="line">SYS<span class="variable">@orcl</span><span class="operator">&gt;</span> oradebug event <span class="number">10046</span> trace name context forever,level <span class="number">1</span>; </span><br><span class="line">Statement processed.</span><br><span class="line">SYS<span class="variable">@orcl</span><span class="operator">&gt;</span> <span class="keyword">drop</span> <span class="keyword">table</span> pandatb02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Table</span> dropped.</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> vs.name, ms.value</span><br><span class="line"><span class="keyword">from</span> v$mystat ms, v$sysstat vs <span class="keyword">where</span> ms.statistic# <span class="operator">=</span> vs.statistic#</span><br><span class="line">  <span class="number">3</span>  <span class="keyword">and</span> name <span class="operator">=</span> <span class="string">&#x27;undo change vector size&#x27;</span>;</span><br><span class="line"></span><br><span class="line">NAME      <span class="keyword">VALUE</span></span><br><span class="line"><span class="comment">---------------------------------------------------------------- ----------</span></span><br><span class="line">undo change vector size        <span class="number">3012</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>dropped产生了 3k 的 undo</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">SYS<span class="variable">@orcl</span><span class="operator">&gt;</span>  oradebug tracefile_name; </span><br><span class="line"><span class="operator">/</span>u01<span class="operator">/</span>app<span class="operator">/</span>oracle<span class="operator">/</span>diag<span class="operator">/</span>rdbms<span class="operator">/</span>orcl<span class="operator">/</span>orcl<span class="operator">/</span>trace<span class="operator">/</span>orcl_ora_10083.trc</span><br><span class="line"></span><br><span class="line">[root<span class="variable">@orcl</span>:<span class="operator">/</span>root]$ cat <span class="operator">/</span>u01<span class="operator">/</span>app<span class="operator">/</span>oracle<span class="operator">/</span>diag<span class="operator">/</span>rdbms<span class="operator">/</span>orcl<span class="operator">/</span>orcl<span class="operator">/</span>trace<span class="operator">/</span>orcl_ora_10083.trc <span class="operator">|</span> egrep &quot;insert|update|delete&quot;</span><br><span class="line">         <span class="string">&#x27;Need use delete_topo_geometry_layer() to deregister table &#x27;</span></span><br><span class="line">   m_stmt:<span class="operator">=</span><span class="string">&#x27;insert into sdo_geor_ddl__table$$ values (1)&#x27;</span>;</span><br><span class="line">   m_stmt:<span class="operator">=</span><span class="string">&#x27;insert into sdo_geor_ddl__table$$ values (2)&#x27;</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> sdo_geor_ddl__table$$ <span class="keyword">values</span> (<span class="number">2</span>)</span><br><span class="line"><span class="keyword">select</span> decode(u.type#, <span class="number">2</span>, u.ext_username, u.name), o.name,        t.update$, t.insert$, t.delete$, t.enabled,        decode(bitand(t.property, <span class="number">8192</span>),<span class="number">8192</span>, <span class="number">1</span>, <span class="number">0</span>),        decode(bitand(t.property, <span class="number">65536</span>), <span class="number">65536</span>, <span class="number">1</span>, <span class="number">0</span>),       decode(bitand(t.property, <span class="number">131072</span>), <span class="number">131072</span>, <span class="number">1</span>, <span class="number">0</span>),       (<span class="keyword">select</span> o.name <span class="keyword">from</span> obj$ o          <span class="keyword">where</span> o.obj# <span class="operator">=</span> u.spare2 <span class="keyword">and</span> o.type# <span class="operator">=</span><span class="number">57</span>)  <span class="keyword">from</span> sys.obj$ o, sys.user$ u, sys.trigger$ t, sys.obj$ bo <span class="keyword">where</span> t.baseobject<span class="operator">=</span>bo.obj# <span class="keyword">and</span> bo.name <span class="operator">=</span> :<span class="number">1</span> <span class="keyword">and</span> bo.spare3 <span class="operator">=</span> :<span class="number">2</span>  <span class="keyword">and</span> bo.namespace <span class="operator">=</span> <span class="number">1</span>  <span class="keyword">and</span> t.obj#<span class="operator">=</span>o.obj# <span class="keyword">and</span> o.owner#<span class="operator">=</span>u.user#  <span class="keyword">and</span> o.type# <span class="operator">=</span> <span class="number">12</span> <span class="keyword">and</span> bitand(property,<span class="number">16</span>)<span class="operator">=</span><span class="number">0</span> <span class="keyword">and</span> bitand(property,<span class="number">8</span>)<span class="operator">=</span><span class="number">0</span>  <span class="keyword">order</span> <span class="keyword">by</span> o.obj#</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> object_usage <span class="keyword">where</span> obj# <span class="keyword">in</span>  (<span class="keyword">select</span> a.obj# <span class="keyword">from</span> object_usage a, ind$ b <span class="keyword">where</span>  a.obj# <span class="operator">=</span> b.obj# <span class="keyword">and</span> b.bo# <span class="operator">=</span> :<span class="number">1</span>)</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> sys.cache_stats_1$ <span class="keyword">where</span> dataobj# <span class="operator">=</span> :<span class="number">1</span></span><br><span class="line"><span class="keyword">delete</span> com$ <span class="keyword">where</span> obj#<span class="operator">=</span>:<span class="number">1</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> hist_head$ <span class="keyword">where</span> obj# <span class="operator">=</span> :<span class="number">1</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> compression$ <span class="keyword">where</span> obj#<span class="operator">=</span>:<span class="number">1</span></span><br><span class="line">   m_stmt:<span class="operator">=</span><span class="string">&#x27;delete from sdo_geor_ddl__table$$ where id=2&#x27;</span>;</span><br><span class="line">   m_stmt:<span class="operator">=</span><span class="string">&#x27;delete from sdo_geor_ddl__table$$&#x27;</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> sdo_geor_ddl__table$$ <span class="keyword">where</span> id<span class="operator">=</span><span class="number">2</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> col$ <span class="keyword">where</span> obj#<span class="operator">=</span>:<span class="number">1</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> icol$ <span class="keyword">where</span> bo#<span class="operator">=</span>:<span class="number">1</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> icoldep$ <span class="keyword">where</span> obj# <span class="keyword">in</span> (<span class="keyword">select</span> obj# <span class="keyword">from</span> ind$ <span class="keyword">where</span> bo#<span class="operator">=</span>:<span class="number">1</span>)</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> jijoin$ <span class="keyword">where</span> obj# <span class="keyword">in</span> ( <span class="keyword">select</span> obj# <span class="keyword">from</span> jijoin$ <span class="keyword">where</span> tab1obj# <span class="operator">=</span> :<span class="number">1</span> <span class="keyword">or</span> tab2obj# <span class="operator">=</span> :<span class="number">1</span>)</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> jirefreshsql$ <span class="keyword">where</span> iobj# <span class="keyword">in</span> ( <span class="keyword">select</span> iobj# <span class="keyword">from</span> jirefreshsql$ <span class="keyword">where</span> tobj# <span class="operator">=</span> :<span class="number">1</span>)</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> ccol$ <span class="keyword">where</span> obj#<span class="operator">=</span>:<span class="number">1</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> ind$ <span class="keyword">where</span> bo#<span class="operator">=</span>:<span class="number">1</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> cdef$ <span class="keyword">where</span> obj#<span class="operator">=</span>:<span class="number">1</span></span><br><span class="line"><span class="keyword">delete</span> ecol$ <span class="keyword">where</span> tabobj# <span class="operator">=</span> :<span class="number">1</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tab$ <span class="keyword">where</span> obj#<span class="operator">=</span>:<span class="number">1</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> idl_ub1$ <span class="keyword">where</span> obj#<span class="operator">=</span>:<span class="number">1</span> <span class="keyword">and</span> part<span class="operator">=</span>:<span class="number">2</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> idl_char$ <span class="keyword">where</span> obj#<span class="operator">=</span>:<span class="number">1</span> <span class="keyword">and</span> part<span class="operator">=</span>:<span class="number">2</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> idl_ub2$ <span class="keyword">where</span> obj#<span class="operator">=</span>:<span class="number">1</span> <span class="keyword">and</span> part<span class="operator">=</span>:<span class="number">2</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> idl_sb4$ <span class="keyword">where</span> obj#<span class="operator">=</span>:<span class="number">1</span> <span class="keyword">and</span> part<span class="operator">=</span>:<span class="number">2</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> ncomp_dll$ <span class="keyword">where</span> obj#<span class="operator">=</span>:<span class="number">1</span> returning dllname <span class="keyword">into</span> :<span class="number">2</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> idl_ub1$ <span class="keyword">where</span> obj#<span class="operator">=</span>:<span class="number">1</span> <span class="keyword">and</span> part<span class="operator">=</span>:<span class="number">2</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> idl_char$ <span class="keyword">where</span> obj#<span class="operator">=</span>:<span class="number">1</span> <span class="keyword">and</span> part<span class="operator">=</span>:<span class="number">2</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> idl_ub2$ <span class="keyword">where</span> obj#<span class="operator">=</span>:<span class="number">1</span> <span class="keyword">and</span> part<span class="operator">=</span>:<span class="number">2</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> idl_sb4$ <span class="keyword">where</span> obj#<span class="operator">=</span>:<span class="number">1</span> <span class="keyword">and</span> part<span class="operator">=</span>:<span class="number">2</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> ncomp_dll$ <span class="keyword">where</span> obj#<span class="operator">=</span>:<span class="number">1</span> returning dllname <span class="keyword">into</span> :<span class="number">2</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> idl_ub1$ <span class="keyword">where</span> obj#<span class="operator">=</span>:<span class="number">1</span> <span class="keyword">and</span> part<span class="operator">=</span>:<span class="number">2</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> idl_char$ <span class="keyword">where</span> obj#<span class="operator">=</span>:<span class="number">1</span> <span class="keyword">and</span> part<span class="operator">=</span>:<span class="number">2</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> idl_ub2$ <span class="keyword">where</span> obj#<span class="operator">=</span>:<span class="number">1</span> <span class="keyword">and</span> part<span class="operator">=</span>:<span class="number">2</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> idl_sb4$ <span class="keyword">where</span> obj#<span class="operator">=</span>:<span class="number">1</span> <span class="keyword">and</span> part<span class="operator">=</span>:<span class="number">2</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> ncomp_dll$ <span class="keyword">where</span> obj#<span class="operator">=</span>:<span class="number">1</span> returning dllname <span class="keyword">into</span> :<span class="number">2</span></span><br><span class="line"><span class="keyword">delete</span> coltype$ <span class="keyword">where</span> obj#<span class="operator">=</span>:<span class="number">1</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> subcoltype$ <span class="keyword">where</span> obj#<span class="operator">=</span>:<span class="number">1</span></span><br><span class="line"><span class="keyword">delete</span> ntab$ <span class="keyword">where</span> obj#<span class="operator">=</span>:<span class="number">1</span></span><br><span class="line"><span class="keyword">delete</span> lob$ <span class="keyword">where</span> obj#<span class="operator">=</span>:<span class="number">1</span></span><br><span class="line"><span class="keyword">delete</span> refcon$ <span class="keyword">where</span> obj#<span class="operator">=</span>:<span class="number">1</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> opqtype$ <span class="keyword">where</span> obj#<span class="operator">=</span>:<span class="number">1</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> cdef$ <span class="keyword">where</span> obj#<span class="operator">=</span>:<span class="number">1</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> objauth$ <span class="keyword">where</span> obj#<span class="operator">=</span>:<span class="number">1</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> obj$ <span class="keyword">where</span> obj# <span class="operator">=</span> :<span class="number">1</span></span><br><span class="line"><span class="keyword">update</span> seg$ <span class="keyword">set</span> type#<span class="operator">=</span>:<span class="number">4</span>,blocks<span class="operator">=</span>:<span class="number">5</span>,extents<span class="operator">=</span>:<span class="number">6</span>,minexts<span class="operator">=</span>:<span class="number">7</span>,maxexts<span class="operator">=</span>:<span class="number">8</span>,extsize<span class="operator">=</span>:<span class="number">9</span>,extpct<span class="operator">=</span>:<span class="number">10</span>,<span class="keyword">user</span>#<span class="operator">=</span>:<span class="number">11</span>,iniexts<span class="operator">=</span>:<span class="number">12</span>,lists<span class="operator">=</span>decode(:<span class="number">13</span>, <span class="number">65535</span>, <span class="keyword">NULL</span>, :<span class="number">13</span>),<span class="keyword">groups</span><span class="operator">=</span>decode(:<span class="number">14</span>, <span class="number">65535</span>, <span class="keyword">NULL</span>, :<span class="number">14</span>), cachehint<span class="operator">=</span>:<span class="number">15</span>, hwmincr<span class="operator">=</span>:<span class="number">16</span>, spare1<span class="operator">=</span>DECODE(:<span class="number">17</span>,<span class="number">0</span>,<span class="keyword">NULL</span>,:<span class="number">17</span>),scanhint<span class="operator">=</span>:<span class="number">18</span>, bitmapranges<span class="operator">=</span>:<span class="number">19</span> <span class="keyword">where</span> ts#<span class="operator">=</span>:<span class="number">1</span> <span class="keyword">and</span> file#<span class="operator">=</span>:<span class="number">2</span> <span class="keyword">and</span> block#<span class="operator">=</span>:<span class="number">3</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> seg$ <span class="keyword">where</span> ts#<span class="operator">=</span>:<span class="number">1</span> <span class="keyword">and</span> file#<span class="operator">=</span>:<span class="number">2</span> <span class="keyword">and</span> block#<span class="operator">=</span>:<span class="number">3</span></span><br><span class="line">[root<span class="variable">@orcl</span>:<span class="operator">/</span>root]$ </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3、如果-ddl-操作执行失败又会如何呢？"><a href="#3、如果-ddl-操作执行失败又会如何呢？" class="headerlink" title="3、如果 ddl 操作执行失败又会如何呢？"></a>3、如果 ddl 操作执行失败又会如何呢？</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Connected <span class="keyword">to</span>:</span><br><span class="line">Oracle Database <span class="number">11</span>g Enterprise Edition <span class="keyword">Release</span> <span class="number">11.2</span><span class="number">.0</span><span class="number">.4</span><span class="number">.0</span> <span class="operator">-</span> <span class="number">64</span>bit Production</span><br><span class="line"><span class="keyword">With</span> the Partitioning, OLAP, Data Mining <span class="keyword">and</span> <span class="type">Real</span> Application Testing options</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> vs.name, ms.value</span><br><span class="line"><span class="keyword">from</span> v$mystat ms, v$sysstat vs <span class="keyword">where</span> ms.statistic# <span class="operator">=</span> vs.statistic#</span><br><span class="line">  <span class="number">3</span>  <span class="keyword">and</span> name <span class="operator">=</span> <span class="string">&#x27;undo change vector size&#x27;</span>;</span><br><span class="line"></span><br><span class="line">NAME      <span class="keyword">VALUE</span></span><br><span class="line"><span class="comment">---------------------------------------------------------------- ----------</span></span><br><span class="line">undo change vector size   <span class="number">0</span></span><br><span class="line"></span><br><span class="line">SYS<span class="variable">@orcl</span><span class="operator">&gt;</span> </span><br><span class="line">SYS<span class="variable">@orcl</span><span class="operator">&gt;</span> </span><br><span class="line">SYS<span class="variable">@orcl</span><span class="operator">&gt;</span> oradebug setmypid;</span><br><span class="line">Statement processed.</span><br><span class="line">SYS<span class="variable">@orcl</span><span class="operator">&gt;</span> oradebug event <span class="number">10046</span> trace name context forever,level <span class="number">1</span>; </span><br><span class="line">Statement processed.</span><br><span class="line">SYS<span class="variable">@orcl</span><span class="operator">&gt;</span> <span class="keyword">drop</span> <span class="keyword">table</span> pandatb00;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> pandatb00</span><br><span class="line">           <span class="operator">*</span></span><br><span class="line">ERROR <span class="keyword">at</span> line <span class="number">1</span>:</span><br><span class="line">ORA<span class="number">-00942</span>: <span class="keyword">table</span> <span class="keyword">or</span> <span class="keyword">view</span> does <span class="keyword">not</span> exist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> vs.name, ms.value</span><br><span class="line"><span class="keyword">from</span> v$mystat ms, v$sysstat vs <span class="keyword">where</span> ms.statistic# <span class="operator">=</span> vs.statistic#</span><br><span class="line">  <span class="number">3</span>  <span class="keyword">and</span> name <span class="operator">=</span> <span class="string">&#x27;undo change vector size&#x27;</span>;</span><br><span class="line"></span><br><span class="line">NAME      <span class="keyword">VALUE</span></span><br><span class="line"><span class="comment">---------------------------------------------------------------- ----------</span></span><br><span class="line">undo change vector size <span class="number">112</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同样产生了 undo,量较少</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SYS<span class="variable">@orcl</span><span class="operator">&gt;</span> oradebug tracefile_name; </span><br><span class="line"><span class="operator">/</span>u01<span class="operator">/</span>app<span class="operator">/</span>oracle<span class="operator">/</span>diag<span class="operator">/</span>rdbms<span class="operator">/</span>orcl<span class="operator">/</span>orcl<span class="operator">/</span>trace<span class="operator">/</span>orcl_ora_10223.trc</span><br><span class="line">SYS<span class="variable">@orcl</span><span class="operator">&gt;</span> </span><br><span class="line"></span><br><span class="line">[root<span class="variable">@orcl</span>:<span class="operator">/</span>root]$ cat <span class="operator">/</span>u01<span class="operator">/</span>app<span class="operator">/</span>oracle<span class="operator">/</span>diag<span class="operator">/</span>rdbms<span class="operator">/</span>orcl<span class="operator">/</span>orcl<span class="operator">/</span>trace<span class="operator">/</span>orcl_ora_10223.trc <span class="operator">|</span> egrep &quot;insert|update|delete&quot;</span><br><span class="line">         <span class="string">&#x27;Need use delete_topo_geometry_layer() to deregister table &#x27;</span></span><br><span class="line">   m_stmt:<span class="operator">=</span><span class="string">&#x27;insert into sdo_geor_ddl__table$$ values (1)&#x27;</span>;</span><br><span class="line">   m_stmt:<span class="operator">=</span><span class="string">&#x27;insert into sdo_geor_ddl__table$$ values (2)&#x27;</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> sdo_geor_ddl__table$$ <span class="keyword">values</span> (<span class="number">2</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行少量递归操作后，Oracle 发现所要 drop 的对象并不存在，将会 rollback 之前 的”部分”递归 dml 操作<br>其实我们可以把 ddl 操作分解为以下步骤:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">commit</span>;</span><br><span class="line">  <span class="comment">--编译 ddl </span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="comment">--实现 ddl,包括一系列递归的数据字典维护操作及其他操作 commit;</span></span><br><span class="line">  exception</span><br><span class="line">    <span class="keyword">when</span> others <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">rollback</span>;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>ddl 操作无需也不允许手动 commit 或 rollback 参与，但这并不代表 ddl 操作不产生 undo。</p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://cloud.tencent.com/developer/article/2220871">图文结合带你搞定MySQL日志之Undo log(回滚日志)-腾讯云开发者社区-腾讯云</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub&amp;Git上传报错</title>
      <link href="/2023/03/18/GitHub-Git%E4%B8%8A%E4%BC%A0%E6%8A%A5%E9%94%99/"/>
      <url>/2023/03/18/GitHub-Git%E4%B8%8A%E4%BC%A0%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>[Git常用命令面试题 60道.pdf](D:&#x2F;桌面&#x2F;notes&#x2F;02、就业加强训练&#x2F;06-2022面试题串讲&#x2F;面试题&#x2F;Git常用命令面试题 60道.pdf)</p><h3 id="github-master分支迁移到main分支"><a href="#github-master分支迁移到main分支" class="headerlink" title="github master分支迁移到main分支"></a>github master分支迁移到main分支</h3><p>首先克隆一份原仓库到本地进行操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone xxxxxxx.git</span><br></pre></td></tr></table></figure><p>​     创建并切换到main</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b main</span><br></pre></td></tr></table></figure><p>​     推送main</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin main</span><br></pre></td></tr></table></figure><p>​     删除本地master</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d master</span><br></pre></td></tr></table></figure><p>​     删除远程master</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin :master</span><br></pre></td></tr></table></figure><p>​    这样就算成功迁移到main分支了。</p><h3 id="在github同一个仓库立上传多个项目"><a href="#在github同一个仓库立上传多个项目" class="headerlink" title="在github同一个仓库立上传多个项目"></a>在github同一个仓库立上传多个项目</h3><p>想把平时练习的代码放到一个仓库里，百度了都没找到解答，自己就用了一个笨方法，仅供参考。<br>1、建立本地一个文件夹专门放不同练习代码<br>我是 D:\ggg。<br>右键 Git Bath Here进入git操作：<br>先上传一个小练习的文件夹</p><p>①$ git init<br>②$ git add .<br>③$ git commit -m “用户中心管理系统”<br>④$ git remote add origin <a href="https://github.com/yourName/yourRepo.git">https://github.com/yourName/yourRepo.git</a><br>⑤$ git push -u origin master<br><img src="https://cdn.staticaly.com/gh/codepandaLN/picgocdn@master/img/image-20230317184829765.png" alt="image-20230317184829765"></p><p><img src="https://cdn.staticaly.com/gh/codepandaLN/picgocdn@master/img/image-20230317185544779.png" alt="image-20230317185544779"></p><p><img src="https://cdn.staticaly.com/gh/codepandaLN/picgocdn@master/img/image-20230317185947832.png" alt="image-20230317185947832"></p><p><strong>2、上传另一个新的文件夹</strong><br>把该文件夹复制到D:\ggg。</p><p>git操作：<br>①<code>$ git add .</code><br>②<code>$ git commit -m &quot;提交描述&quot;</code><br>③<code>$ git push -u origin main</code></p><p>上面把master分支删掉了，刷新一下就好</p><p><img src="https://cdn.staticaly.com/gh/codepandaLN/picgocdn@master/img/image-20230317190422495.png" alt="image-20230317190422495"></p><p><img src="https://cdn.staticaly.com/gh/codepandaLN/picgocdn@master/img/image-20230317191328125.png" alt="image-20230317191328125"></p><h4 id="EROOR："><a href="#EROOR：" class="headerlink" title="EROOR："></a>EROOR：</h4><h5 id="1-符号转义问题"><a href="#1-符号转义问题" class="headerlink" title="1.符号转义问题"></a>1.符号转义问题</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">warning: LF will be replaced by CRLF in user-center-backend/.gitignore.</span><br><span class="line">The file will have its original line endings in your working directory</span><br></pre></td></tr></table></figure><p><strong>这种错误的原因是存在符号转义问题，在windows中的换行符为 CRLF， 而在linux下的换行符为LF，所以在执行git add . 或git deploy语句的时候可能就会出现这个错误</strong></p><p>在windows下直接回车就会出现这个提示,修改的办法是把 core.autocrlf 设置成false</p><p><strong>解决办法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.autocrlf false</span><br></pre></td></tr></table></figure><p><strong>解析：</strong>此命令会有三个输出，“true”，“false”或者“input”</p><ul><li>为true时，Git会将你add的所有文件视为文本问价你，将结尾的CRLF转换为LF，而checkout时会再将文件的LF格式转为CRLF格式。</li><li>为false时，line endings不做任何改变，文本文件保持其原来的样子。</li><li>为input时，add时Git会把CRLF转换为LF，而check时仍旧为LF，所以Windows操作系统不建议设置此值。</li></ul><p><a href="https://blog.csdn.net/wq6ylg08/article/details/88761581/">(49条消息) Git提示“warning: LF will be replaced by CRLF”最详细解释+解决方案_快乐李同学(李俊德-大连理工大学)的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/chenxijie1985/article/details/107759826">(49条消息) 解决warning: LF will be replaced by CRLF in方法_一切归于平静的博客-CSDN博客</a></p><h5 id="2-网络问题"><a href="#2-网络问题" class="headerlink" title="2.网络问题"></a>2.网络问题</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable to access &#x27;https://github.com/codepandaLN/learn-git.git/&#x27;: OpenSSL SSL_read: SSL_ERROR_SYSCALL, errno 10054</span><br></pre></td></tr></table></figure><p>多试几次就好了</p><h5 id="3-failed-to-push-some-refs-to-‘https-github-com"><a href="#3-failed-to-push-some-refs-to-‘https-github-com" class="headerlink" title="3.failed to push some refs to ‘https://github.com/"></a>3.failed to push some refs to ‘<a href="https://github.com/">https://github.com/</a></h5><p>原因：远程库和本地库不一致。通常出现在初始化仓库有readme而本地没有等情况。</p><p>提示：git的提示同上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hint: Updates were rejected because the remote contains work that you do</span><br><span class="line">hint: not have locally. This is usually caused by another repository pushing</span><br><span class="line">hint: to the same ref. You may want to first integrate the remote changes</span><br><span class="line">hint: (e.g., &#x27;git pull ...&#x27;) before pushing again.</span><br><span class="line">hint: See the &#x27;Note about fast-forwards&#x27; in &#x27;git push --help&#x27; for details.</span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure><p>原理：</p><p>把远程库中的更新合并到本地库中，–-rebase的作用是取消掉本地库中刚刚的commit，并把他们接到更新后的版本库之中。然后再进行push即可。</p><p><img src="https://cdn.staticaly.com/gh/codepandaLN/picgocdn@master/img/3c647b4781b47dfe3d33642beeb6cc82.png" alt="img"></p><p><code>git pull -–rebase origin master</code> 操作，意为先取消commit记录，并且把它们临时保存为补丁(patch)(这些补丁在”.git&#x2F;rebase”目录中)，之后同步远程库到本地，最后合并补丁到本地库之中。</p><p>注意：距离上次push提交至今，在本地库commit的记录均暂存为patch。</p>]]></content>
      
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旧项目启动报错YAMLException.create breakpoint</title>
      <link href="/2023/02/21/%E6%97%A7%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99YAMLException-create-breakpoint/"/>
      <url>/2023/02/21/%E6%97%A7%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99YAMLException-create-breakpoint/</url>
      
        <content type="html"><![CDATA[<p>很久没启动的项目报错</p><h2 id="1、编码问题"><a href="#1、编码问题" class="headerlink" title="1、编码问题"></a>1、编码问题</h2><p>Dfile.encoding&#x3D;UTF-8 -classpath </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\software\Java\jdk1<span class="number">.8</span><span class="number">.0_261</span>\bin\java.exe -XX:TieredStopAtLevel=<span class="number">1</span> -noverify -Dspring.output.ansi.enabled=always <span class="string">&quot;-javaagent:D:\software\IntelliJ IDEA 2020.3\lib\idea_rt.jar=12773:D:\software\IntelliJ IDEA 2020.3\bin&quot;</span> -Dcom.sun.management.jmxremote -Dspring.jmx.enabled=<span class="literal">true</span> -Dspring.liveBeansView.mbeanDomain -Dspring.application.admin.enabled=<span class="literal">true</span> -Dfile.encoding=UTF-<span class="number">8</span> -classpath </span><br></pre></td></tr></table></figure><h3 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h3><p>springboot项目yml文件中使用了中文注释，其实是yml文件的编码导致的。</p><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>将yml文件的编码改成<code>UTF-8</code>：<br><code>File-&gt;Editor-&gt;File Encodings</code> 图中的位置改变yml文件编码就可以了</p><h2 id="2、yml配置文件"><a href="#2、yml配置文件" class="headerlink" title="2、yml配置文件"></a>2、yml配置文件</h2><p>有关yaml的，报错 **YAML.**Exception.create breakpoint、<a href="https://so.csdn.net/so/search?q=yaml&spm=1001.2101.3001.7020">yaml</a>.snakeyaml.error.YAMLException等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">14</span>:<span class="number">22</span>:<span class="number">26.182</span> [restartedMain] ERROR org.springframework.boot.SpringApplication - Application run failed</span><br><span class="line">org.yaml.snakeyaml.error.YAMLException: java.nio.charset.MalformedInputException: <span class="type">Input</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">at org.yaml.snakeyaml.reader.StreamReader.update(StreamReader.java:<span class="number">218</span>)</span><br><span class="line">at org.yaml.snakeyaml.reader.StreamReader.ensureEnoughData(StreamReader.java:<span class="number">176</span>)</span><br></pre></td></tr></table></figure><p>主要的两句就是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR org.springframework.boot.SpringApplication - Application run failed</span><br><span class="line">org.yaml.snakeyaml.error.YAMLException: java.nio.charset.MalformedInputException: <span class="type">Input</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>1.将配置文件删掉，ctrl+z撤销</p><p>2.基本说是文件格式问题，于是改文件格式，改idea环境文本格式，跟着百度改各种各样的格式，然而，问题依旧。</p><p>最后，在acnklbxoxcyuiw大佬的提示下，才想到将yml文件改成properties文件，果然问题解决。</p><p>附原文连接:</p><p><a href="https://blog.csdn.net/lezeqe/article/details/109757670">https://blog.csdn.net/lezeqe/article/details/109757670</a></p><p>另附确实好用的yml与properties<strong>格式转换在线网站</strong><br><strong><a href="https://www.toyaml.com/index.html">yml、properties格式互相转换</a></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>API接口平台</title>
      <link href="/2023/02/20/API%E6%8E%A5%E5%8F%A3%E5%B9%B3%E5%8F%B0/"/>
      <url>/2023/02/20/API%E6%8E%A5%E5%8F%A3%E5%B9%B3%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="API开放平台"><a href="#API开放平台" class="headerlink" title="API开放平台"></a>API开放平台</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><p><strong>背景</strong></p><p>1．前端开发需要用到后台接口<br>2．使用现成的系统的功能(<a href="http://api.btstu.cn/">http://api.btstu.cn/</a>)</p><p><strong>做一个API接口平台:</strong></p><ol><li>防止攻击（安全性)</li><li>不能随便调用(限制、开通)</li><li>统计调用次数</li><li>计费</li><li>流量保护</li><li>API接入</li></ol><p><strong>项目介绍</strong></p><p>做一个提供API接口调用的平台，用户可以注册登录，开通接口调用权限。用户可以使用接口，并且每次调用会进行统计。管理员可以发布接口、下线接口、接入接口，以及可视化接口的调用情况、数据。</p><p><strong>业务流程</strong></p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230112101821991.png" alt="image-20230112101821991"></p><p><strong>技术选型</strong></p><p><strong>前端：</strong></p><ul><li><p>Ant Design Pro </p></li><li><p>React</p></li><li><p>Ant Design Procomponents</p></li><li><p>Umi</p></li><li><p>Umi Request (Axios的封装)</p></li></ul><p><strong>后端：</strong></p><ul><li>Java Spring Boot</li><li>Spring Boot Starter (SDK开发)</li><li>Dubbo</li><li>Nacos</li><li>Spring Cloud Gateway (网关、限流、日志实现)</li></ul><h1 id="一、项目初始化"><a href="#一、项目初始化" class="headerlink" title="一、项目初始化"></a>一、项目初始化</h1><hr><h2 id="1、Ant-Design-Pro"><a href="#1、Ant-Design-Pro" class="headerlink" title="1、Ant Design Pro"></a>1、Ant Design Pro</h2><hr><p>快速开始使用，可以查看<a href="https://pro.ant.design/zh-CN/docs/getting-started">官方教程</a></p><p><strong>初始化</strong></p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 npm</span></span><br><span class="line">npm i @ant-design/pro-cli -g</span><br></pre></td></tr></table></figure></blockquote><p>打开将要存放项目的文件夹</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pro create  项目名称</span><br></pre></td></tr></table></figure></blockquote><p><strong>选择umi版本</strong></p><blockquote>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">? 🐂 使用 umi@4 还是 umi@3 ? (Use arrow keys)</span><br><span class="line">❯ umi@4</span><br><span class="line"> umi@3</span><br></pre></td></tr></table></figure></blockquote><p>选择4版的</p><p><strong>安装依赖</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn 或者  npm install</span><br></pre></td></tr></table></figure><p><strong>启动</strong></p><p>在<strong>package.json</strong>里面      点击<strong>start</strong></p><p>这里我遇到了一个坑，登录页面无法登录 状态码404</p><p>在GitHub issue里找到了解决方案：<a href="https://github.com/ant-design/ant-design-pro/issues/10446">https://github.com/ant-design/ant-design-pro/issues/10446</a></p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230112105451611.png" alt="image-20230112105451611"></p><p><strong>删除不必要的东西</strong></p><ol><li><p>移除国际化</p><p><font color='red'>先跳过 有BUG</font></p><p>运行package.json中的i18n-remove 然后发现又报错了..</p><blockquote><p>  解决方法：执行 </p><p>  yarn add eslint-config-prettier</p><p>  yarn add eslint-plugin-unicorn</p><p>  然后修改node_modules&#x2F;@umijs&#x2F;lint&#x2F;dist&#x2F;config&#x2F;eslint&#x2F;index.js </p><p>  &#x2F;&#x2F; es2022: true把这个注释掉就可以解决问题</p></blockquote><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230112110408577.png" alt="image-20230112110408577"></p><p>然后删除src&#x2F;locales目录</p></li><li><p>删除tests测试</p></li></ol><h2 id="2、后端"><a href="#2、后端" class="headerlink" title="2、后端"></a>2、后端</h2><hr><h3 id="1、初始化"><a href="#1、初始化" class="headerlink" title="1、初始化"></a>1、初始化</h3><p><strong>使用SpringBoot 项目初始模板</strong></p><p>Java SpringBoot 项目初始模板，整合了常用框架和示例代码，大家可以在此基础上快速开发自己的项目。(springboot-init)</p><p><strong>模板功能</strong></p><ul><li>Spring Boot 2.7.0（贼新）</li><li>Spring MVC</li><li>MySQL 驱动</li><li>MyBatis</li><li>MyBatis Plus</li><li>Spring Session Redis 分布式登录</li><li>Spring AOP</li><li>Apache Commons Lang3 工具类</li><li>Lombok 注解</li><li>Swagger + Knife4j 接口文档</li><li>Spring Boot 调试工具和项目处理器</li><li>全局请求响应拦截器（记录日志）</li><li>全局异常处理器</li><li>自定义错误码</li><li>封装通用响应类</li><li>示例用户注册、登录、搜索功能</li><li>示例单元测试类</li><li>示例 SQL（用户表）</li></ul><p>需要更改yaml文件中的MySQL、Redis的配置</p><p>访问 localhost:7529&#x2F;api&#x2F;doc.html 就能在线调试接口了，不需要前端配合啦~</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230112141458799.png" alt="image-20230112141458799"></p><h3 id="2、数据库设计"><a href="#2、数据库设计" class="headerlink" title="2、数据库设计"></a>2、数据库设计</h3><hr><p><strong>基本结构</strong></p><ul><li>id 用户id</li><li>name 名称</li><li>description 描述</li><li>url 接口地址</li><li>request_header 请求头</li><li>reponse_header 响应头</li><li>status 接口状态（0-关闭 1-开启）</li><li>method 请求类型</li><li>user_id 创建人</li><li>create_time 创建时间</li><li>update_time 更新时间</li><li>is_delete  逻辑删除 （0-未删 ，1-已删）</li></ul><p><strong>代码</strong></p><p>可以用鱼皮写的sql生成工具生成一下代码   <a href="https://www.sqlfather.com/">SQL之父</a></p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230112153403987.png" alt="image-20230112153403987"></p><p>填对应的数据，一键生成即可</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> api_platform;</span><br><span class="line"></span><br><span class="line">use api_platform;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 接口信息</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> api_platform.`interface_info`</span><br><span class="line">(</span><br><span class="line">`id` <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span> auto_increment comment <span class="string">&#x27;主键&#x27;</span> <span class="keyword">primary</span> key,</span><br><span class="line">`name` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;名称&#x27;</span>,</span><br><span class="line">`description` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">null</span> comment <span class="string">&#x27;描述&#x27;</span>,</span><br><span class="line">`url` <span class="type">varchar</span>(<span class="number">512</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;接口地址&#x27;</span>,</span><br><span class="line">`request_header` text <span class="keyword">null</span> comment <span class="string">&#x27;请求头&#x27;</span>,</span><br><span class="line">`response_header` text <span class="keyword">null</span> comment <span class="string">&#x27;响应头&#x27;</span>,</span><br><span class="line">`status` <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;接口状态（0-关闭，1-开启）&#x27;</span>,</span><br><span class="line">`<span class="keyword">method</span>` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;请求类型&#x27;</span>,</span><br><span class="line">`user_id` <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">`create_time` datetime <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">`update_time` datetime <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">on</span> <span class="keyword">update</span> <span class="built_in">CURRENT_TIMESTAMP</span> comment <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">`is_deleted` tinyint <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;是否删除(0-未删, 1-已删)&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;接口信息&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> api_platform.`interface_info` (`name`, `description`, `url`, `request_header`, `response_header`, `status`, `<span class="keyword">method</span>`, `user_id`) <span class="keyword">values</span> (<span class="string">&#x27;廖立轩&#x27;</span>, <span class="string">&#x27;脱颖而出&#x27;</span>, <span class="string">&#x27;www.foster-larkin.co&#x27;</span>, <span class="string">&#x27;龙嘉懿&#x27;</span>, <span class="string">&#x27;秦天磊&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;GET&#x27;</span>, <span class="number">1718083101</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> api_platform.`interface_info` (`name`, `description`, `url`, `request_header`, `response_header`, `status`, `<span class="keyword">method</span>`, `user_id`) <span class="keyword">values</span> (<span class="string">&#x27;曹明辉&#x27;</span>, <span class="string">&#x27;举一反三&#x27;</span>, <span class="string">&#x27;www.tony-kiehn.com&#x27;</span>, <span class="string">&#x27;任擎苍&#x27;</span>, <span class="string">&#x27;陈凯瑞&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;GET&#x27;</span>, <span class="number">28978</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> api_platform.`interface_info` (`name`, `description`, `url`, `request_header`, `response_header`, `status`, `<span class="keyword">method</span>`, `user_id`) <span class="keyword">values</span> (<span class="string">&#x27;金乐驹&#x27;</span>, <span class="string">&#x27;首当其冲&#x27;</span>, <span class="string">&#x27;www.coleen-prosacco.net&#x27;</span>, <span class="string">&#x27;毛浩&#x27;</span>, <span class="string">&#x27;陆致远&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;GET&#x27;</span>, <span class="number">208</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> api_platform.`interface_info` (`name`, `description`, `url`, `request_header`, `response_header`, `status`, `<span class="keyword">method</span>`, `user_id`) <span class="keyword">values</span> (<span class="string">&#x27;廖思&#x27;</span>, <span class="string">&#x27;来之不易&#x27;</span>, <span class="string">&#x27;www.don-sipes.net&#x27;</span>, <span class="string">&#x27;梁彬&#x27;</span>, <span class="string">&#x27;白君浩&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;GET&#x27;</span>, <span class="number">470</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> api_platform.`interface_info` (`name`, `description`, `url`, `request_header`, `response_header`, `status`, `<span class="keyword">method</span>`, `user_id`) <span class="keyword">values</span> (<span class="string">&#x27;董煜祺&#x27;</span>, <span class="string">&#x27;长治久安&#x27;</span>, <span class="string">&#x27;www.terry-turner.co&#x27;</span>, <span class="string">&#x27;覃绍齐&#x27;</span>, <span class="string">&#x27;胡雪松&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;GET&#x27;</span>, <span class="number">611007</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> api_platform.`interface_info` (`name`, `description`, `url`, `request_header`, `response_header`, `status`, `<span class="keyword">method</span>`, `user_id`) <span class="keyword">values</span> (<span class="string">&#x27;侯聪健&#x27;</span>, <span class="string">&#x27;精心设计&#x27;</span>, <span class="string">&#x27;www.augustus-yost.info&#x27;</span>, <span class="string">&#x27;傅鸿煊&#x27;</span>, <span class="string">&#x27;潘鹏飞&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;GET&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> api_platform.`interface_info` (`name`, `description`, `url`, `request_header`, `response_header`, `status`, `<span class="keyword">method</span>`, `user_id`) <span class="keyword">values</span> (<span class="string">&#x27;魏弘文&#x27;</span>, <span class="string">&#x27;玩忽职守&#x27;</span>, <span class="string">&#x27;www.guadalupe-beatty.biz&#x27;</span>, <span class="string">&#x27;江梓晨&#x27;</span>, <span class="string">&#x27;魏思淼&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;GET&#x27;</span>, <span class="number">1162536022</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> api_platform.`interface_info` (`name`, `description`, `url`, `request_header`, `response_header`, `status`, `<span class="keyword">method</span>`, `user_id`) <span class="keyword">values</span> (<span class="string">&#x27;于苑博&#x27;</span>, <span class="string">&#x27;各式各样&#x27;</span>, <span class="string">&#x27;www.nolan-metz.net&#x27;</span>, <span class="string">&#x27;韦果&#x27;</span>, <span class="string">&#x27;金胤祥&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;GET&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> api_platform.`interface_info` (`name`, `description`, `url`, `request_header`, `response_header`, `status`, `<span class="keyword">method</span>`, `user_id`) <span class="keyword">values</span> (<span class="string">&#x27;姚炫明&#x27;</span>, <span class="string">&#x27;翻天覆地&#x27;</span>, <span class="string">&#x27;www.jodie-schultz.info&#x27;</span>, <span class="string">&#x27;许越彬&#x27;</span>, <span class="string">&#x27;毛晋鹏&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;GET&#x27;</span>, <span class="number">973</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> api_platform.`interface_info` (`name`, `description`, `url`, `request_header`, `response_header`, `status`, `<span class="keyword">method</span>`, `user_id`) <span class="keyword">values</span> (<span class="string">&#x27;孙鑫鹏&#x27;</span>, <span class="string">&#x27;络绎不绝&#x27;</span>, <span class="string">&#x27;www.liza-sporer.co&#x27;</span>, <span class="string">&#x27;孙彬&#x27;</span>, <span class="string">&#x27;傅鸿煊&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;GET&#x27;</span>, <span class="number">30308</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> api_platform.`interface_info` (`name`, `description`, `url`, `request_header`, `response_header`, `status`, `<span class="keyword">method</span>`, `user_id`) <span class="keyword">values</span> (<span class="string">&#x27;唐展鹏&#x27;</span>, <span class="string">&#x27;铤而走险&#x27;</span>, <span class="string">&#x27;www.hayden-purdy.co&#x27;</span>, <span class="string">&#x27;杨哲瀚&#x27;</span>, <span class="string">&#x27;陆凯瑞&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;GET&#x27;</span>, <span class="number">473462835</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> api_platform.`interface_info` (`name`, `description`, `url`, `request_header`, `response_header`, `status`, `<span class="keyword">method</span>`, `user_id`) <span class="keyword">values</span> (<span class="string">&#x27;曹擎苍&#x27;</span>, <span class="string">&#x27;赞不绝口&#x27;</span>, <span class="string">&#x27;www.phung-glover.org&#x27;</span>, <span class="string">&#x27;邱志泽&#x27;</span>, <span class="string">&#x27;张健雄&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;GET&#x27;</span>, <span class="number">32155653</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> api_platform.`interface_info` (`name`, `description`, `url`, `request_header`, `response_header`, `status`, `<span class="keyword">method</span>`, `user_id`) <span class="keyword">values</span> (<span class="string">&#x27;夏烨霖&#x27;</span>, <span class="string">&#x27;哭笑不得&#x27;</span>, <span class="string">&#x27;www.augustine-funk.org&#x27;</span>, <span class="string">&#x27;宋聪健&#x27;</span>, <span class="string">&#x27;郝鹏涛&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;GET&#x27;</span>, <span class="number">3964</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> api_platform.`interface_info` (`name`, `description`, `url`, `request_header`, `response_header`, `status`, `<span class="keyword">method</span>`, `user_id`) <span class="keyword">values</span> (<span class="string">&#x27;董浩&#x27;</span>, <span class="string">&#x27;对症下药&#x27;</span>, <span class="string">&#x27;www.erik-hamill.biz&#x27;</span>, <span class="string">&#x27;黎立果&#x27;</span>, <span class="string">&#x27;廖鹤轩&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;GET&#x27;</span>, <span class="number">2275</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> api_platform.`interface_info` (`name`, `description`, `url`, `request_header`, `response_header`, `status`, `<span class="keyword">method</span>`, `user_id`) <span class="keyword">values</span> (<span class="string">&#x27;罗荣轩&#x27;</span>, <span class="string">&#x27;喜闻乐见&#x27;</span>, <span class="string">&#x27;www.gia-hermann.biz&#x27;</span>, <span class="string">&#x27;韩煜城&#x27;</span>, <span class="string">&#x27;阎耀杰&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;GET&#x27;</span>, <span class="number">847</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> api_platform.`interface_info` (`name`, `description`, `url`, `request_header`, `response_header`, `status`, `<span class="keyword">method</span>`, `user_id`) <span class="keyword">values</span> (<span class="string">&#x27;沈正豪&#x27;</span>, <span class="string">&#x27;统筹兼顾&#x27;</span>, <span class="string">&#x27;www.isabella-reinger.io&#x27;</span>, <span class="string">&#x27;邓子轩&#x27;</span>, <span class="string">&#x27;廖伟诚&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;GET&#x27;</span>, <span class="number">997378602</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> api_platform.`interface_info` (`name`, `description`, `url`, `request_header`, `response_header`, `status`, `<span class="keyword">method</span>`, `user_id`) <span class="keyword">values</span> (<span class="string">&#x27;任立果&#x27;</span>, <span class="string">&#x27;出人意料&#x27;</span>, <span class="string">&#x27;www.geoffrey-koss.name&#x27;</span>, <span class="string">&#x27;覃浩然&#x27;</span>, <span class="string">&#x27;萧雨泽&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;GET&#x27;</span>, <span class="number">403</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> api_platform.`interface_info` (`name`, `description`, `url`, `request_header`, `response_header`, `status`, `<span class="keyword">method</span>`, `user_id`) <span class="keyword">values</span> (<span class="string">&#x27;张炫明&#x27;</span>, <span class="string">&#x27;名不虚传&#x27;</span>, <span class="string">&#x27;www.ellan-gleason.com&#x27;</span>, <span class="string">&#x27;黎正豪&#x27;</span>, <span class="string">&#x27;韦炎彬&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;GET&#x27;</span>, <span class="number">35127293</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> api_platform.`interface_info` (`name`, `description`, `url`, `request_header`, `response_header`, `status`, `<span class="keyword">method</span>`, `user_id`) <span class="keyword">values</span> (<span class="string">&#x27;方雨泽&#x27;</span>, <span class="string">&#x27;衣食住行&#x27;</span>, <span class="string">&#x27;www.wilton-walsh.biz&#x27;</span>, <span class="string">&#x27;黎越泽&#x27;</span>, <span class="string">&#x27;白远航&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;GET&#x27;</span>, <span class="number">62264</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> api_platform.`interface_info` (`name`, `description`, `url`, `request_header`, `response_header`, `status`, `<span class="keyword">method</span>`, `user_id`) <span class="keyword">values</span> (<span class="string">&#x27;袁天翊&#x27;</span>, <span class="string">&#x27;卷土重来&#x27;</span>, <span class="string">&#x27;www.lynetta-mclaughlin.info&#x27;</span>, <span class="string">&#x27;邹熠彤&#x27;</span>, <span class="string">&#x27;叶潇然&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;GET&#x27;</span>, <span class="number">9884455</span>);</span><br></pre></td></tr></table></figure><p>运行即可</p><h3 id="3、使用MabatisX插件"><a href="#3、使用MabatisX插件" class="headerlink" title="3、使用MabatisX插件"></a>3、使用MabatisX插件</h3><p>生成domain、mapper、service</p><p>打开新建的表，右击选择MybatisX-Generator</p><p>勾上驼峰</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230112155202934.png" alt="image-20230112155202934"></p><p>根据<strong>版本跟需要打勾</strong>，点击完成</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230112161220300.png" alt="image-20230112161220300"></p><p>查看目录</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230112161257033.png" alt="image-20230112161257033"></p><p>然后将它们放到我自己的路径下</p><h3 id="4、Controller"><a href="#4、Controller" class="headerlink" title="4、Controller"></a>4、Controller</h3><p>接下来到controller层</p><blockquote><p>我们只需要将<strong>PostController</strong>复制一份改名为<strong>InterfaceInfoController</strong>即可,因为逻辑是差不多，都是进行增删改查</p></blockquote><p>然后将post改成interfaceInfo、Post改成InterfaceInfo</p><p>根据报错信息我们来补充信息</p><h3 id="5、DTO"><a href="#5、DTO" class="headerlink" title="5、DTO"></a>5、DTO</h3><p>首先先增加DTO，在InterfaceInfo类从拿我们需要的信息做成三个DTO类（分别是新增、查询、更新）删除的请求我们封装在common包下</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230112184904561.png" alt="image-20230112184904561"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuan.project.model.dto.interfaceinfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建请求</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xuan</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceInfoAddRequest</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、Service"><a href="#6、Service" class="headerlink" title="6、Service"></a>6、Service</h3><p>根据报错可知 service层缺少一个方法validInterfaceInfo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 针对表【interface_info(接口信息)】的数据库操作Service实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> 2023-01-12 16:11:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceInfoServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;InterfaceInfoMapper, InterfaceInfo&gt;</span><br><span class="line"><span class="keyword">implements</span> <span class="title class_">InterfaceInfoService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">validInterfaceInfo</span><span class="params">(InterfaceInfo interfaceInfo, <span class="type">boolean</span> add)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (interfaceInfo == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> interfaceInfo.getName();</span><br><span class="line"><span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> interfaceInfo.getDescription();</span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> interfaceInfo.getUrl();</span><br><span class="line"><span class="type">String</span> <span class="variable">requestHeader</span> <span class="operator">=</span> interfaceInfo.getRequestHeader();</span><br><span class="line"><span class="type">String</span> <span class="variable">responseHeader</span> <span class="operator">=</span> interfaceInfo.getResponseHeader();</span><br><span class="line"><span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> interfaceInfo.getStatus();</span><br><span class="line"><span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> interfaceInfo.getMethod();</span><br><span class="line"><span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> interfaceInfo.getUserId();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建时，所有参数必须非空</span></span><br><span class="line"><span class="keyword">if</span> (add) &#123;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isAnyBlank(name, description, url, requestHeader, responseHeader, method) || ObjectUtils.anyNull(userId, status)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(name) &amp;&amp; name.length() &gt; <span class="number">256</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR, <span class="string">&quot;名字过长&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(description) &amp;&amp; description.length() &gt; <span class="number">512</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR, <span class="string">&quot;描述过长&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的大量getter 是使用插件 <strong>GenerateAllSetter</strong> 生成 macOS在变量上摁住 option + Enter  即可</p><h2 id="3、前端"><a href="#3、前端" class="headerlink" title="3、前端"></a>3、前端</h2><hr><h3 id="1、配置插件"><a href="#1、配置插件" class="headerlink" title="1、配置插件"></a>1、配置插件</h3><p>为了项目更加规范</p><blockquote><p>搜索 <strong>eslint</strong> 选上自动识别</p></blockquote><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230112193957977.png" alt="image-20230112193957977"></p><blockquote><p>搜索<strong>prettier</strong> 打√  美化代码</p></blockquote><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230112194107217.png" alt="image-20230112194107217"></p><h3 id="2、接口调用"><a href="#2、接口调用" class="headerlink" title="2、接口调用"></a>2、接口调用</h3><p>使用 <strong>oneapi</strong> 插件自动生成</p><p>如果要前端自动生成，需要将后端的遵循<strong>openapi</strong>规范的<strong>json</strong>文档 </p><blockquote><p>后端的遵循<strong>openapi</strong>规范的<strong>json</strong>文档 </p></blockquote><p>找到我们起的后端主页</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230112195321863.png" alt="image-20230112195321863"></p><p>在地址栏输入<a href="http://localhost:7529/api/v3/api-docs">http://localhost:7529/api/v3/api-docs</a></p><p>发现如下所示</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230112195351679.png" alt="image-20230112195351679"></p><p>那么我们就可以使用这个url了</p><p>打开config目录下<strong>config.ts</strong> 找到<strong>openApi</strong> 修改如下</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">openAPI</span>: [</span><br><span class="line">  <span class="comment">// &#123;</span></span><br><span class="line">  <span class="comment">//   requestLibPath: &quot;import &#123; request &#125; from &#x27;@umijs/max&#x27;&quot;,</span></span><br><span class="line">  <span class="comment">//   // 或者使用在线的版本</span></span><br><span class="line">  <span class="comment">//   // schemaPath: &quot;https://gw.alipayobjects.com/os/antfincdn/M%24jrzTTYJN/oneapi.json&quot;</span></span><br><span class="line">  <span class="comment">//   schemaPath: join(__dirname, &#x27;oneapi.json&#x27;),</span></span><br><span class="line">  <span class="comment">//   mock: false,</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">requestLibPath</span>: <span class="string">&quot;import &#123; request &#125; from &#x27;@umijs/max&#x27;&quot;</span>,</span><br><span class="line">    <span class="attr">schemaPath</span>: <span class="string">&#x27;http://localhost:7529/api/v3/api-docs&#x27;</span>,</span><br><span class="line">    <span class="attr">projectName</span>: <span class="string">&#x27;api-platform-backend&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>测试一下是否能用</p><blockquote><p>找到<strong>package.json</strong>,执行<strong>openapi</strong>命令</p></blockquote><p>执行成功，我们去<strong>service</strong>看一下</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230112195813202.png" alt="image-20230112195813202"></p><p>由于我们有后端 ，应请求真实环境，所以直接用<strong>dev模式</strong>运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run start:dev</span><br></pre></td></tr></table></figure><p>可以将项目中的<strong>requestErrorConfig.ts</strong>改为<strong>requestConfig.ts</strong></p><p>然后在<strong>app.tsx</strong> 找到 request配置，将其修改成我们改的</p><p>再打开<strong>requestConfig.ts</strong></p><p>修改名字，并设置一下后端地址</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230112200749537.png" alt="image-20230112200749537"></p><p><strong>测试一下</strong></p><p>使用它提示账户密码登录，失败了</p><p>我们查看一下发现是<strong>前后端接口定义不一致</strong></p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230112201646377.png" alt="image-20230112201646377"></p><h3 id="3、修改登录的接口"><a href="#3、修改登录的接口" class="headerlink" title="3、修改登录的接口"></a>3、修改登录的接口</h3><p>找到<strong>src&#x2F;pages&#x2F;User&#x2F;Login&#x2F;index.tsx</strong>下的<strong>handleSubmit</strong></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handleSubmit</span> = <span class="keyword">async</span> (<span class="params">values: API.UserLoginRequest</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 登录</span></span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">userLoginUsingPOST</span>(&#123; ...values &#125;);</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">data</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> urlParams = <span class="keyword">new</span> <span class="title function_">URL</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>).<span class="property">searchParams</span>;</span><br><span class="line">      history.<span class="title function_">push</span>(urlParams.<span class="title function_">get</span>(<span class="string">&#x27;redirect&#x27;</span>) || <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">const</span> defaultLoginFailureMessage = intl.<span class="title function_">formatMessage</span>(&#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="string">&#x27;pages.login.failure&#x27;</span>,</span><br><span class="line">      <span class="attr">defaultMessage</span>: <span class="string">&#x27;登录失败，请重试！&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    message.<span class="title function_">error</span>(defaultLoginFailureMessage);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>修改用户名和密码的字段和我们后端一样</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">ProFormText</span></span><br><span class="line">  name=<span class="string">&quot;userAccount&quot;</span></span><br><span class="line">  fieldProps=&#123;&#123;</span><br><span class="line">    <span class="attr">size</span>: <span class="string">&#x27;large&#x27;</span>,</span><br><span class="line">      <span class="attr">prefix</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">UserOutlined</span> /&gt;</span></span>,</span><br><span class="line">  &#125;&#125;</span><br><span class="line">  placeholder=&#123;intl.<span class="title function_">formatMessage</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;pages.login.username.placeholder&#x27;</span>,</span><br><span class="line">    <span class="attr">defaultMessage</span>: <span class="string">&#x27;用户名: admin or user&#x27;</span>,</span><br><span class="line">  &#125;)&#125;</span><br><span class="line">  rules=&#123;[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">message</span>: (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">FormattedMessage</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">id</span>=<span class="string">&quot;pages.login.username.required&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">defaultMessage</span>=<span class="string">&quot;请输入用户名!&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span></span></span><br><span class="line">      ),</span><br><span class="line">    &#125;,</span><br><span class="line">  ]&#125;</span><br><span class="line">  /&gt;</span><br></pre></td></tr></table></figure><p>返回登录页面，进行登录</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230112202314036.png" alt="image-20230112202314036"></p><p>请求成功但是没跳转</p><p>为什么没跳转？因为我们没有记录用户的<strong>登录态</strong>，不知道它是否登录成功</p><p><strong>设置用户的登录态</strong></p><p>回到<strong>app.tsx</strong></p><p>找到**getInitialState()**这个方法</p><p>这个方法当我们首次访问页面的时候，获取用户的信息，获取当前全局的一些状态，可以把它当成全局变量</p><p>我们先找到<strong>typings.d.ts</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最后面添加</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局状态类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">InitialState</span> &#123;</span><br><span class="line">  loginUser?: <span class="variable constant_">API</span>.<span class="property">UserVO</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回**getInitialState()**将它改为</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getInitialState</span>(<span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="title class_">InitialState</span>&gt; &#123;</span><br><span class="line">  <span class="comment">// 当页面首次加载时，获取要全局保存的信息比如用户信息</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">state</span>: <span class="title class_">InitialState</span> = &#123;</span><br><span class="line">    <span class="attr">loginUser</span>: <span class="literal">undefined</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">getLoginUserUsingGET</span>();</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">data</span>) &#123;</span><br><span class="line">      state.<span class="property">loginUser</span> = res.<span class="property">data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    history.<span class="title function_">push</span>(loginPath);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回<strong>src&#x2F;pages&#x2F;User&#x2F;Login&#x2F;index.tsx</strong>下的<strong>handleSubmit</strong></p><p>设置登录状态</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handleSubmit</span> = <span class="keyword">async</span> (<span class="params">values: API.UserLoginRequest</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 登录</span></span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">userLoginUsingPOST</span>(&#123; ...values &#125;);</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">data</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> urlParams = <span class="keyword">new</span> <span class="title function_">URL</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>).<span class="property">searchParams</span>;</span><br><span class="line">      history.<span class="title function_">push</span>(urlParams.<span class="title function_">get</span>(<span class="string">&#x27;redirect&#x27;</span>) || <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">      <span class="title function_">setInitialState</span>(&#123;</span><br><span class="line">        <span class="attr">loginUser</span>: res.<span class="property">data</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">const</span> defaultLoginFailureMessage = intl.<span class="title function_">formatMessage</span>(&#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="string">&#x27;pages.login.failure&#x27;</span>,</span><br><span class="line">      <span class="attr">defaultMessage</span>: <span class="string">&#x27;登录失败，请重试！&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    message.<span class="title function_">error</span>(defaultLoginFailureMessage);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>测试</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230113103454564.png" alt="image-20230113103454564"></p><p>成功进入</p><p><strong>But， 有bug，我们刷新一下发现又要重新登录，这是为什么呢？</strong></p><p>我们推测是前端向后端发送请求的时候没有带上<strong>cookie</strong>！！！</p><p>找到<strong>requestConfig.ts</strong></p><p>添加</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">withCredentials</span>: <span class="literal">true</span>,</span><br></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">requestConfig</span>: <span class="title class_">RequestConfig</span> = &#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;http://localhost:7529&#x27;</span>,</span><br><span class="line">  <span class="attr">withCredentials</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刷新测试一下 问题解决</p><h3 id="4、注销"><a href="#4、注销" class="headerlink" title="4、注销"></a>4、注销</h3><p>和登录差不多，同理</p><p>全局搜索logout</p><p>发现在<strong>src&#x2F;components&#x2F;RightContent&#x2F;AvatarDropdown.tsx</strong>中有loginOut() 将其改成我们的后端方法</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> onMenuClick = <span class="title function_">useCallback</span>(</span><br><span class="line">  <span class="function">(<span class="params">event: MenuInfo</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; key &#125; = event;</span><br><span class="line">    <span class="keyword">if</span> (key === <span class="string">&#x27;logout&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">flushSync</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setInitialState</span>(<span class="function">(<span class="params">s</span>) =&gt;</span> (&#123; ...s, <span class="attr">currentUser</span>: <span class="literal">undefined</span> &#125;));</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="title function_">userLogoutUsingPOST</span>()</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    history.<span class="title function_">push</span>(<span class="string">`/account/<span class="subst">$&#123;key&#125;</span>`</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  [setInitialState],</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>自动生成的好处</strong></p><p>如果我们后端的实体类修改了,我们可以直接运行 <strong>openapi</strong> 来直接更新</p><h3 id="5、管理权限"><a href="#5、管理权限" class="headerlink" title="5、管理权限"></a>5、管理权限</h3><p>是否为管理员</p><p>打开<strong>access.ts</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> https://umijs.org/zh-CN/plugins/plugin-access</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">access</span>(<span class="params">initialState: &#123; currentUser?: API.CurrentUser &#125; | <span class="literal">undefined</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; currentUser &#125; = initialState ?? &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">canAdmin</span>: currentUser &amp;&amp; currentUser.<span class="property">access</span> === <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">将canAdmin改成</span><br><span class="line"><span class="attr">canAdmin</span>: <span class="literal">true</span>,</span><br></pre></td></tr></table></figure><p>发现前端管理界面出来了，所以逻辑就是在这里控制的</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230113104939414.png" alt="image-20230113104939414"></p><p>所以代码修改如下</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">access</span>(<span class="params">initialState: InitialState | <span class="literal">undefined</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; loginUser &#125; = initialState ?? &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">canUser</span>: loginUser,</span><br><span class="line">    <span class="attr">canAdmin</span>: loginUser?.<span class="property">userRole</span> === <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、表格页面"><a href="#6、表格页面" class="headerlink" title="6、表格页面"></a>6、表格页面</h3><p>找到<strong>src&#x2F;pages&#x2F;TableList&#x2F;index.tsx</strong>  </p><p>找到<strong>columns</strong></p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230113112228199.png" alt="image-20230113112228199"></p><p>换成我们自己的</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">columns</span>: <span class="title class_">ProColumns</span>&lt;<span class="variable constant_">API</span>.<span class="property">InterfaceInfo</span>&gt;[] = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">      <span class="attr">dataIndex</span>: <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">      <span class="attr">valueType</span>: <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;接口名称&#x27;</span>,</span><br><span class="line">      <span class="attr">dataIndex</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">      <span class="attr">valueType</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;描述&#x27;</span>,</span><br><span class="line">      <span class="attr">dataIndex</span>: <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">      <span class="attr">valueType</span>: <span class="string">&#x27;textarea&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;请求方法&#x27;</span>,</span><br><span class="line">      <span class="attr">dataIndex</span>: <span class="string">&#x27;method&#x27;</span>,</span><br><span class="line">      <span class="attr">valueType</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;url&#x27;</span>,</span><br><span class="line">      <span class="attr">dataIndex</span>: <span class="string">&#x27;url&#x27;</span>,</span><br><span class="line">      <span class="attr">valueType</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;请求头&#x27;</span>,</span><br><span class="line">      <span class="attr">dataIndex</span>: <span class="string">&#x27;requestHeader&#x27;</span>,</span><br><span class="line">      <span class="attr">valueType</span>: <span class="string">&#x27;textarea&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;响应头&#x27;</span>,</span><br><span class="line">      <span class="attr">dataIndex</span>: <span class="string">&#x27;responseHeader&#x27;</span>,</span><br><span class="line">      <span class="attr">valueType</span>: <span class="string">&#x27;textarea&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;状态&#x27;</span>,</span><br><span class="line">      <span class="attr">dataIndex</span>: <span class="string">&#x27;status&#x27;</span>,</span><br><span class="line">      <span class="attr">hideInForm</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">valueEnum</span>: &#123;</span><br><span class="line">        <span class="number">0</span>: &#123;</span><br><span class="line">          <span class="attr">text</span>: <span class="string">&#x27;关闭&#x27;</span>,</span><br><span class="line">          <span class="attr">status</span>: <span class="string">&#x27;Default&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="number">1</span>: &#123;</span><br><span class="line">          <span class="attr">text</span>: <span class="string">&#x27;开启&#x27;</span>,</span><br><span class="line">          <span class="attr">status</span>: <span class="string">&#x27;Processing&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">      <span class="attr">dataIndex</span>: <span class="string">&#x27;createTime&#x27;</span>,</span><br><span class="line">      <span class="attr">valueType</span>: <span class="string">&#x27;dateTime&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">      <span class="attr">dataIndex</span>: <span class="string">&#x27;updateTime&#x27;</span>,</span><br><span class="line">      <span class="attr">valueType</span>: <span class="string">&#x27;dateTime&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;操作&#x27;</span>,</span><br><span class="line">      <span class="attr">dataIndex</span>: <span class="string">&#x27;option&#x27;</span>,</span><br><span class="line">      <span class="attr">valueType</span>: <span class="string">&#x27;option&#x27;</span>,</span><br><span class="line">      <span class="attr">render</span>: <span class="function">(<span class="params">_, record</span>) =&gt;</span> [</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">key</span>=<span class="string">&quot;config&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">            handleUpdateModalVisible(true);</span></span><br><span class="line"><span class="language-xml">            setCurrentRow(record);</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        &gt;</span></span><br><span class="line"><span class="language-xml">          配置</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>,</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">key</span>=<span class="string">&quot;subscribeAlert&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://procomponents.ant.design/&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          订阅警报</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  ];</span><br></pre></td></tr></table></figure><p>加载出来了</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230113113509859.png" alt="image-20230113113509859"></p><p>但是没有数据，我们需要让它有数据</p><p>向下找，发现有一个<strong>request</strong>我们需要将他改成自己的listInterfaceInfoByPageUsingGET 这样就有数据了</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230113113932612.png" alt="image-20230113113932612"></p><p>刷新查看页面</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230113114748766.png" alt="image-20230113114748766"></p><p>无法加载，但是我们发现数据已经有了</p><p>对于这种错误，我们需要检查</p><ul><li>你的请求参数和他的请求参数是否一致</li><li>你的响应值和他要求的响应值是否一致</li></ul><p>所以我们不能完全替换</p><p>查看<strong>request</strong>的请求参数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">request?: <span class="function">(<span class="params">params: U &amp; &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  pageSize?: <span class="built_in">number</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">  current?: <span class="built_in">number</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">  keyword?: <span class="built_in">string</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;, sort: Record&lt;<span class="built_in">string</span>, SortOrder&gt;, filter: Record&lt;<span class="built_in">string</span>, React.ReactText[] | <span class="literal">null</span>&gt;</span>) =&gt;</span> <span class="title class_">Promise</span>&lt;<span class="title class_">Partial</span>&lt;<span class="title class_">RequestData</span>&lt;T&gt;&gt;&gt;;</span><br></pre></td></tr></table></figure><p>在<strong>request</strong>在点击<strong>RequestData</strong> 查看响应参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export type RequestData&lt;T&gt; = &#123;</span><br><span class="line">    data: T[] | undefined;</span><br><span class="line">    success?: boolean;</span><br><span class="line">    total?: number;</span><br><span class="line">&#125; &amp; Record&lt;string, any&gt;;</span><br></pre></td></tr></table></figure><p>所以刚刚简单替换请求方法的代码我们重新写</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">request=&#123;<span class="keyword">async</span> (</span><br><span class="line">      <span class="attr">params</span>: &#123;</span><br><span class="line">      pageSize?: <span class="built_in">number</span>;</span><br><span class="line">      current?: <span class="built_in">number</span>;</span><br><span class="line">      keyword?: <span class="built_in">string</span>;</span><br><span class="line">     &#125;, <span class="attr">sort</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="title class_">SortOrder</span>&gt;,  <span class="attr">filter</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="title class_">React</span>.<span class="property">ReactText</span>[] | <span class="literal">null</span>&gt;,) =&gt; &#123;</span><br><span class="line">       <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">listInterfaceInfoByPageUsingGET</span>(&#123; ...params &#125;);</span><br><span class="line">       <span class="keyword">if</span> (res.<span class="property">data</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> &#123;</span><br><span class="line">           <span class="attr">data</span>: res.<span class="property">data</span>.<span class="property">records</span> || [],</span><br><span class="line">           <span class="attr">success</span>: <span class="literal">true</span>,</span><br><span class="line">           <span class="attr">total</span>: res.<span class="property">data</span>.<span class="property">total</span>,</span><br><span class="line">         &#125;;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> &#123;</span><br><span class="line">           <span class="attr">data</span>: [],</span><br><span class="line">           <span class="attr">success</span>: <span class="literal">false</span>,</span><br><span class="line">           <span class="attr">total</span>: <span class="number">0</span>,</span><br><span class="line">         &#125;;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;&#125;</span><br></pre></td></tr></table></figure><p>刷新页面，显示成功</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230113121556718.png" alt="image-20230113121556718"></p><h1 id="二、基础增删改查"><a href="#二、基础增删改查" class="headerlink" title="二、基础增删改查"></a>二、基础增删改查</h1><hr><h2 id="1、修改路由"><a href="#1、修改路由" class="headerlink" title="1、修改路由"></a>1、修改路由</h2><hr><p>打开<strong>config</strong>包找到 <strong>routes.ts</strong></p><p>将原来pages下的<strong>TableList</strong>表单名称改为我们的<strong>interfaceInfo</strong>，再把接口管理页面配置到管理员页面下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;接口管理&#x27;</span>,</span><br><span class="line">  <span class="attr">icon</span>: <span class="string">&#x27;table&#x27;</span>,</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/admin/interface_info&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="string">&#x27;./InterfaceInfo&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line">    <span class="attr">layout</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/user/login&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="string">&#x27;./User/Login&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/welcome&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;welcome&#x27;</span>,</span><br><span class="line">    <span class="attr">icon</span>: <span class="string">&#x27;smile&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="string">&#x27;./Welcome&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/admin&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    <span class="attr">icon</span>: <span class="string">&#x27;crown&#x27;</span>,</span><br><span class="line">    <span class="attr">access</span>: <span class="string">&#x27;canAdmin&#x27;</span>,</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/admin&#x27;</span>,</span><br><span class="line">        <span class="attr">redirect</span>: <span class="string">&#x27;/admin/sub-page&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/admin/sub-page&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;sub-page&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="string">&#x27;./Admin&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;接口管理&#x27;</span>,</span><br><span class="line">        <span class="attr">icon</span>: <span class="string">&#x27;table&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/admin/interface_info&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="string">&#x27;./InterfaceInfo&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/welcome&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">    <span class="attr">layout</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="string">&#x27;./404&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230113145422228.png" alt="image-20230113145422228"></p><h2 id="2、新增接口信息"><a href="#2、新增接口信息" class="headerlink" title="2、新增接口信息"></a>2、新增接口信息</h2><hr><h3 id="1）表单模块"><a href="#1）表单模块" class="headerlink" title="1）表单模块"></a>1）表单模块</h3><p><strong>interfaceInfo</strong>中的<strong>index.tsx</strong>找到新建的Button</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230113153334776.png" alt="image-20230113153334776"></p><p>我们点击新建的时候，他会打开一个模态框。往下找，发现它已经给我们提供了这个组件。但是我们需要重新写</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230113153512970.png" alt="image-20230113153512970"></p><p>我们可以就像更新模态框一样新建一个CreateModal.tsx</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230113153639726.png" alt="image-20230113153639726"></p><p>接下来修改从UpdateForm中粘贴的<strong>CreateModal.tsx</strong>的代码</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Modal</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ProColumns</span>, <span class="title class_">ProTable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@ant-design/pro-components&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@umijs/max&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">Props</span> = &#123;</span><br><span class="line">  <span class="attr">columns</span>: <span class="title class_">ProColumns</span>&lt;<span class="variable constant_">API</span>.<span class="property">InterfaceInfo</span>&gt;[];</span><br><span class="line">  <span class="attr">onCancel</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">onSubmit</span>: <span class="function">(<span class="params">values: API.InterfaceInfo</span>) =&gt;</span> <span class="title class_">Promise</span>&lt;<span class="built_in">boolean</span>&gt;;</span><br><span class="line">  <span class="attr">open</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CreateModal</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">Props</span>&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; columns, open, onCancel &#125; = props;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Modal</span> <span class="attr">open</span>=<span class="string">&#123;open&#125;</span> <span class="attr">onCancel</span>=<span class="string">&#123;()</span> =&gt;</span> onCancel?.()&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ProTable</span> <span class="attr">columns</span>=<span class="string">&#123;columns&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Modal</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">CreateModal</span>;</span><br></pre></td></tr></table></figure><p><strong>这里我们复用了index中的columns</strong>  这里我顺便把取消也写了</p><p>在<strong>index.tsx</strong>中使用</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@en</span>-US Pop-up window of new window</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@zh</span>-CN 新建窗口的弹窗</span></span><br><span class="line"><span class="comment">  *  */</span></span><br><span class="line"> <span class="keyword">const</span> [createModalOpen, handleModalOpen] = useState&lt;<span class="built_in">boolean</span>&gt;(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">columns</span>: <span class="title class_">ProColumns</span>&lt;<span class="variable constant_">API</span>.<span class="property">InterfaceInfo</span>&gt;[] = [</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="attr">title</span>: <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">     <span class="attr">dataIndex</span>: <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">     <span class="attr">valueType</span>: <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">   &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"> ]</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&lt;<span class="title class_">CreateModal</span></span><br><span class="line">   columns=&#123;columns&#125;</span><br><span class="line">   onCancel=&#123;<span class="function">() =&gt;</span> <span class="title function_">handleModalOpen</span>(<span class="literal">false</span>)&#125;</span><br><span class="line">   onSubmit=&#123;<span class="function">() =&gt;</span> &#123;&#125;&#125;</span><br><span class="line">   open=&#123;createModalOpen&#125;</span><br><span class="line"> /&gt;</span><br></pre></td></tr></table></figure><p>测试一下</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230113164234500.png" alt="image-20230113164234500"></p><p>emmmm… 这是什么玩意??</p><p>查询官方文档可知，这是ProTable的默认type 所以我们需要给它指定一个form的type</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CreateModal</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">Props</span>&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; columns, open, onCancel &#125; = props;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Modal</span> <span class="attr">open</span>=<span class="string">&#123;open&#125;</span> <span class="attr">onCancel</span>=<span class="string">&#123;()</span> =&gt;</span> onCancel?.()&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ProTable</span> <span class="attr">columns</span>=<span class="string">&#123;columns&#125;</span> <span class="attr">type</span>=<span class="string">&#123;</span>&#x27;<span class="attr">form</span>&#x27;&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Modal</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>再测试一下就正常啦~</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230113164846052.png" alt="image-20230113164846052"></p><p>发现创建时间、更新时间我们并不需要。增加hideInForm属性</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  <span class="attr">dataIndex</span>: <span class="string">&#x27;createTime&#x27;</span>,</span><br><span class="line">  <span class="attr">valueType</span>: <span class="string">&#x27;dateTime&#x27;</span>,</span><br><span class="line">  <span class="attr">hideInForm</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="attr">dataIndex</span>: <span class="string">&#x27;updateTime&#x27;</span>,</span><br><span class="line">  <span class="attr">valueType</span>: <span class="string">&#x27;dateTime&#x27;</span>,</span><br><span class="line">  <span class="attr">hideInForm</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="2）请求后端"><a href="#2）请求后端" class="headerlink" title="2）请求后端"></a>2）请求后端</h3><p><strong>先简单处理一下请求报错的情况</strong></p><p>找到src&#x2F;requestConfig.ts 修改一下响应拦截器</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line"><span class="attr">responseInterceptors</span>: [</span><br><span class="line">  <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 拦截响应数据，进行个性化处理</span></span><br><span class="line">    <span class="keyword">const</span> &#123; data &#125; = response <span class="keyword">as</span> <span class="built_in">unknown</span> <span class="keyword">as</span> <span class="title class_">ResponseStructure</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data&#x27;</span>, data);</span><br><span class="line">    <span class="keyword">if</span> (data.<span class="property">code</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(data.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>再在interfaceinfo&#x2F;index.tsx中新增请求后端的方法</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">const</span> <span class="title function_">handleAddInterfaceInfo</span> = <span class="keyword">async</span> (<span class="params">fields: API.InterfaceInfoAddRequest</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> hide = message.<span class="title function_">loading</span>(<span class="string">&#x27;正在添加&#x27;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">addInterfaceInfoUsingPOST</span>(&#123; ...fields &#125;);</span><br><span class="line">      <span class="title function_">hide</span>();</span><br><span class="line">      message.<span class="title function_">success</span>(<span class="string">&#x27;创建成功!&#x27;</span>);</span><br><span class="line">      <span class="comment">// 关闭Modal</span></span><br><span class="line">      <span class="title function_">handleModalOpen</span>(<span class="literal">false</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="attr">error</span>: <span class="built_in">any</span>) &#123;</span><br><span class="line">      <span class="title function_">hide</span>();</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">      message.<span class="title function_">error</span>(<span class="string">&#x27;创建失败!&#x27;</span> + error.<span class="property">message</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">CreateModal</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">columns</span>=<span class="string">&#123;columns&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">onCancel</span>=<span class="string">&#123;()</span> =&gt;</span> handleModalOpen(false)&#125;</span></span><br><span class="line"><span class="language-xml">  onSubmit=&#123;(values) =&gt; handleAddInterfaceInfo(values)&#125;</span></span><br><span class="line"><span class="language-xml">  open=&#123;createModalOpen&#125;</span></span><br><span class="line"><span class="language-xml">  /&gt;</span></span><br></pre></td></tr></table></figure><p>再修改CreateModal.tsx</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CreateModal</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">Props</span>&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; columns, open, onCancel, onSubmit &#125; = props;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Modal</span> <span class="attr">title</span>=<span class="string">&#123;</span>&#x27;<span class="attr">新建接口</span>&#x27;&#125; <span class="attr">open</span>=<span class="string">&#123;open&#125;</span> <span class="attr">onCancel</span>=<span class="string">&#123;()</span> =&gt;</span> onCancel?.()&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ProTable</span> <span class="attr">columns</span>=<span class="string">&#123;columns&#125;</span> <span class="attr">type</span>=<span class="string">&#123;</span>&#x27;<span class="attr">form</span>&#x27;&#125; <span class="attr">onSubmit</span>=<span class="string">&#123;async</span> (<span class="attr">value</span>) =&gt;</span> onSubmit?.(value)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Modal</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>测试添加成功</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230113183349785.png" alt="image-20230113183349785"></p><h2 id="3、编辑接口信息"><a href="#3、编辑接口信息" class="headerlink" title="3、编辑接口信息"></a>3、编辑接口信息</h2><hr><p>先把Modal的footer干掉   footer&#x3D;{null}</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Modal</span> title=&#123;<span class="string">&#x27;更新接口&#x27;</span>&#125; footer=&#123;<span class="literal">null</span>&#125; open=&#123;open&#125; onCancel=&#123;<span class="function">() =&gt;</span> onCancel?.()&#125;&gt;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  );</span><br></pre></td></tr></table></figure><h3 id="1）表单模块-1"><a href="#1）表单模块-1" class="headerlink" title="1）表单模块"></a>1）表单模块</h3><p>新建文件src&#x2F;pages&#x2F;InterfaceInfo&#x2F;components&#x2F;UpdateModal.tsx</p><p>这里使用的useRef、formRef参考了<a href="https://procomponents.ant.design/components/table#%E9%80%9A%E8%BF%87-formref-%E6%9D%A5%E6%93%8D%E4%BD%9C%E6%9F%A5%E8%AF%A2%E8%A1%A8%E5%8D%95">官方文档</a></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Modal</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useEffect, useRef&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ProColumns</span>, <span class="title class_">ProFormInstance</span>, <span class="title class_">ProTable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@ant-design/pro-components&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@umijs/max&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">Props</span> = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="variable constant_">API</span>.<span class="property">InterfaceInfo</span>;</span><br><span class="line">  <span class="attr">columns</span>: <span class="title class_">ProColumns</span>&lt;<span class="variable constant_">API</span>.<span class="property">InterfaceInfoUpdateRequest</span>&gt;[];</span><br><span class="line">  <span class="attr">onCancel</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">onSubmit</span>: <span class="function">(<span class="params">values: API.InterfaceInfoUpdateRequest</span>) =&gt;</span> <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt;;</span><br><span class="line">  <span class="attr">open</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UpdateModal</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">Props</span>&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; value, columns, open, onCancel, onSubmit &#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> formRef = useRef&lt;<span class="title class_">ProFormInstance</span>&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (formRef) &#123;</span><br><span class="line">      formRef.<span class="property">current</span>?.<span class="title function_">setFieldsValue</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [value]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Modal</span> <span class="attr">title</span>=<span class="string">&#123;</span>&#x27;<span class="attr">更新接口</span>&#x27;&#125; <span class="attr">footer</span>=<span class="string">&#123;null&#125;</span> <span class="attr">open</span>=<span class="string">&#123;open&#125;</span> <span class="attr">onCancel</span>=<span class="string">&#123;()</span> =&gt;</span> onCancel?.()&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ProTable</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">columns</span>=<span class="string">&#123;columns&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">formRef</span>=<span class="string">&#123;formRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&#123;</span>&#x27;<span class="attr">form</span>&#x27;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onSubmit</span>=<span class="string">&#123;async</span> (<span class="attr">value</span>) =&gt;</span> onSubmit?.(value)&#125;</span></span><br><span class="line"><span class="language-xml">        // 设置默认值</span></span><br><span class="line"><span class="language-xml">        form=&#123;&#123; initialValues: value &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Modal</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">UpdateModal</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2）请求后端-1"><a href="#2）请求后端-1" class="headerlink" title="2）请求后端"></a>2）请求后端</h3><p>在interfaceinfo&#x2F;index.tsx中新增请求后端的方法</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@en</span>-US Update InterfaceInfo</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@zh</span>-CN 更新接口信息</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">updateValue</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleUpdateInterfaceInfo</span> = <span class="keyword">async</span> (<span class="params">updateValue: API.InterfaceInfoUpdateRequest</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> hide = message.<span class="title function_">loading</span>(<span class="string">&#x27;正在更新&#x27;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">updateInterfaceInfoUsingPOST</span>(&#123; ...updateValue &#125;);</span><br><span class="line">      <span class="keyword">if</span> (res.<span class="property">data</span>) &#123;</span><br><span class="line">        <span class="title function_">hide</span>();</span><br><span class="line">        <span class="title function_">handleUpdateModalOpen</span>(<span class="literal">false</span>);</span><br><span class="line">        message.<span class="title function_">success</span>(<span class="string">&#x27;更新成功!&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="attr">error</span>: <span class="built_in">any</span>) &#123;</span><br><span class="line">      <span class="title function_">hide</span>();</span><br><span class="line">      message.<span class="title function_">error</span>(<span class="string">&#x27;更新失败!&#x27;</span> + error.<span class="property">message</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;      </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的&lt;UpdateModal/&gt;代码是在原有的 &lt;UpdateForm/&gt; 基础上面改的</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">UpdateModal</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;currentRow</span> || &#123;&#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">columns</span>=<span class="string">&#123;columns&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">open</span>=<span class="string">&#123;updateModalOpen&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onSubmit</span>=<span class="string">&#123;async</span> (<span class="attr">value</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          const success = await handleUpdateInterfaceInfo(value);</span></span><br><span class="line"><span class="language-xml">          if (success) &#123;</span></span><br><span class="line"><span class="language-xml">            handleUpdateModalOpen(false);</span></span><br><span class="line"><span class="language-xml">            setCurrentRow(undefined);</span></span><br><span class="line"><span class="language-xml">            if (actionRef.current) &#123;</span></span><br><span class="line"><span class="language-xml">              actionRef.current.reload();</span></span><br><span class="line"><span class="language-xml">            &#125;</span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        onCancel=&#123;() =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          handleUpdateModalOpen(false);</span></span><br><span class="line"><span class="language-xml">          if (!showDetail) &#123;</span></span><br><span class="line"><span class="language-xml">            setCurrentRow(undefined);</span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br></pre></td></tr></table></figure><p>出错了，猜测是Ant Design Pro的问题，猜错了，其实是columns中的id的type为index的原因。并没有id字段，所以我手动给一下</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230113222955554.png" alt="image-20230113222955554"></p><p>修改代码如下</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@en</span>-US Update InterfaceInfo</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@zh</span>-CN 更新接口信息</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">fields</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleUpdateInterfaceInfo</span> = <span class="keyword">async</span> (<span class="params">fields: API.InterfaceInfoUpdateRequest</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> hide = message.<span class="title function_">loading</span>(<span class="string">&#x27;正在更新&#x27;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(!currentRow)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">updateInterfaceInfoUsingPOST</span>(&#123;</span><br><span class="line">        <span class="comment">// 因为columns中的id valueType为index 不会传递 所以我们需要手动赋值id</span></span><br><span class="line">        <span class="attr">id</span>: currentRow.<span class="property">id</span>,</span><br><span class="line">        ...fields,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (res.<span class="property">data</span>) &#123;</span><br><span class="line">        <span class="title function_">hide</span>();</span><br><span class="line">        <span class="title function_">handleUpdateModalOpen</span>(<span class="literal">false</span>);</span><br><span class="line">        message.<span class="title function_">success</span>(<span class="string">&#x27;更新成功!&#x27;</span>);</span><br><span class="line">        <span class="comment">// 刷新页面</span></span><br><span class="line">        actionRef.<span class="property">current</span>?.<span class="title function_">reload</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="attr">error</span>: <span class="built_in">any</span>) &#123;</span><br><span class="line">      <span class="title function_">hide</span>();</span><br><span class="line">      message.<span class="title function_">error</span>(<span class="string">&#x27;更新失败!&#x27;</span> + error.<span class="property">message</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试更新成功~</p><h2 id="4、删除接口信息"><a href="#4、删除接口信息" class="headerlink" title="4、删除接口信息"></a>4、删除接口信息</h2><hr><p><strong>删除按钮</strong></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在columns中添加删除按钮</span></span><br><span class="line">&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;操作&#x27;</span>,</span><br><span class="line">      <span class="attr">dataIndex</span>: <span class="string">&#x27;option&#x27;</span>,</span><br><span class="line">      <span class="attr">valueType</span>: <span class="string">&#x27;option&#x27;</span>,</span><br><span class="line">      <span class="attr">render</span>: <span class="function">(<span class="params">_, record</span>) =&gt;</span> [</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">key</span>=<span class="string">&quot;config&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">            handleUpdateModalOpen(true);</span></span><br><span class="line"><span class="language-xml">            setCurrentRow(record);</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        &gt;</span></span><br><span class="line"><span class="language-xml">          编辑</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>,</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">key</span>=<span class="string">&quot;delete&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">            handleRemoveInterfaceInfo(record);</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        &gt;</span></span><br><span class="line"><span class="language-xml">          删除</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p><strong>调用方法</strong></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handleRemoveInterfaceInfo</span> = <span class="keyword">async</span> (<span class="params">record: API.InterfaceInfo</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> hide = message.<span class="title function_">loading</span>(<span class="string">&#x27;正在删除&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!record) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">deleteInterfaceInfoUsingPOST</span>(&#123;</span><br><span class="line">      <span class="attr">id</span>: record.<span class="property">id</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title function_">hide</span>();</span><br><span class="line">    message.<span class="title function_">success</span>(<span class="string">&#x27;删除成功!&#x27;</span>);</span><br><span class="line">    <span class="comment">// 刷新页面</span></span><br><span class="line">    actionRef.<span class="property">current</span>?.<span class="title function_">reload</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (<span class="attr">error</span>: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="title function_">hide</span>();</span><br><span class="line">    message.<span class="title function_">error</span>(<span class="string">&#x27;删除失败!&#x27;</span> + error.<span class="property">message</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>测试删除成功~</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230114154218713.png" alt="image-20230114154218713"></p><h1 id="三、API开发"><a href="#三、API开发" class="headerlink" title="三、API开发"></a>三、API开发</h1><hr><h2 id="1、模拟接口"><a href="#1、模拟接口" class="headerlink" title="1、模拟接口"></a>1、模拟接口</h2><hr><p><strong>创建项目</strong></p><p>快速创建一个spring Boot项目 勾选SpringWeb、Lombok、Spring Boot DevTools</p><p><strong>提供三个模拟接口</strong></p><p>接口大体内容</p><ol><li>GET 接口</li><li>POST 接口（url传参）</li><li>POST接口（Restful）</li></ol><p>简单的项目结构</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230114233348076.png" alt="image-20230114233348076"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuan.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xuan.model.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟接口</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 玄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/1/14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/name&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NameController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getNameByGet</span><span class="params">(<span class="meta">@PathVariable(value = &quot;name&quot;)</span> String name)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;发送GET请求 你的名字是：&quot;</span> + name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping()</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getNameByPost</span><span class="params">(<span class="meta">@RequestParam(value = &quot;name&quot;)</span> String name)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;发送POST请求 你的名字是：&quot;</span> + name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getNameByPostWithJson</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;发送POST请求 JSON中你的名字是：&quot;</span> + user.getName();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>application.yml配置一下端口、然后指定一下全局接口的地址</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8123</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/api</span></span><br></pre></td></tr></table></figure><h2 id="2、调用接口"><a href="#2、调用接口" class="headerlink" title="2、调用接口"></a>2、调用接口</h2><hr><p><strong>几种HTTP的调用方式：</strong></p><ol><li>HttpClient</li><li>RestTemplate</li><li>第三方库（OKHttp，Hutool）</li></ol><p>这里我使用了<strong>Hutool</strong>调用<a href="https://hutool.cn/docs/#/">hutool文档</a></p><p>maven中添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>查看文档中的Http请求相关用法 编写XuanApiClient类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuan.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.http.HttpRequest;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.http.HttpResponse;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.http.HttpUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONUtil;</span><br><span class="line"><span class="keyword">import</span> com.xuan.model.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调用API使用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 玄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/1/15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XuanApiClient</span> &#123;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getNameByGet</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> HttpUtil.get(<span class="string">&quot;http://localhost:8123/api/name/&quot;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getNameByPost</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="comment">// 可以单独传入http参数，这样参数会自动做URL编码，拼接在URL中</span></span><br><span class="line">HashMap&lt;String, Object&gt; paramMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">paramMap.put(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line"><span class="keyword">return</span> HttpUtil.post(<span class="string">&quot;http://localhost:8123/api/name&quot;</span>, paramMap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getNameByPostWithJson</span><span class="params">(User user)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSONUtil.toJsonStr(user);</span><br><span class="line"><span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> HttpRequest.post(<span class="string">&quot;http://localhost:8123/api/name/user&quot;</span>)</span><br><span class="line">.body(json)</span><br><span class="line">.execute();</span><br><span class="line">System.out.println(<span class="string">&quot;response = &quot;</span> + response);</span><br><span class="line">System.out.println(<span class="string">&quot;status = &quot;</span> + response.getStatus());</span><br><span class="line"><span class="keyword">if</span> (response.isOk()) &#123;</span><br><span class="line"><span class="keyword">return</span> response.body();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;fail&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建测试类调用测试</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230115162508894.png" alt="image-20230115162508894"></p><h1 id="四、API签名认证"><a href="#四、API签名认证" class="headerlink" title="四、API签名认证"></a>四、API签名认证</h1><hr><p><strong>本质：</strong></p><ol><li>签发签名</li><li>使用签名（校验签名）</li></ol><p><strong>为什么需要</strong></p><p>保证安全性，不能随便一个人就可以调用</p><p><strong>怎么实现</strong></p><ul><li><strong>accessKey</strong> 调用的标识（复杂，无序，无规律）</li><li><strong>secretKey</strong>密钥 （复杂，无序，无规律）</li></ul><p></p><p>类似<strong>用户名</strong>和<strong>密码</strong>，区别：accessKey、secretKey是<strong>无状态</strong>的</p><p>千万不能把密钥直接在服务器间进行传递，有可能被拦截</p><p>加密看第二点</p><h2 id="1、修改数据库"><a href="#1、修改数据库" class="headerlink" title="1、修改数据库"></a>1、修改数据库</h2><hr><p>由于我们的<strong>user表</strong>里面没有access_key、secret_key 所以我们要修改数据库表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line">    id            <span class="type">bigint</span> auto_increment comment <span class="string">&#x27;id&#x27;</span> <span class="keyword">primary</span> key,</span><br><span class="line">    user_name     <span class="type">varchar</span>(<span class="number">256</span>)                           <span class="keyword">null</span> comment <span class="string">&#x27;用户昵称&#x27;</span>,</span><br><span class="line">    user_account  <span class="type">varchar</span>(<span class="number">256</span>)                           <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;账号&#x27;</span>,</span><br><span class="line">    user_avatar   <span class="type">varchar</span>(<span class="number">1024</span>)                          <span class="keyword">null</span> comment <span class="string">&#x27;用户头像&#x27;</span>,</span><br><span class="line">    gender        tinyint                                <span class="keyword">null</span> comment <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">    user_role     <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">default</span> <span class="string">&#x27;user&#x27;</span>            <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;用户角色：user / admin&#x27;</span>,</span><br><span class="line">    user_password <span class="type">varchar</span>(<span class="number">512</span>)                           <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">    access_key    <span class="type">varchar</span>(<span class="number">256</span>)                           <span class="keyword">null</span> comment <span class="string">&#x27;access_key&#x27;</span>,</span><br><span class="line">    secret_key    <span class="type">varchar</span>(<span class="number">256</span>)                           <span class="keyword">null</span> comment <span class="string">&#x27;secret_key&#x27;</span>,</span><br><span class="line">    create_time   datetime     <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    update_time   datetime     <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">on</span> <span class="keyword">update</span> <span class="built_in">CURRENT_TIMESTAMP</span> comment <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    is_delete     tinyint      <span class="keyword">default</span> <span class="number">0</span>                 <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;是否删除&#x27;</span>,</span><br><span class="line">    <span class="keyword">constraint</span> uni_user_account</span><br><span class="line">        <span class="keyword">unique</span> (user_account)</span><br><span class="line">) comment <span class="string">&#x27;用户&#x27;</span>;</span><br></pre></td></tr></table></figure><p>直接drop掉之前的table重新建表，插入一条测试数据。</p><p>标准的话 应该新建一个表 主要字段为接口id、使用用户id、access_key、secret_key等等</p><h2 id="2、加密"><a href="#2、加密" class="headerlink" title="2、加密"></a>2、加密</h2><hr><h3 id="1、加密方式"><a href="#1、加密方式" class="headerlink" title="1、加密方式"></a>1、加密方式</h3><p>将accessKey、secretKey放在Header里明文传递安全吗</p><p>答案是否定的，因为我们的<strong>请求可能被人拦截</strong>，而我们把密码放进请求头里面，可能会被别人获取</p><blockquote><p>一般是根据密钥，生成<strong>签名sign</strong></p></blockquote><p><strong>加密方式</strong></p><ol><li><p>​对称加密</p></li><li><p>​非对称加密</p></li><li><p>​md5 签名（不可解密）</p></li></ol><p><strong>签名的做法</strong></p><p>假如 ，我们有用户参数，我们用密钥与他拼接，用签名算法得到一个不可解密的值</p><p>​<strong>用户参数 +密钥&#x3D;&gt;签名生成算法（MD5,HMac,Sha1) &#x3D;&gt;不可解密的值</strong></p><p>例子：xuan +abc&#x3D;&gt;7e7b9583aa0bc3e834fe8bcaebda38b5（这里是我随便输的，得到的值是随机的）</p><p>怎么知道签名对不对？</p><p>服务端用一模一样的参数和算法去生成签名，只要和用户传的一致，就表示密钥一致</p><p><strong>怎么防重放？</strong></p><p>加nonce随机数只能用一次</p><p>服务端要保存用过的随机数</p><p>加timestamp 时间戳，校验它的有效期</p><p>综上所属</p><p><strong>传递的参数</strong></p><ol><li>accessKey</li><li>sign （由accessKey(或者使用用户请求参数body等)、secretKey加密而来）</li><li>nonce随机数</li><li>timestamp</li><li>body（用户请求参数 可要可不要）</li></ol><p><strong>API签名认证是一个很灵活的设计，具体要有哪些参数，尽量服务端调用，参数名如何要根据场景来。</strong></p><h3 id="2、加密代码"><a href="#2、加密代码" class="headerlink" title="2、加密代码"></a>2、加密代码</h3><p>我这里直接使用了body、和secretKey进行加密</p><p>先创建一个加密签名类SignUtil.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuan.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.crypto.digest.DigestUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 签名工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 玄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/1/15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SignUtil</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getSign</span><span class="params">(String body, String secretKey)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> body + <span class="string">&quot;.&quot;</span> + secretKey;</span><br><span class="line"><span class="keyword">return</span> DigestUtil.md5Hex(content);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在Client类中新增构造Header的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XuanApiClient</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String accessKey;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String secretKey;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">XuanApiClient</span><span class="params">(String accessKey, String secretKey)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.accessKey = accessKey;</span><br><span class="line"><span class="built_in">this</span>.secretKey = secretKey;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getNameByPostWithJson</span><span class="params">(User user)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSONUtil.toJsonStr(user);</span><br><span class="line"><span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> HttpRequest.post(<span class="string">&quot;http://localhost:8123/api/name/user&quot;</span>)</span><br><span class="line">.addHeaders(getHeaders(json))</span><br><span class="line">.body(json)</span><br><span class="line">.execute();</span><br><span class="line">System.out.println(<span class="string">&quot;response = &quot;</span> + response);</span><br><span class="line">System.out.println(<span class="string">&quot;status = &quot;</span> + response.getStatus());</span><br><span class="line"><span class="keyword">if</span> (response.isOk()) &#123;</span><br><span class="line"><span class="keyword">return</span> response.body();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;fail&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, String&gt; <span class="title function_">getHeaders</span><span class="params">(String body)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">Map&lt;String, String&gt; header = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">header.put(<span class="string">&quot;accessKey&quot;</span>, accessKey);</span><br><span class="line">header.put(<span class="string">&quot;sign&quot;</span>, SignUtil.getSign(body, secretKey));</span><br><span class="line"><span class="comment">// 防止中文乱码</span></span><br><span class="line">header.put(<span class="string">&quot;body&quot;</span>, URLEncoder.encode(body, StandardCharsets.UTF_8.name()));</span><br><span class="line">header.put(<span class="string">&quot;nonce&quot;</span>, RandomUtil.randomNumbers(<span class="number">5</span>));</span><br><span class="line">header.put(<span class="string">&quot;timestamp&quot;</span>, String.valueOf(System.currentTimeMillis()));</span><br><span class="line"><span class="keyword">return</span> header;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用API的时候加密代码已经写好了，显然我们在API中需要用同样的方法来验证加密。这里以携带JSON body的POST请求为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuan.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.NumberUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> com.xuan.model.User;</span><br><span class="line"><span class="keyword">import</span> com.xuan.util.SignUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 玄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/1/14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/name&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NameController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getNameByPostWithJson</span><span class="params">(<span class="meta">@RequestBody</span> User user, HttpServletRequest request)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">accessKey</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;accessKey&quot;</span>);</span><br><span class="line"><span class="comment">// 防止中文乱码</span></span><br><span class="line"><span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> URLDecoder.decode(request.getHeader(<span class="string">&quot;body&quot;</span>), StandardCharsets.UTF_8.name());</span><br><span class="line"><span class="type">String</span> <span class="variable">sign</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;sign&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">nonce</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;nonce&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">timestamp</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;timestamp&quot;</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">hasBlank</span> <span class="operator">=</span> StrUtil.hasBlank(accessKey, body, sign, nonce, timestamp);</span><br><span class="line"><span class="comment">// 判断是否有空</span></span><br><span class="line"><span class="keyword">if</span> (hasBlank) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;无权限&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// TODO 使用accessKey去数据库查询secretKey</span></span><br><span class="line"><span class="comment">// 假设查到的secret是abc 进行加密得到sign</span></span><br><span class="line"><span class="type">String</span> <span class="variable">secretKey</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">sign1</span> <span class="operator">=</span> SignUtil.getSign(body, secretKey);</span><br><span class="line"><span class="keyword">if</span> (!StrUtil.equals(sign, sign1)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;无权限&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// TODO 判断随机数nonce</span></span><br><span class="line"><span class="comment">// 时间戳是否为数字</span></span><br><span class="line"><span class="keyword">if</span> (!NumberUtil.isNumber(timestamp)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;无权限&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 五分钟内的请求有效</span></span><br><span class="line"><span class="keyword">if</span> (System.currentTimeMillis() - Long.parseLong(timestamp) &gt; <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;无权限&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;发送POST请求 JSON中你的名字是：&quot;</span> + user.getName();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>进行测试secretKey &#x3D; “abc” 可以正确访问，当secret错误时返回无权限～</p><p>​</p><h1 id="五、开发一个SDK（starter）"><a href="#五、开发一个SDK（starter）" class="headerlink" title="五、开发一个SDK（starter）"></a>五、开发一个SDK（starter）</h1><hr><p>理想情况：开发者只需要关心调用哪些接口、传递哪些参数。就跟调用自己写的代码一样简单。</p><blockquote><p>开发starter的好处：开发者引入之后，可以直接在application.yml中写配置，自动创建客户端</p></blockquote><h2 id="1、新建项目"><a href="#1、新建项目" class="headerlink" title="1、新建项目"></a>1、新建项目</h2><p>创建一个xuanapi-client-sdk的springboot项目 勾选lombok、Spring Configuration Processor（作用：自动生成配置的代码提示）</p><p>然后处理pom.xml   <build></build>这个<font color='red'>一定需要删除</font>因为这个是maven的构建项目成可运行jar包。现在是制作starter依赖包</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230116142827466.png" alt="image-20230116142827466"></p><h2 id="2、编写配置类"><a href="#2、编写配置类" class="headerlink" title="2、编写配置类"></a>2、编写配置类</h2><p>我们不需要spring boot启动类，将其删去。</p><p>然后将之前编写好的client、util、model粘贴过来</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230116153646366.png" alt="image-20230116153646366"></p><p>再新建配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;xuan.api.client&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XuanApiClientConfig</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String accessKey;</span><br><span class="line"><span class="keyword">private</span> String secretKey;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> XuanApiClient <span class="title function_">xuanApiClient</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">XuanApiClient</span>(accessKey, secretKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3、指定配置类"><a href="#3、指定配置类" class="headerlink" title="3、指定配置类"></a>3、指定配置类</h2><p>新建resources&#x2F;META-INF&#x2F;spring.factories并指定</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># spring boot starter</span></span><br><span class="line"><span class="attr">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">com.xuan.XuanApiClientConfig</span></span><br></pre></td></tr></table></figure><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230116153954227.png" alt="image-20230116153954227"></p><h2 id="4、发布starter"><a href="#4、发布starter" class="headerlink" title="4、发布starter"></a>4、发布starter</h2><p>双击Maven lifecycle下的install或者命令行mvn install</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230116154259164.png" alt="image-20230116154259164"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[INFO] Installing /Users/xuan/Desktop/project/api-platform/xuanapi-client-sdk/target/xuanapi-client-sdk-0.0.1.jar to /Users/xuan/.m2/repository/com/xuan/xuanapi-client-sdk/0.0.1/xuanapi-client-sdk-0.0.1.jar</span><br><span class="line">[INFO] Installing /Users/xuan/Desktop/project/api-platform/xuanapi-client-sdk/pom.xml to /Users/xuan/.m2/repository/com/xuan/xuanapi-client-sdk/0.0.1/xuanapi-client-sdk-0.0.1.pom</span><br></pre></td></tr></table></figure><h2 id="5、测试"><a href="#5、测试" class="headerlink" title="5、测试"></a>5、测试</h2><p><strong>引入依赖</strong></p><p>回到xuan-Interface项目，把之前的client、util、model全部删掉。然后在pom中引入我们刚刚制作好的starter</p><p><font color='red'>注意：</font>这里能直接引入，是因为刚刚我们install的stater在我们的本地，可以发布到Maven仓库或者提供jar包供大家使用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--自己制作的starter--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xuan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xuanapi-client-sdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>配置信息</strong></p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230116155915000.png" alt="image-20230116155915000"></p><p>我们在yml文件中配置的时候有提示就是之前引入的Spring Configuration Processor发挥的作用。打开依赖源码分析可得是这个json文件的作用</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230116160142141.png" alt="image-20230116160142141"></p><p>在测试类使用@Resource注入XuanApiClient进行测试</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230116160643683.png" alt="image-20230116160643683"></p><p>yml中secret不正确也会返回 “无权限”</p><h1 id="六、接口发布-x2F-下线"><a href="#六、接口发布-x2F-下线" class="headerlink" title="六、接口发布&#x2F;下线"></a>六、接口发布&#x2F;下线</h1><hr><p>这个功能首先是仅管理员使用的</p><p><strong>发布接口</strong></p><ol><li>校验该接口是否存在</li><li>判断接口是否可以被调用</li><li>修改数据库接口字段为1</li></ol><p><strong>下线接口</strong></p><ol><li>校验该接口是否存在</li><li>修改数据库接口字段为 0</li></ol><h2 id="1、后端"><a href="#1、后端" class="headerlink" title="1、后端"></a>1、后端</h2><hr><ol><li><p><strong>通用请求类</strong></p><p>上下线都是通过id来控制的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过id发送请求</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xuan</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IdRequest</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>枚举类</strong></p><p>使用枚举类来表示上线&#x2F;下线状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuan.project.model.enums;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口状态枚举</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xuan</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">InterfaceInfoStatusEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    OFFLINE(<span class="string">&quot;下线&quot;</span>, <span class="number">0</span>),</span><br><span class="line">    ONLINE(<span class="string">&quot;上线&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String text;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">    InterfaceInfoStatusEnum(String text, <span class="type">int</span> value) &#123;</span><br><span class="line">        <span class="built_in">this</span>.text = text;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 获取值列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title function_">getValues</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.stream(values()).map(item -&gt; item.value).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getText</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>在controller里编写上下线代码</strong></p><p><font color='red'>这里有个TODO</font> 判断该接口是否可以调用时，由XuanApiClient固定方法名改为根据测试地址来调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * API信息接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xuan</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/interfaceInfo&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceInfoController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> InterfaceInfoService interfaceInfoService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> XuanApiClient xuanApiClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上线接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> idRequest 携带id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 是否上线成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/online&quot;)</span></span><br><span class="line"><span class="meta">@AuthCheck(mustRole = &quot;admin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseResponse&lt;Boolean&gt; <span class="title function_">onlineInterfaceInfo</span><span class="params">(<span class="meta">@RequestBody</span> IdRequest idRequest)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line"><span class="keyword">if</span> (idRequest == <span class="literal">null</span> || idRequest.getId() &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断接口是否存在</span></span><br><span class="line"><span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> idRequest.getId();</span><br><span class="line"><span class="type">InterfaceInfo</span> <span class="variable">oldInterfaceInfo</span> <span class="operator">=</span> interfaceInfoService.getById(id);</span><br><span class="line"><span class="keyword">if</span> (oldInterfaceInfo == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.NOT_FOUND_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断接口是否能使用</span></span><br><span class="line"><span class="comment">// TODO 根据测试地址来调用</span></span><br><span class="line"><span class="comment">// 这里我先用固定的方法进行测试，后面来改</span></span><br><span class="line">com.xuan.model.<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.xuan.model.User();</span><br><span class="line">user.setName(<span class="string">&quot;MARS&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> xuanApiClient.getNameByPostWithJson(user);</span><br><span class="line"><span class="keyword">if</span> (StrUtil.isBlank(name)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.SYSTEM_ERROR, <span class="string">&quot;接口验证失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新数据库</span></span><br><span class="line"><span class="type">InterfaceInfo</span> <span class="variable">interfaceInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InterfaceInfo</span>();</span><br><span class="line">interfaceInfo.setId(id);</span><br><span class="line">interfaceInfo.setStatus(InterfaceInfoStatusEnum.ONLINE.getValue());</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isSuccessful</span> <span class="operator">=</span> interfaceInfoService.updateById(interfaceInfo);</span><br><span class="line"><span class="keyword">return</span> ResultUtils.success(isSuccessful);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下线接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> idRequest 携带id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 是否下线成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/offline&quot;)</span></span><br><span class="line"><span class="meta">@AuthCheck(mustRole = &quot;admin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseResponse&lt;Boolean&gt; <span class="title function_">offlineInterfaceInfo</span><span class="params">(<span class="meta">@RequestBody</span> IdRequest idRequest)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (idRequest == <span class="literal">null</span> || idRequest.getId() &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断接口是否存在</span></span><br><span class="line"><span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> idRequest.getId();</span><br><span class="line"><span class="type">InterfaceInfo</span> <span class="variable">oldInterfaceInfo</span> <span class="operator">=</span> interfaceInfoService.getById(id);</span><br><span class="line"><span class="keyword">if</span> (oldInterfaceInfo == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.NOT_FOUND_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新数据库</span></span><br><span class="line"><span class="type">InterfaceInfo</span> <span class="variable">interfaceInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InterfaceInfo</span>();</span><br><span class="line">interfaceInfo.setId(id);</span><br><span class="line">interfaceInfo.setStatus(InterfaceInfoStatusEnum.OFFLINE.getValue());</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isSuccessful</span> <span class="operator">=</span> interfaceInfoService.updateById(interfaceInfo);</span><br><span class="line"><span class="keyword">return</span> ResultUtils.success(isSuccessful);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>权限控制</strong></p><p>这里添加权限校验，这里用到**@AuthCheck(mustRole &#x3D; “admin”)**的切面注解，对应的实现方法在aop&#x2F;AuthInterceptor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuan.project.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 权限校验</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xuan</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AuthCheck &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有任何一个角色</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] anyRole() <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 必须有某个角色</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">mustRole</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>aop&#x2F;AuthInterceptor.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuan.project.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> com.xuan.project.common.ErrorCode;</span><br><span class="line"><span class="keyword">import</span> com.xuan.project.exception.BusinessException;</span><br><span class="line"><span class="keyword">import</span> com.xuan.project.model.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.xuan.project.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.xuan.project.annotation.AuthCheck;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 权限校验 AOP</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xuan</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行拦截</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authCheck</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around(&quot;@annotation(authCheck)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">doInterceptor</span><span class="params">(ProceedingJoinPoint joinPoint, AuthCheck authCheck)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        List&lt;String&gt; anyRole = Arrays.stream(authCheck.anyRole()).filter(StringUtils::isNotBlank).collect(Collectors.toList());</span><br><span class="line">        <span class="type">String</span> <span class="variable">mustRole</span> <span class="operator">=</span> authCheck.mustRole();</span><br><span class="line">        <span class="type">RequestAttributes</span> <span class="variable">requestAttributes</span> <span class="operator">=</span> RequestContextHolder.currentRequestAttributes();</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> ((ServletRequestAttributes) requestAttributes).getRequest();</span><br><span class="line">        <span class="comment">// 当前登录用户</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getLoginUser(request);</span><br><span class="line">        <span class="comment">// 拥有任意权限即通过</span></span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(anyRole)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">userRole</span> <span class="operator">=</span> user.getUserRole();</span><br><span class="line">            <span class="keyword">if</span> (!anyRole.contains(userRole)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.NO_AUTH_ERROR);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 必须有所有权限才通过</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(mustRole)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">userRole</span> <span class="operator">=</span> user.getUserRole();</span><br><span class="line">            <span class="keyword">if</span> (!mustRole.equals(userRole)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.NO_AUTH_ERROR);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 通过权限校验，放行</span></span><br><span class="line">        <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>userService.getLoginUser(request)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取当前登录用户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getLoginUser</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line"><span class="comment">// 先判断是否已登录</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">userObj</span> <span class="operator">=</span> request.getSession().getAttribute(USER_LOGIN_STATE);</span><br><span class="line"><span class="type">User</span> <span class="variable">currentUser</span> <span class="operator">=</span> (User) userObj;</span><br><span class="line"><span class="keyword">if</span> (currentUser == <span class="literal">null</span> || currentUser.getId() == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.NOT_LOGIN_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 从数据库查询（追求性能的话可以注释，直接走缓存）</span></span><br><span class="line"><span class="type">long</span> <span class="variable">userId</span> <span class="operator">=</span> currentUser.getId();</span><br><span class="line">currentUser = <span class="built_in">this</span>.getById(userId);</span><br><span class="line"><span class="keyword">if</span> (currentUser == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.NOT_LOGIN_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> currentUser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="2、前端"><a href="#2、前端" class="headerlink" title="2、前端"></a>2、前端</h2><hr><h3 id="1、添加发布按钮和下线按钮"><a href="#1、添加发布按钮和下线按钮" class="headerlink" title="1、添加发布按钮和下线按钮"></a>1、添加发布按钮和下线按钮</h3><p>查看了Ant Design <a href="https://ant.design/components/button-cn">Button的官方文档</a></p><p>发布&#x2F;下线做成一个按钮。通过status来动态判断</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;操作&#x27;</span>,</span><br><span class="line">      <span class="attr">dataIndex</span>: <span class="string">&#x27;option&#x27;</span>,</span><br><span class="line">      <span class="attr">valueType</span>: <span class="string">&#x27;option&#x27;</span>,</span><br><span class="line">      <span class="attr">render</span>: <span class="function">(<span class="params">_, record</span>) =&gt;</span> [</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">Button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">key</span>=<span class="string">&quot;config&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&#123;</span>&quot;<span class="attr">link</span>&quot;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">            handleUpdateModalOpen(true);</span></span><br><span class="line"><span class="language-xml">            setCurrentRow(record);</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        &gt;</span></span><br><span class="line"><span class="language-xml">          编辑</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span>,</span><br><span class="line">        record.<span class="property">status</span> === <span class="number">0</span> ? (</span><br><span class="line">          <span class="language-xml"><span class="tag">&lt;<span class="name">Button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">key</span>=<span class="string">&quot;online&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&#123;</span>&#x27;<span class="attr">link</span>&#x27;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">              handleOnlineInterface(record);</span></span><br><span class="line"><span class="language-xml">            &#125;&#125;</span></span><br><span class="line"><span class="language-xml">          &gt;</span></span><br><span class="line"><span class="language-xml">            发布</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line">        ) : (</span><br><span class="line">          <span class="language-xml"><span class="tag">&lt;<span class="name">Button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">key</span>=<span class="string">&quot;offline&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&#123;</span>&#x27;<span class="attr">text</span>&#x27;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            // <span class="attr">danger</span>=<span class="string">&#123;true&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">              handleOfflineInterface(record);</span></span><br><span class="line"><span class="language-xml">            &#125;&#125;</span></span><br><span class="line"><span class="language-xml">          &gt;</span></span><br><span class="line"><span class="language-xml">            下线</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line">        ),</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">Button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">key</span>=<span class="string">&quot;delete&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&#123;</span>&#x27;<span class="attr">text</span>&#x27;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">danger</span>=<span class="string">&#123;true&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">            handleRemoveInterfaceInfo(record);</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        &gt;</span></span><br><span class="line"><span class="language-xml">          删除</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span>,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230117142012585.png" alt="image-20230117142012585"></p><h3 id="2、编写发布-x2F-下线的方法"><a href="#2、编写发布-x2F-下线的方法" class="headerlink" title="2、编写发布&#x2F;下线的方法"></a>2、编写发布&#x2F;下线的方法</h3><p><font color='red'>因为后端新增了代码，所以还是使用openapi自动生成前端方法</font></p><p>跟之前操作一样，去<a href="http://localhost:7529/api/v3/api-docs%E5%A4%8D%E5%88%B6json%E5%88%B0config/oneapi.json">http://localhost:7529/api/v3/api-docs复制json到config/oneapi.json</a> 然后运行openapi   </p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230117121821846.png" alt="image-20230117121821846"></p><p>新增方法</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@en</span>-US Online Interface</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@zh</span>-CN 发布接口</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">fields</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleOnlineInterface</span> = <span class="keyword">async</span> (<span class="params">fields: API.IdRequest</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> hide = message.<span class="title function_">loading</span>(<span class="string">&#x27;正在发布&#x27;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">onlineInterfaceInfoUsingPOST</span>(&#123; ...fields &#125;);</span><br><span class="line">      <span class="keyword">if</span> (res.<span class="property">data</span>) &#123;</span><br><span class="line">        <span class="title function_">hide</span>();</span><br><span class="line">        message.<span class="title function_">success</span>(<span class="string">&#x27;发布成功!&#x27;</span>);</span><br><span class="line">        <span class="comment">// 刷新页面</span></span><br><span class="line">        actionRef.<span class="property">current</span>?.<span class="title function_">reload</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="attr">error</span>: <span class="built_in">any</span>) &#123;</span><br><span class="line">      <span class="title function_">hide</span>();</span><br><span class="line">      message.<span class="title function_">error</span>(<span class="string">&#x27;发布失败!&#x27;</span> + error.<span class="property">message</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@en</span>-US Offline Interface</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@zh</span>-CN 下线接口</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">fields</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleOfflineInterface</span> = <span class="keyword">async</span> (<span class="params">fields: API.IdRequest</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> hide = message.<span class="title function_">loading</span>(<span class="string">&#x27;正在下线&#x27;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">offlineInterfaceInfoUsingPOST</span>(&#123; ...fields &#125;);</span><br><span class="line">      <span class="keyword">if</span> (res.<span class="property">data</span>) &#123;</span><br><span class="line">        <span class="title function_">hide</span>();</span><br><span class="line">        message.<span class="title function_">success</span>(<span class="string">&#x27;下线成功!&#x27;</span>);</span><br><span class="line">        <span class="comment">// 刷新页面</span></span><br><span class="line">        actionRef.<span class="property">current</span>?.<span class="title function_">reload</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="attr">error</span>: <span class="built_in">any</span>) &#123;</span><br><span class="line">      <span class="title function_">hide</span>();</span><br><span class="line">      message.<span class="title function_">error</span>(<span class="string">&#x27;下线失败!&#x27;</span> + error.<span class="property">message</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>网页进行测试没有问题~</p><h1 id="七、用户主页"><a href="#七、用户主页" class="headerlink" title="七、用户主页"></a>七、用户主页</h1><hr><p>前端浏览接口，查看接口文档，申请签名（注册）</p><h3 id="1、浏览接口"><a href="#1、浏览接口" class="headerlink" title="1、浏览接口"></a>1、浏览接口</h3><hr><p>在src&#x2F;pages目录下新建Index目录并把Welcome.tsx拖入其中改名为index.tsx</p><p><strong>配置路由</strong></p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230118113613886.png" alt="image-20230118113613886"></p><p>测试一下 主页能够正常访问，接下来再来编写页面</p><p><strong>编写页面</strong></p><p>这里参考了 <a href="https://ant.design/components/list-cn">Ant Design List组件</a></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PageContainer</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@ant-design/pro-components&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">List</span>, message &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; listInterfaceInfoByPageUsingGET &#125; <span class="keyword">from</span> <span class="string">&#x27;@/services/api-platform-backend/interfaceInfoController&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Index</span>: <span class="title class_">React</span>.<span class="property">FC</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [list, setList] = useState&lt;<span class="variable constant_">API</span>.<span class="property">InterfaceInfo</span>[]&gt;([]);</span><br><span class="line">  <span class="keyword">const</span> [total, setTotal] = useState&lt;<span class="built_in">number</span>&gt;(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">loadData</span> = <span class="keyword">async</span> (<span class="params">current = <span class="number">1</span>, pageSize = <span class="number">10</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setLoading</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">listInterfaceInfoByPageUsingGET</span>(&#123;</span><br><span class="line">        current,</span><br><span class="line">        pageSize,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="title function_">setList</span>(res?.<span class="property">data</span>?.<span class="property">records</span> ?? []);</span><br><span class="line">      <span class="title function_">setTotal</span>(res?.<span class="property">data</span>?.<span class="property">total</span> ?? <span class="number">0</span>);</span><br><span class="line">      <span class="title function_">setLoading</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="attr">error</span>: <span class="built_in">any</span>) &#123;</span><br><span class="line">      <span class="title function_">setLoading</span>(<span class="literal">false</span>);</span><br><span class="line">      message.<span class="title function_">error</span>(<span class="string">&#x27;请求失败,&#x27;</span> + error.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">loadData</span>();</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">PageContainer</span> <span class="attr">title</span>=<span class="string">&#123;</span>&#x27;<span class="attr">主页</span>&#x27;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">List</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">className</span>=<span class="string">&quot;interfaceInfo-list&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">loading</span>=<span class="string">&#123;loading&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">itemLayout</span>=<span class="string">&quot;horizontal&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">dataSource</span>=<span class="string">&#123;list&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">pagination</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">showSizeChanger:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">total:</span> <span class="attr">total</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">showTotal</span>(<span class="attr">total</span>, <span class="attr">range</span>) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">return</span> `$&#123;<span class="attr">range</span>[<span class="attr">0</span>]&#125;<span class="attr">-</span>$&#123;<span class="attr">range</span>[<span class="attr">1</span>]&#125; / $&#123;<span class="attr">total</span>&#125;`;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>(<span class="attr">page</span>, <span class="attr">pageSize</span>) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">loadData</span>(<span class="attr">page</span>, <span class="attr">pageSize</span>);</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">renderItem</span>=<span class="string">&#123;(item)</span> =&gt;</span> (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">List.Item</span> <span class="attr">actions</span>=<span class="string">&#123;[</span>&lt;<span class="attr">a</span> <span class="attr">key</span>=<span class="string">&quot;list-more&quot;</span>&gt;</span>查看详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span>]&#125;&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">List.Item.Meta</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">title</span>=<span class="string">&#123;</span>&lt;<span class="attr">a</span> <span class="attr">href</span>=<span class="string">&quot;https://ant.design&quot;</span>&gt;</span>&#123;item.name&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">              description=&#123;item.description&#125;</span></span><br><span class="line"><span class="language-xml">            /&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;item.method&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">List.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        )&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">PageContainer</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Index</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230118140557053.png" alt="image-20230118140557053"></p><h3 id="2、查看接口文档"><a href="#2、查看接口文档" class="headerlink" title="2、查看接口文档"></a>2、查看接口文档</h3><hr><ol><li><p><strong>新建文件</strong></p><p>在pages下新建 InterfaceInfo&#x2F;index.tsx</p></li><li><p><strong>配置动态路由</strong></p><p>这里需要查看 <a href="https://umijs.org/docs/guides/routes">umi文档</a></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 动态路由</span></span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/interface_info/:id&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;interface info&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="string">&#x27;./InterfaceInfo&#x27;</span>,</span><br><span class="line">  <span class="comment">// 不在菜单页显示</span></span><br><span class="line">  <span class="attr">hideInMenu</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230118152720709.png" alt="image-20230118152720709"></p></li><li><p><strong>修改跳转</strong></p><p>点击页面即可查看详情</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230118152832702.png" alt="image-20230118152832702"></p><p>主页代码片段修改</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">PageContainer</span> <span class="attr">title</span>=<span class="string">&#123;</span>&#x27;<span class="attr">接口开放平台</span>&#x27;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">List</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">className</span>=<span class="string">&quot;interfaceInfo-list&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">loading</span>=<span class="string">&#123;loading&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">itemLayout</span>=<span class="string">&quot;horizontal&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">dataSource</span>=<span class="string">&#123;list&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">pagination</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">showSizeChanger:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">total:</span> <span class="attr">total</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">showTotal</span>(<span class="attr">total</span>, <span class="attr">range</span>) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">return</span> `$&#123;<span class="attr">range</span>[<span class="attr">0</span>]&#125;<span class="attr">-</span>$&#123;<span class="attr">range</span>[<span class="attr">1</span>]&#125; / $&#123;<span class="attr">total</span>&#125;`;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>(<span class="attr">page</span>, <span class="attr">pageSize</span>) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">loadData</span>(<span class="attr">page</span>, <span class="attr">pageSize</span>);</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        // <span class="attr">修改的地方</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">renderItem</span>=<span class="string">&#123;(item)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          const infoLink = `/interface_info/$&#123;item.id&#125;`;</span></span><br><span class="line"><span class="language-xml">          return (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">List.Item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">actions</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                &lt;<span class="attr">a</span> <span class="attr">key</span>=<span class="string">&quot;list-more&quot;</span> <span class="attr">href</span>=<span class="string">&#123;infoLink&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  查看详情</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span>,</span></span><br><span class="line"><span class="language-xml">              ]&#125;</span></span><br><span class="line"><span class="language-xml">            &gt;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">List.Item.Meta</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">title</span>=<span class="string">&#123;</span>&lt;<span class="attr">a</span> <span class="attr">href</span>=<span class="string">&#123;infoLink&#125;</span>&gt;</span>&#123;item.name&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">                description=&#123;item.description&#125;</span></span><br><span class="line"><span class="language-xml">              /&gt;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;item.method&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">List.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          );</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">PageContainer</span>&gt;</span></span></span><br><span class="line">  );</span><br></pre></td></tr></table></figure></li><li><p><strong>编写InterfaceInfo&#x2F;index.tsx</strong></p><p>这里需要查看Ant Design中的Card 和 Descriptions 组件 已经umi中动态路由如何获取路径中的id</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230118153556403.png" alt="image-20230118153556403"></p><p>如官方文档所示，这里我们使用useParams()</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PageContainer</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@ant-design/pro-components&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Badge</span>, <span class="title class_">Card</span>, <span class="title class_">Descriptions</span>, message &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getInterfaceInfoByIdUsingGET &#125; <span class="keyword">from</span> <span class="string">&#x27;@/services/api-platform-backend/interfaceInfoController&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useParams &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&quot;moment&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">InterfaceInfo</span>: <span class="title class_">React</span>.<span class="property">FC</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = useState&lt;<span class="variable constant_">API</span>.<span class="property">InterfaceInfo</span>&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> params = <span class="title function_">useParams</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">loadData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!params.<span class="property">id</span>) &#123;</span><br><span class="line">      message.<span class="title function_">error</span>(<span class="string">&#x27;无数据，请重试&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">setLoading</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">getInterfaceInfoByIdUsingGET</span>(&#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="title class_">Number</span>(params.<span class="property">id</span>),</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="title function_">setData</span>(res?.<span class="property">data</span>);</span><br><span class="line">      <span class="title function_">setLoading</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="attr">error</span>: <span class="built_in">any</span>) &#123;</span><br><span class="line">      <span class="title function_">setLoading</span>(<span class="literal">false</span>);</span><br><span class="line">      message.<span class="title function_">error</span>(<span class="string">&#x27;请求失败,&#x27;</span> + error.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">loadData</span>();</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">PageContainer</span> <span class="attr">title</span>=<span class="string">&#123;</span>&#x27;<span class="attr">接口详情</span>&#x27;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Card</span> <span class="attr">loading</span>=<span class="string">&#123;loading&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;data ? (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Descriptions</span> <span class="attr">title</span>=<span class="string">&#123;data.name&#125;</span> <span class="attr">column</span>=<span class="string">&#123;2&#125;</span> <span class="attr">layout</span>=<span class="string">&quot;vertical&quot;</span> <span class="attr">bordered</span>=<span class="string">&#123;true&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Descriptions.Item</span> <span class="attr">label</span>=<span class="string">&quot;描述&quot;</span>&gt;</span>&#123;data.description&#125;<span class="tag">&lt;/<span class="name">Descriptions.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Descriptions.Item</span> <span class="attr">label</span>=<span class="string">&quot;接口状态&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;data.status === 0 ? (</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Badge</span> <span class="attr">text</span>=<span class="string">&#123;</span>&#x27;<span class="attr">关闭</span>&#x27;&#125; <span class="attr">status</span>=<span class="string">&#123;</span>&#x27;<span class="attr">default</span>&#x27;&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">              ) : (</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Badge</span> <span class="attr">text</span>=<span class="string">&#123;</span>&#x27;<span class="attr">启用</span>&#x27;&#125; <span class="attr">status</span>=<span class="string">&#123;</span>&#x27;<span class="attr">processing</span>&#x27;&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">              )&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Descriptions.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Descriptions.Item</span> <span class="attr">label</span>=<span class="string">&quot;请求地址&quot;</span>&gt;</span>&#123;data.url&#125;<span class="tag">&lt;/<span class="name">Descriptions.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Descriptions.Item</span> <span class="attr">label</span>=<span class="string">&quot;请求方法&quot;</span>&gt;</span>&#123;data.method&#125;<span class="tag">&lt;/<span class="name">Descriptions.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Descriptions.Item</span> <span class="attr">label</span>=<span class="string">&quot;请求头&quot;</span>&gt;</span>&#123;data.requestHeader&#125;<span class="tag">&lt;/<span class="name">Descriptions.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Descriptions.Item</span> <span class="attr">label</span>=<span class="string">&quot;响应头&quot;</span>&gt;</span>&#123;data.responseHeader&#125;<span class="tag">&lt;/<span class="name">Descriptions.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Descriptions.Item</span> <span class="attr">label</span>=<span class="string">&quot;创建时间&quot;</span>&gt;</span>&#123;moment(data.createTime).format(&#x27;yyyy-MM-DD HH:mm:ss&#x27;)&#125;<span class="tag">&lt;/<span class="name">Descriptions.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Descriptions.Item</span> <span class="attr">label</span>=<span class="string">&quot;更新时间&quot;</span>&gt;</span>&#123;moment(data.updateTime).format(&#x27;yyyy-MM-DD HH:mm:ss&#x27;)&#125;<span class="tag">&lt;/<span class="name">Descriptions.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Descriptions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ) : (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;&gt;</span>接口不存在<span class="tag">&lt;/&gt;</span></span></span><br><span class="line"><span class="language-xml">        )&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line">    &lt;/<span class="title class_">PageContainer</span>&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">InterfaceInfo</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>效果如下</strong></p><p>点击后跳转详情</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230118153729873.png" alt="image-20230118153729873"></p></li></ol><h3 id="3、申请签名"><a href="#3、申请签名" class="headerlink" title="3、申请签名"></a>3、申请签名</h3><hr><p><strong>注册用户的时候就给他分配一个签名</strong></p><p>先在User类和UserMapper.xml中加一下accessKey、secretKey的字段</p><p>更新注册方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">userRegister</span><span class="params">(String userAccount, String userPassword, String checkPassword)</span> &#123;</span><br><span class="line"><span class="comment">// 1. 校验</span></span><br><span class="line"><span class="keyword">if</span> (StringUtils.isAnyBlank(userAccount, userPassword, checkPassword)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR, <span class="string">&quot;参数为空&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (userAccount.length() &lt; <span class="number">4</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR, <span class="string">&quot;用户账号过短&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (userPassword.length() &lt; <span class="number">8</span> || checkPassword.length() &lt; <span class="number">8</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR, <span class="string">&quot;用户密码过短&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 密码和校验密码相同</span></span><br><span class="line"><span class="keyword">if</span> (!userPassword.equals(checkPassword)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR, <span class="string">&quot;两次输入的密码不一致&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">synchronized</span> (userAccount.intern()) &#123;</span><br><span class="line"><span class="comment">// 账户不能重复</span></span><br><span class="line">LambdaQueryWrapper&lt;User&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">lambdaQueryWrapper.eq(User::getUserAccount, userAccount);</span><br><span class="line"><span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> userMapper.selectCount(lambdaQueryWrapper);</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR, <span class="string">&quot;账号重复&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2. 加密</span></span><br><span class="line"><span class="type">String</span> <span class="variable">encryptPassword</span> <span class="operator">=</span> DigestUtils.md5DigestAsHex((SALT + userPassword).getBytes());</span><br><span class="line"><span class="comment">// 3. 分配accessKey、secretKey</span></span><br><span class="line"><span class="type">String</span> <span class="variable">accessKey</span> <span class="operator">=</span> <span class="string">&quot;cli_&quot;</span> + DigestUtil.md5Hex(SALT + userAccount + RandomUtil.randomNumbers(<span class="number">4</span>));</span><br><span class="line"><span class="type">String</span> <span class="variable">secretKey</span> <span class="operator">=</span> DigestUtil.md5Hex(SALT + userAccount + RandomUtil.randomNumbers(<span class="number">8</span>));</span><br><span class="line"><span class="comment">// 4. 插入数据</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setUserAccount(userAccount);</span><br><span class="line">user.setUserPassword(encryptPassword);</span><br><span class="line">user.setAccessKey(accessKey);</span><br><span class="line">user.setSecretKey(secretKey);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">saveResult</span> <span class="operator">=</span> <span class="built_in">this</span>.save(user);</span><br><span class="line"><span class="keyword">if</span> (!saveResult) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.SYSTEM_ERROR, <span class="string">&quot;注册失败，数据库错误&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> user.getId();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前往<a href="http://localhost:7529/api/doc.html%E6%B3%A8%E5%86%8C%E3%80%82">http://localhost:7529/api/doc.html注册。</a>分配成功~</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230118174821662.png" alt="image-20230118174821662"></p><p><strong>更换签名</strong></p><p>扩展：用户可以申请更换签名</p><h1 id="八、在线调用"><a href="#八、在线调用" class="headerlink" title="八、在线调用"></a>八、在线调用</h1><hr><p>发现少了一个「请求参数」字段…现在给补上</p><p>数据库、后端、前端都需要补上。 不做过多阐述</p><p><font color='red'>这里设计的其实不太完美，只是跑通了。后续做优化</font></p><h2 id="1、前端简单样式"><a href="#1、前端简单样式" class="headerlink" title="1、前端简单样式"></a>1、前端简单样式</h2><hr><p>这里我拿了Ant Design官网例子改了一下</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Card</span> title=&#123;<span class="string">&#x27;在线调用&#x27;</span>&#125;&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Form</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">name</span>=<span class="string">&quot;basic&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">layout</span>=<span class="string">&#123;</span>&#x27;<span class="attr">vertical</span>&#x27;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">onFinish</span>=<span class="string">&#123;onFinish&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Form.Item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">label</span>=<span class="string">&quot;请求参数&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">name</span>=<span class="string">&quot;requestParams&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Input.TextArea</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Form.Item</span> &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">htmlType</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        调用</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Card</span>&gt;</span><br></pre></td></tr></table></figure><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230119102254234.png" alt="image-20230119102254234"></p><h2 id="2、修改后端"><a href="#2、修改后端" class="headerlink" title="2、修改后端"></a>2、修改后端</h2><hr><p>这里我们其实有两种方案</p><ul><li>走后端调用</li><li>直接请求模拟接口</li></ul><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230119102921966.png" alt="image-20230119102921966"></p><p>这里用第一种流方案，更安全更规范。模拟接口的地址就不用暴露出来</p><p>大概流程如下</p><ol><li><p>前端将用户输入的请求参数和要测试的接口 id发给平台后端</p></li><li><p>调用前校验</p></li><li><p>平台后端去调用模拟接口</p></li></ol><p><strong>新增DTO类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuan.project.model.dto.interfaceinfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调用接口参数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xuan</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InvokeInterfaceRequest</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主键</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String requestParams;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller类新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在线调用接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> invokeInterfaceRequest 携带id、请求参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> data</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/invoke&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseResponse&lt;Object&gt; <span class="title function_">invokeInterface</span><span class="params">(<span class="meta">@RequestBody</span> InvokeInterfaceRequest invokeInterfaceRequest, HttpServletRequest request)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line"><span class="keyword">if</span> (invokeInterfaceRequest == <span class="literal">null</span> || invokeInterfaceRequest.getId() &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断接口是否存在</span></span><br><span class="line"><span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> invokeInterfaceRequest.getId();</span><br><span class="line"><span class="type">InterfaceInfo</span> <span class="variable">interfaceInfo</span> <span class="operator">=</span> interfaceInfoService.getById(id);</span><br><span class="line"><span class="keyword">if</span> (interfaceInfo == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.NOT_FOUND_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (interfaceInfo.getStatus() != InterfaceInfoStatusEnum.ONLINE.getValue()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.SYSTEM_ERROR, <span class="string">&quot;接口未上线&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 得到当前用户</span></span><br><span class="line"><span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> userService.getLoginUser(request);</span><br><span class="line"><span class="type">String</span> <span class="variable">accessKey</span> <span class="operator">=</span> loginUser.getAccessKey();</span><br><span class="line"><span class="type">String</span> <span class="variable">secretKey</span> <span class="operator">=</span> loginUser.getSecretKey();</span><br><span class="line"><span class="type">XuanApiClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XuanApiClient</span>(accessKey, secretKey);</span><br><span class="line"><span class="comment">// 先写死请求</span></span><br><span class="line"><span class="type">String</span> <span class="variable">userRequestParams</span> <span class="operator">=</span> invokeInterfaceRequest.getRequestParams();</span><br><span class="line">com.xuan.model.<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> JSONUtil.toBean(userRequestParams, com.xuan.model.User.class);</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> client.getNameByPostWithJson(user);</span><br><span class="line"><span class="keyword">return</span> ResultUtils.success(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、修改前端"><a href="#3、修改前端" class="headerlink" title="3、修改前端"></a>3、修改前端</h2><hr><p>Ant Design中 Form组件 onFinish： 提交表单且数据验证成功后回调事件</p><p>所以我们来编写onFinish方法</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">onFinish</span> = <span class="keyword">async</span> (<span class="params">requestData: API.InvokeInterfaceRequest</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!params.<span class="property">id</span>) &#123;</span><br><span class="line">    message.<span class="title function_">error</span>(<span class="string">&#x27;无数据，请重试&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">invokeInterfaceUsingPOST</span>(&#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="title class_">Number</span>(params.<span class="property">id</span>),</span><br><span class="line">      ...requestData,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title function_">setResData</span>(res.<span class="property">data</span>);</span><br><span class="line">    message.<span class="title function_">success</span>(<span class="string">&#x27;调用成功!&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (<span class="attr">error</span>: <span class="built_in">any</span>) &#123;</span><br><span class="line">    message.<span class="title function_">error</span>(<span class="string">&#x27;请求失败,&#x27;</span> + error.<span class="property">message</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>再修改一下样式</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PageContainer</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@ant-design/pro-components&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Badge</span>, <span class="title class_">Card</span>, <span class="title class_">Descriptions</span>, message, <span class="title class_">Form</span>, <span class="title class_">Input</span>, <span class="title class_">Button</span>, <span class="title class_">Divider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  getInterfaceInfoByIdUsingGET,</span><br><span class="line">  invokeInterfaceUsingPOST,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@/services/api-platform-backend/interfaceInfoController&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useParams &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&#x27;moment&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">InterfaceInfo</span>: <span class="title class_">React</span>.<span class="property">FC</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = useState&lt;<span class="variable constant_">API</span>.<span class="property">InterfaceInfo</span>&gt;();</span><br><span class="line">  <span class="keyword">const</span> [resData, setResData] = useState&lt;<span class="built_in">any</span>&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> params = <span class="title function_">useParams</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">loadData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!params.<span class="property">id</span>) &#123;</span><br><span class="line">      message.<span class="title function_">error</span>(<span class="string">&#x27;无数据，请重试&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">setLoading</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">getInterfaceInfoByIdUsingGET</span>(&#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="title class_">Number</span>(params.<span class="property">id</span>),</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="title function_">setData</span>(res?.<span class="property">data</span>);</span><br><span class="line">      <span class="title function_">setLoading</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="attr">error</span>: <span class="built_in">any</span>) &#123;</span><br><span class="line">      <span class="title function_">setLoading</span>(<span class="literal">false</span>);</span><br><span class="line">      message.<span class="title function_">error</span>(<span class="string">&#x27;请求失败,&#x27;</span> + error.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">loadData</span>();</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onFinish</span> = <span class="keyword">async</span> (<span class="params">requestData: API.InvokeInterfaceRequest</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!params.<span class="property">id</span>) &#123;</span><br><span class="line">      message.<span class="title function_">error</span>(<span class="string">&#x27;无数据，请重试&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">invokeInterfaceUsingPOST</span>(&#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="title class_">Number</span>(params.<span class="property">id</span>),</span><br><span class="line">        ...requestData,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="title function_">setResData</span>(res.<span class="property">data</span>);</span><br><span class="line">      message.<span class="title function_">success</span>(<span class="string">&#x27;调用成功!&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="attr">error</span>: <span class="built_in">any</span>) &#123;</span><br><span class="line">      message.<span class="title function_">error</span>(<span class="string">&#x27;请求失败,&#x27;</span> + error.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">PageContainer</span> <span class="attr">title</span>=<span class="string">&#123;</span>&#x27;<span class="attr">接口详情</span>&#x27;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;data ? (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Card</span> <span class="attr">loading</span>=<span class="string">&#123;loading&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Descriptions</span> <span class="attr">title</span>=<span class="string">&#123;data.name&#125;</span> <span class="attr">column</span>=<span class="string">&#123;2&#125;</span> <span class="attr">layout</span>=<span class="string">&quot;vertical&quot;</span> <span class="attr">bordered</span>=<span class="string">&#123;true&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Descriptions.Item</span> <span class="attr">label</span>=<span class="string">&quot;描述&quot;</span>&gt;</span>&#123;data.description&#125;<span class="tag">&lt;/<span class="name">Descriptions.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Descriptions.Item</span> <span class="attr">label</span>=<span class="string">&quot;接口状态&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;data.status === 0 ? (</span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">Badge</span> <span class="attr">text</span>=<span class="string">&#123;</span>&#x27;<span class="attr">关闭</span>&#x27;&#125; <span class="attr">status</span>=<span class="string">&#123;</span>&#x27;<span class="attr">default</span>&#x27;&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">                ) : (</span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">Badge</span> <span class="attr">text</span>=<span class="string">&#123;</span>&#x27;<span class="attr">启用</span>&#x27;&#125; <span class="attr">status</span>=<span class="string">&#123;</span>&#x27;<span class="attr">processing</span>&#x27;&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">                )&#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">Descriptions.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Descriptions.Item</span> <span class="attr">label</span>=<span class="string">&quot;请求地址&quot;</span>&gt;</span>&#123;data.url&#125;<span class="tag">&lt;/<span class="name">Descriptions.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Descriptions.Item</span> <span class="attr">label</span>=<span class="string">&quot;请求方法&quot;</span>&gt;</span>&#123;data.method&#125;<span class="tag">&lt;/<span class="name">Descriptions.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Descriptions.Item</span> <span class="attr">label</span>=<span class="string">&quot;请求头&quot;</span>&gt;</span>&#123;data.requestHeader&#125;<span class="tag">&lt;/<span class="name">Descriptions.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Descriptions.Item</span> <span class="attr">label</span>=<span class="string">&quot;请求参数&quot;</span>&gt;</span>&#123;data.requestParams&#125;<span class="tag">&lt;/<span class="name">Descriptions.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Descriptions.Item</span> <span class="attr">label</span>=<span class="string">&quot;响应头&quot;</span>&gt;</span>&#123;data.responseHeader&#125;<span class="tag">&lt;/<span class="name">Descriptions.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Descriptions.Item</span> <span class="attr">label</span>=<span class="string">&quot;创建时间&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;moment(data.createTime).format(&#x27;yyyy-MM-DD HH:mm:ss&#x27;)&#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">Descriptions.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Descriptions.Item</span> <span class="attr">label</span>=<span class="string">&quot;更新时间&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;moment(data.updateTime).format(&#x27;yyyy-MM-DD HH:mm:ss&#x27;)&#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">Descriptions.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Descriptions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Divider</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Card</span> <span class="attr">title</span>=<span class="string">&#123;</span>&#x27;<span class="attr">在线调用</span>&#x27;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Form</span> <span class="attr">name</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">layout</span>=<span class="string">&#123;</span>&#x27;<span class="attr">vertical</span>&#x27;&#125; <span class="attr">onFinish</span>=<span class="string">&#123;onFinish&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Form.Item</span> <span class="attr">label</span>=<span class="string">&quot;请求参数&quot;</span> <span class="attr">name</span>=<span class="string">&quot;requestParams&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Input.TextArea</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">htmlType</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  调用</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;resData ? <span class="tag">&lt;<span class="name">Card</span> <span class="attr">title</span>=<span class="string">&#123;</span>&#x27;<span class="attr">调用结果</span>&#x27;&#125;&gt;</span>&#123;resData&#125;<span class="tag">&lt;/<span class="name">Card</span>&gt;</span> : null&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">      ) : (</span><br><span class="line">        <span class="string">&#x27;接口不存在&#x27;</span></span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;/<span class="title class_">PageContainer</span>&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">InterfaceInfo</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试如下</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230119113714929.png" alt="image-20230119113714929"></p><h2 id="4、TODO"><a href="#4、TODO" class="headerlink" title="4、TODO"></a>4、TODO</h2><hr><ul><li>判断该接口是否可以调用时由固定方法名改为根据测试地址来调用</li><li>用户测试接口固定方法名改为根据测试地址来调用</li><li>模拟接囗改为从数据库校验accessKey、secretKey</li></ul><h1 id="九、接口调用次数统计"><a href="#九、接口调用次数统计" class="headerlink" title="九、接口调用次数统计"></a>九、接口调用次数统计</h1><hr><p><strong>需求</strong></p><ol><li>用户每次调用接口成功，次数+1</li><li>给用户分配或者用户自主申请调用次数</li></ol><p><strong>业务流程</strong></p><ol><li>用户调用接口（之前已完成）</li><li>修改数据库，调用次数+1</li></ol><h2 id="1、设计库表"><a href="#1、设计库表" class="headerlink" title="1、设计库表"></a>1、设计库表</h2><p>哪个用户？哪个接口？<br>用户&#x3D;&gt;接口（多对多）</p><p><strong>用户调用接口关系表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> api_platform.`user_interface_info`</span><br><span class="line">(</span><br><span class="line">    `id` <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span> auto_increment comment <span class="string">&#x27;主键&#x27;</span> <span class="keyword">primary</span> key,</span><br><span class="line">    `user_id` <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;调用用户Id&#x27;</span>,</span><br><span class="line">    `interface_info_id` <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;接口Id&#x27;</span>,</span><br><span class="line">    `total_num` <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;总调用次数&#x27;</span>,</span><br><span class="line">  `left_num` <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;剩余调用次数&#x27;</span>,</span><br><span class="line">    `status` <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;0-正常 ，1-禁用&#x27;</span>,</span><br><span class="line">    `create_time` datetime <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `update_time` datetime <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">on</span> <span class="keyword">update</span> <span class="built_in">CURRENT_TIMESTAMP</span> comment <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    `is_delete` tinyint <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;是否删除(0-未删, 1-已删)&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;用户调用接口关系表&#x27;</span>;</span><br></pre></td></tr></table></figure><p>执行sql语句</p><p><strong>使用MybatisX插件</strong></p><p>生成user_interface_info表的代码</p><p>在isDelete上<font color='red'>增加@TableLogic</font>注释 代表逻辑删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户调用接口关系表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@TableName</span> user_interface_info</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableName(value =&quot;user_interface_info&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInterfaceInfo</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否删除(0-未删, 1-已删)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDelete;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、基础增删改查"><a href="#2、基础增删改查" class="headerlink" title="2、基础增删改查"></a>2、基础增删改查</h2><p>先需要在dto中创建类</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230123172908757.png" alt="image-20230123172908757"></p><p>再复制之前的controller改名替换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuan.project.controller;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * API信息接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xuan</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/userInterfaceInfo&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInterfaceInfoController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> UserInterfaceInfoService userInterfaceInfoService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line"><span class="comment">// region 增删改查</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userInterfaceInfoAddRequest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="meta">@AuthCheck(mustRole = UserConstant.ADMIN_ROLE)</span></span><br><span class="line"><span class="keyword">public</span> BaseResponse&lt;Long&gt; <span class="title function_">addUserInterfaceInfo</span><span class="params">(<span class="meta">@RequestBody</span> UserInterfaceInfoAddRequest userInterfaceInfoAddRequest, HttpServletRequest request)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (userInterfaceInfoAddRequest == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">UserInterfaceInfo</span> <span class="variable">userInterfaceInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserInterfaceInfo</span>();</span><br><span class="line">BeanUtils.copyProperties(userInterfaceInfoAddRequest, userInterfaceInfo);</span><br><span class="line"><span class="comment">// 校验</span></span><br><span class="line">userInterfaceInfoService.validUserInterfaceInfo(userInterfaceInfo, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 设置当前用户id</span></span><br><span class="line"><span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> userService.getLoginUser(request);</span><br><span class="line">userInterfaceInfo.setUserId(loginUser.getId());</span><br><span class="line"><span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> userInterfaceInfoService.save(userInterfaceInfo);</span><br><span class="line"><span class="keyword">if</span> (!result) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.OPERATION_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="variable">newUserInterfaceInfoId</span> <span class="operator">=</span> userInterfaceInfo.getId();</span><br><span class="line"><span class="keyword">return</span> ResultUtils.success(newUserInterfaceInfoId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> deleteRequest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/delete&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseResponse&lt;Boolean&gt; <span class="title function_">deleteUserInterfaceInfo</span><span class="params">(<span class="meta">@RequestBody</span> DeleteRequest deleteRequest, HttpServletRequest request)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (deleteRequest == <span class="literal">null</span> || deleteRequest.getId() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getLoginUser(request);</span><br><span class="line"><span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> deleteRequest.getId();</span><br><span class="line"><span class="comment">// 判断是否存在</span></span><br><span class="line"><span class="type">UserInterfaceInfo</span> <span class="variable">oldUserInterfaceInfo</span> <span class="operator">=</span> userInterfaceInfoService.getById(id);</span><br><span class="line"><span class="keyword">if</span> (oldUserInterfaceInfo == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.NOT_FOUND_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 仅本人或管理员可删除</span></span><br><span class="line"><span class="keyword">if</span> (!oldUserInterfaceInfo.getUserId().equals(user.getId()) &amp;&amp; !userService.isAdmin(request)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.NO_AUTH_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> userInterfaceInfoService.removeById(id);</span><br><span class="line"><span class="keyword">return</span> ResultUtils.success(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userInterfaceInfoUpdateRequest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/update&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseResponse&lt;Boolean&gt; <span class="title function_">updateUserInterfaceInfo</span><span class="params">(<span class="meta">@RequestBody</span> UserInterfaceInfoUpdateRequest userInterfaceInfoUpdateRequest,</span></span><br><span class="line"><span class="params">                                                     HttpServletRequest request)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (userInterfaceInfoUpdateRequest == <span class="literal">null</span> || userInterfaceInfoUpdateRequest.getId() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">UserInterfaceInfo</span> <span class="variable">userInterfaceInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserInterfaceInfo</span>();</span><br><span class="line">BeanUtils.copyProperties(userInterfaceInfoUpdateRequest, userInterfaceInfo);</span><br><span class="line"><span class="comment">// 参数校验</span></span><br><span class="line">userInterfaceInfoService.validUserInterfaceInfo(userInterfaceInfo, <span class="literal">false</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getLoginUser(request);</span><br><span class="line">System.out.println(user);</span><br><span class="line"><span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> userInterfaceInfoUpdateRequest.getId();</span><br><span class="line"><span class="comment">// 判断是否存在</span></span><br><span class="line"><span class="type">UserInterfaceInfo</span> <span class="variable">oldUserInterfaceInfo</span> <span class="operator">=</span> userInterfaceInfoService.getById(id);</span><br><span class="line"><span class="keyword">if</span> (oldUserInterfaceInfo == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.NOT_FOUND_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 仅本人或管理员可修改</span></span><br><span class="line">userService.isAdmin(request);</span><br><span class="line"><span class="keyword">if</span> (!oldUserInterfaceInfo.getUserId().equals(user.getId()) &amp;&amp; !userService.isAdmin(request)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.NO_AUTH_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> userInterfaceInfoService.updateById(userInterfaceInfo);</span><br><span class="line"><span class="keyword">return</span> ResultUtils.success(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 id 获取</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/get&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseResponse&lt;UserInterfaceInfo&gt; <span class="title function_">getUserInterfaceInfoById</span><span class="params">(<span class="type">long</span> id)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (id &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">UserInterfaceInfo</span> <span class="variable">userInterfaceInfo</span> <span class="operator">=</span> userInterfaceInfoService.getById(id);</span><br><span class="line"><span class="keyword">return</span> ResultUtils.success(userInterfaceInfo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取列表（仅管理员可使用）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userInterfaceInfoQueryRequest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AuthCheck(mustRole = &quot;admin&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseResponse&lt;List&lt;UserInterfaceInfo&gt;&gt; <span class="title function_">listUserInterfaceInfo</span><span class="params">(UserInterfaceInfoQueryRequest userInterfaceInfoQueryRequest)</span> &#123;</span><br><span class="line"><span class="type">UserInterfaceInfo</span> <span class="variable">userInterfaceInfoQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserInterfaceInfo</span>();</span><br><span class="line"><span class="keyword">if</span> (userInterfaceInfoQueryRequest != <span class="literal">null</span>) &#123;</span><br><span class="line">BeanUtils.copyProperties(userInterfaceInfoQueryRequest, userInterfaceInfoQuery);</span><br><span class="line">&#125;</span><br><span class="line">QueryWrapper&lt;UserInterfaceInfo&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;(userInterfaceInfoQuery);</span><br><span class="line">List&lt;UserInterfaceInfo&gt; userInterfaceInfoList = userInterfaceInfoService.list(queryWrapper);</span><br><span class="line"><span class="keyword">return</span> ResultUtils.success(userInterfaceInfoList);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页获取列表</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userInterfaceInfoQueryRequest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseResponse&lt;Page&lt;UserInterfaceInfo&gt;&gt; <span class="title function_">listUserInterfaceInfoByPage</span><span class="params">(UserInterfaceInfoQueryRequest userInterfaceInfoQueryRequest, HttpServletRequest request)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (userInterfaceInfoQueryRequest == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">UserInterfaceInfo</span> <span class="variable">userInterfaceInfoQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserInterfaceInfo</span>();</span><br><span class="line">BeanUtils.copyProperties(userInterfaceInfoQueryRequest, userInterfaceInfoQuery);</span><br><span class="line"><span class="type">long</span> <span class="variable">current</span> <span class="operator">=</span> userInterfaceInfoQueryRequest.getCurrent();</span><br><span class="line"><span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> userInterfaceInfoQueryRequest.getPageSize();</span><br><span class="line"><span class="type">String</span> <span class="variable">sortField</span> <span class="operator">=</span> userInterfaceInfoQueryRequest.getSortField();</span><br><span class="line"><span class="type">String</span> <span class="variable">sortOrder</span> <span class="operator">=</span> userInterfaceInfoQueryRequest.getSortOrder();</span><br><span class="line"><span class="comment">// 限制爬虫</span></span><br><span class="line"><span class="keyword">if</span> (size &gt; <span class="number">50</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);</span><br><span class="line">&#125;</span><br><span class="line">QueryWrapper&lt;UserInterfaceInfo&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;(userInterfaceInfoQuery);</span><br><span class="line">queryWrapper.orderBy(StringUtils.isNotBlank(sortField),</span><br><span class="line">sortOrder.equals(CommonConstant.SORT_ORDER_ASC), sortField);</span><br><span class="line">Page&lt;UserInterfaceInfo&gt; userInterfaceInfoPage = userInterfaceInfoService.page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(current, size), queryWrapper);</span><br><span class="line"><span class="keyword">return</span> ResultUtils.success(userInterfaceInfoPage);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3、调用次数统计"><a href="#3、调用次数统计" class="headerlink" title="3、调用次数统计"></a>3、调用次数统计</h2><p>用户每次调用接口成功，次数+1（service)</p><p><strong>编写方法</strong></p><p>在<strong>service</strong>层的<strong>UserInterfaceInfoService</strong>编写方法</p><p>这里只是过流程，实际应该多校验</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">invokeInterfaceCount</span><span class="params">(<span class="type">long</span> userId, <span class="type">long</span> interfaceInfoId)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (userId &lt;= <span class="number">0</span> || interfaceInfoId &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.NOT_FOUND_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LambdaUpdateWrapper&lt;UserInterfaceInfo&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">updateWrapper.eq(UserInterfaceInfo::getUserId, userId)</span><br><span class="line">.eq(UserInterfaceInfo::getInterfaceInfoId, interfaceInfoId)</span><br><span class="line">.gt(UserInterfaceInfo::getLeftNum, <span class="number">0</span>)</span><br><span class="line">.setSql(<span class="string">&quot;left_num = left_num -1, total_num = total_num + 1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> update(updateWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red' >注意：其实这里应该添加事务，添加锁</font></p><p>接口测试成功</p><h2 id="4、问题"><a href="#4、问题" class="headerlink" title="4、问题"></a>4、问题</h2><p>如果每个接口的方法都写调用次数+1，是不是比较麻烦？</p><p>致命问题：接口开发者需要自己去添加统计代码</p><p>就想到可以使用AOP、网关</p><p><strong>逻辑图</strong></p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230126112301389.png" alt="image-20230126112301389"></p><p><strong>AOP切面的优点</strong>：独立于接口，在每个接口调用后统计次数+1<br><strong>AOP切面的缺点</strong>：只存在于单个项目中，如果每个团队都要开发自己的模拟接口，那么都要写一个切面</p><p>所以最终我们在这个项目选择使用<strong>网关</strong></p><h1 id="十、网关"><a href="#十、网关" class="headerlink" title="十、网关"></a>十、网关</h1><hr><p>什么是网关？理解成火车站的检票口，<strong>统一</strong> 检票</p><p><strong>网关优点</strong>： 统一进行操作，去处理一些问题</p><h2 id="1、网关作用"><a href="#1、网关作用" class="headerlink" title="1、网关作用"></a>1、网关作用</h2><hr><ol><li>路由</li><li>负载均衡</li><li>统一鉴权</li><li>统一处理跨域</li><li>统一业务处理（缓存）</li><li>访问控制</li><li>发布控制</li><li>流量染色</li><li>统一接口保护<ol><li>限制请求</li><li>信息脱敏</li><li>降级（熔断）</li><li>限流 学习令牌桶算法，学习露桶算法，学习一下RedislimitHandler</li><li>超时时间</li><li>重试（业务保护）</li></ol></li><li>统一日志</li><li>统一文档</li></ol><h2 id="2、具体作用"><a href="#2、具体作用" class="headerlink" title="2、具体作用"></a>2、具体作用</h2><hr><p><strong>路由</strong></p><p>起到转发的作用，比如有接口A和接口B,网关会记录这些信息，根据用户访问的地址和参数，转发请求到对应的接口（服务器&#x2F;集群）</p><p>用户a调用接口A</p><p>&#x2F;a &#x3D;&gt; 接口A<br>&#x2F;b &#x3D;&gt; 接口B</p><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-request-predicates-factories">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-request-predicates-factories</a></p><p><strong>负载均衡</strong></p><p>在路由的基础上可以转发到某一个服务器</p><p>&#x2F;c &#x3D;&gt; 服务A&#x2F; 集群A（随机转发到其中的某一个机器）</p><p>uri从固定地址改成b:xx</p><p><strong>统一鉴权（权限控制）</strong></p><p>判断用户是否有权限进行操作，无论访问什么接口，我都统一去判断权限，不用重复写</p><p><strong>统一处理跨域</strong></p><p>网关统一处理跨域，不用在每个项目单独处理</p><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#cors-configuration">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#cors-configuration</a></p><p><strong>统一业务处理</strong></p><p>把每个项目中都要做的通用逻辑放到上层（网关），统一处理，比如本项目的次数统计</p><p><strong>访问控制</strong></p><p>黑白名单，比如限制DDOS IP</p><p><strong>发布控制</strong></p><p>灰度发布，比如上线新接口，先给新接口分配 20%流量，老接口80% ,再慢慢调整比例</p><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-weight-route-predicate-factory">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-weight-route-predicate-factory</a></p><p><strong>流量染色</strong></p><p>区分用户来源</p><p>给请求（流量）添加一些标识，一般是设置请求头中，添加新的请求头<br><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-addrequestheader-gatewayfilter-factory">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-addrequestheader-gatewayfilter-factory</a></p><p><strong>全局染色</strong>：<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#default-filters">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#default-filters</a></p><p><strong>接口保护</strong></p><ol><li><p>限制请求</p><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#requestheadersiz-gatewayfilter-factory">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#requestheadersiz-gatewayfilter-factory</a></p></li><li><p>信息脱敏 </p><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-removerequestheader-gatewayfilter-factory">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-removerequestheader-gatewayfilter-factory</a></p></li><li><p>降级（熔断） 进行兜底</p><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#fallback-headers">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#fallback-headers</a></p></li><li><p>限流   </p><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-requestratelimiter-gatewayfilter-factory">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-requestratelimiter-gatewayfilter-factory</a></p></li><li><p>超时时间    超时就中断</p><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#http-timeouts-configuration">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#http-timeouts-configuration</a> </p></li><li><p>重试（业务保护）：</p><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-retry-gatewayfilter-factory">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-retry-gatewayfilter-factory</a></p></li></ol><p><strong>统一日志</strong></p><p>统一的请求，响应信息记录</p><p><strong>统一文档</strong></p><p>将下游项目的文档进行聚合，在一个页面统一查看</p><p>建议用：<a href="https://doc.xiaominfo.com/docs/middleware-sources/aggregation-introduction">https://doc.xiaominfo.com/docs/middleware-sources/aggregation-introduction</a></p><p>Spring Cloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等响应式编程和事件流技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。</p><p><strong>网关的分类</strong></p><ul><li><strong>全局网关（接入层网关）</strong>作用是负载均衡、请求日志等，不和业务逻辑绑定</li><li><strong>业务网关（微服务网关）</strong>会有一些业务逻辑，作用是将请求转发到不同的业务&#x2F;项目&#x2F;接口&#x2F;服务</li></ul><p>参考文章：<a href="https://blog.csdn.net/qq_21040559/article/details/122961395">https://blog.csdn.net/qq_21040559/article/details/122961395</a></p><p><strong>实现</strong></p><ol><li><strong>Nginx</strong> （全局网关），<strong>Kong网关</strong>（API网关），  <strong>编程成本相对较高</strong></li><li><strong>Spring Cloud Gateway</strong>（取代了Zuul）性能高 可以用java代码来写逻辑  适于学习</li></ol><p>网关技术选型：<a href="https://zhuanlan.zhihu.com/p/500587132">https://zhuanlan.zhihu.com/p/500587132</a></p><h2 id="3、为什么需要网关"><a href="#3、为什么需要网关" class="headerlink" title="3、为什么需要网关"></a>3、为什么需要网关</h2><p>Gateway网关是我们服务的守门神，所有微服务的统一入口。</p><p>网关的<strong>核心功能特性</strong>：</p><ul><li>请求路由</li><li>权限控制</li><li>限流</li></ul><p>架构图：</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32462703/1676279174124-c12ab17b-33e7-4314-98eb-b4ad692256a1.png" alt="img"></p><p><strong>权限控制</strong>：网关作为微服务入口，需要校验用户是是否有请求资格，如果没有则进行拦截。</p><p><strong>路由和负载均衡</strong>：一切请求都必须先经过gateway，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫做路由。当然路由的目标服务有多个时，还需要做负载均衡。</p><p><strong>限流</strong>：当请求流量过高时，在网关中按照下流的微服务能够接受的速度来放行请求，避免服务压力过大。</p><p>在SpringCloud中网关的实现包括两种：</p><ul><li>gateway</li><li>zuul</li></ul><p>Zuul是基于Servlet的实现，属于阻塞式编程。而SpringCloudGateway则是基于Spring5中提供的WebFlux，属于响应式编程的实现，具备更好的性能。</p><h1 id="十一、Spring-Cloud-Gateway"><a href="#十一、Spring-Cloud-Gateway" class="headerlink" title="十一、Spring Cloud Gateway"></a>十一、Spring Cloud Gateway</h1><hr><p>全部内容基本来自官网</p><p>官网：<a href="https://spring.io/projects/spring-cloud-gateway">https://spring.io/projects/spring-cloud-gateway</a></p><p>官方文档：<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference//html/">https://docs.spring.io/spring-cloud-gateway/docs/current/reference//html/</a></p><p><strong>新建项目</strong></p><p>在IDEA中新建项目 勾选Gateway、Lombok</p><p>参考官网get started中的实例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemogatewayApplication</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RouteLocator <span class="title function_">customRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> builder.routes()</span><br><span class="line">.route(<span class="string">&quot;path_route&quot;</span>, r -&gt; r.path(<span class="string">&quot;/get&quot;</span>)</span><br><span class="line">.uri(<span class="string">&quot;http://httpbin.org&quot;</span>))</span><br><span class="line">.route(<span class="string">&quot;host_route&quot;</span>, r -&gt; r.host(<span class="string">&quot;*.myhost.org&quot;</span>)</span><br><span class="line">.uri(<span class="string">&quot;http://httpbin.org&quot;</span>))</span><br><span class="line">.route(<span class="string">&quot;rewrite_route&quot;</span>, r -&gt; r.host(<span class="string">&quot;*.rewrite.org&quot;</span>)</span><br><span class="line">.filters(f -&gt; f.rewritePath(<span class="string">&quot;/foo/(?&lt;segment&gt;.*)&quot;</span>, <span class="string">&quot;/$&#123;segment&#125;&quot;</span>))</span><br><span class="line">.uri(<span class="string">&quot;http://httpbin.org&quot;</span>))</span><br><span class="line">.route(<span class="string">&quot;hystrix_route&quot;</span>, r -&gt; r.host(<span class="string">&quot;*.hystrix.org&quot;</span>)</span><br><span class="line">.filters(f -&gt; f.hystrix(c -&gt; c.setName(<span class="string">&quot;slowcmd&quot;</span>)))</span><br><span class="line">.uri(<span class="string">&quot;http://httpbin.org&quot;</span>))</span><br><span class="line">.route(<span class="string">&quot;hystrix_fallback_route&quot;</span>, r -&gt; r.host(<span class="string">&quot;*.hystrixfallback.org&quot;</span>)</span><br><span class="line">.filters(f -&gt; f.hystrix(c -&gt; c.setName(<span class="string">&quot;slowcmd&quot;</span>).setFallbackUri(<span class="string">&quot;forward:/hystrixfallback&quot;</span>)))</span><br><span class="line">.uri(<span class="string">&quot;http://httpbin.org&quot;</span>))</span><br><span class="line">.route(<span class="string">&quot;limit_route&quot;</span>, r -&gt; r</span><br><span class="line">.host(<span class="string">&quot;*.limited.org&quot;</span>).and().path(<span class="string">&quot;/anything/**&quot;</span>)</span><br><span class="line">.filters(f -&gt; f.requestRateLimiter(c -&gt; c.setRateLimiter(redisRateLimiter())))</span><br><span class="line">.uri(<span class="string">&quot;http://httpbin.org&quot;</span>))</span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.RouteLocator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XuanapiGatewayApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(XuanapiGatewayApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RouteLocator <span class="title function_">customRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> builder.routes()</span><br><span class="line">.route(<span class="string">&quot;to_baidu&quot;</span>, r -&gt; r.path(<span class="string">&quot;/baidu&quot;</span>)</span><br><span class="line">.uri(<span class="string">&quot;http://www.baidu.com/&quot;</span>))</span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试百度成功</p><h2 id="1、核心概念"><a href="#1、核心概念" class="headerlink" title="1、核心概念"></a>1、核心概念</h2><hr><h3 id="1、Glossary"><a href="#1、Glossary" class="headerlink" title="1、Glossary"></a>1、<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#glossary">Glossary</a></h3><p>官方文档如下</p><ul><li><strong>Route</strong>: The basic building block of the gateway. It is defined by an ID, a destination URI, a collection of predicates, and a collection of filters. A route is matched if the aggregate predicate is true.</li><li><strong>Predicate</strong>: This is a <a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html">Java 8 Function Predicate</a>. The input type is a <a href="https://docs.spring.io/spring/docs/5.0.x/javadoc-api/org/springframework/web/server/ServerWebExchange.html">Spring Framework <code>ServerWebExchange</code></a>. This lets you match on anything from the HTTP request, such as headers or parameters.</li><li><strong>Filter</strong>: These are instances of <a href="https://github.com/spring-cloud/spring-cloud-gateway/tree/main/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/GatewayFilter.java"><code>GatewayFilter</code></a> that have been constructed with a specific factory. Here, you can modify requests and responses before or after sending the downstream request.</li></ul><ol><li><p>路由（根据什么条件，转发到哪里）</p></li><li><p>断言（一组规则，条件，用来确定如何转发路由）</p></li><li><p>过滤器：对请求进行一系列的处理，比如添加请求头，添加请求参数</p></li></ol><h3 id="2、请求流程"><a href="#2、请求流程" class="headerlink" title="2、请求流程"></a>2、请求流程</h3><ol><li>客户端发起请求</li><li>Handler Mapping ：根据断言，去将请求转发到对应的路由</li><li>Web Handler：处理请求（一层层经过过滤器）</li><li>实际调用服务</li></ol><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230131144724778.png" alt="image-20230131144724778"></p><h2 id="2、两种配置方式"><a href="#2、两种配置方式" class="headerlink" title="2、两种配置方式"></a>2、两种配置方式</h2><hr><ol><li><p>配置式 （方便，规范）能用就用</p><ol><li><p>简化版</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">after_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Cookie=mycookie,mycookievalue</span></span><br></pre></td></tr></table></figure></li><li><p>全称</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">after_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cookie</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">mycookie</span></span><br><span class="line">            <span class="attr">regexp:</span> <span class="string">mycookievalue</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>编程式 （灵活，相对麻烦）</p></li></ol><h2 id="3、路由的各种断言"><a href="#3、路由的各种断言" class="headerlink" title="3、路由的各种断言"></a>3、路由的各种断言</h2><hr><p>官网地址:<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-request-predicates-factories">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-request-predicates-factories</a></p><p><strong>目录</strong></p><ol><li>After    在xx时间之后</li><li>Before     在xx时间之前</li><li>Between 在xx时间之间</li><li>请求类别</li><li>请求头（包含Cookie)</li><li>查涧参数</li><li>客户端地址</li><li><strong>权重</strong></li></ol><p><strong>The After Route Predicate Factory</strong></p><p>当前时间在这个时间<strong>之后</strong>，就会访问当前这个路由</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">after_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">After=2017-01-20T17:42:47.789-07:00[America/Denver]</span></span><br></pre></td></tr></table></figure><p><strong>The Before Route Predicate Factory</strong></p><p>当前时间在这个时间<strong>之前</strong>，就会访问当前这个路由</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">before_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Before=2017-01-20T17:42:47.789-07:00[America/Denver]</span></span><br></pre></td></tr></table></figure><p><strong>The Between Route Predicate Factory</strong></p><p>当前时间在这个时间<strong>之间</strong>，就会访问当前这个路由</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">between_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Between=2017-01-20T17:42:47.789-07:00[America/Denver],</span> <span class="number">2017-01-21T17:42:47.789-07:00</span>[<span class="string">America/Denver</span>]</span><br></pre></td></tr></table></figure><p><strong>The Cookie Route Predicate Factory</strong></p><p>如果你的<strong>请求头cookie</strong>的是<strong>chocolate</strong>，它的值是<strong>ch.p</strong>，就会访问当前这个路由</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">cookie_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Cookie=chocolate,</span> <span class="string">ch.p</span></span><br></pre></td></tr></table></figure><p><strong>The Header Route Predicate Factory</strong></p><p>如果你的<strong>请求头</strong>包含<strong>X-Request-Id</strong>这样一个请求头，并且，它的值符合<strong>正则表达式的规则</strong>，就会访问当前这个路由</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">header_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Header=X-Request-Id,</span> <span class="string">\d+</span></span><br></pre></td></tr></table></figure><p><strong>The Host Route Predicate Factory</strong></p><p>如果你的<strong>访问</strong>的是这个**.somehost.org,<strong>.<strong>anotherhost.org</strong>，</strong>域名**，就会访问当前这个路由</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">host_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Host=**.somehost.org,**.anotherhost.org</span></span><br></pre></td></tr></table></figure><p><strong>The Method Route Predicate Factory</strong></p><p>如果你的<strong>请求类别</strong>是这个<strong>GET</strong>、<strong>POST</strong>，就会访问当前这个路由</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">method_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Method=GET,POST</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>The Path Route Predicate Factory</strong></p><p>如果你的<strong>访问的地址</strong>是以这些**&#x2F;red&#x2F;{segment},&#x2F;blue&#x2F;{segment}**路径作为前缀，就会访问当前这个路由</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">path_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/red/&#123;segment&#125;,/blue/&#123;segment&#125;</span></span><br></pre></td></tr></table></figure><p><strong>The Query Route Predicate Factory</strong></p><p>根据<strong>查询条件</strong>，比如red greet green，就会访问当前这个路由</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">query_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Query=red,</span> <span class="string">gree.</span></span><br></pre></td></tr></table></figure><p><strong>The RemoteAddr Route Predicate Factory</strong></p><p>根据<strong>远程地址</strong>，比如你的用户的ip地址是192.168.1.1&#x2F;24，就会访问当前这个路由</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">remoteaddr_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RemoteAddr=192.168.1.1/24</span></span><br></pre></td></tr></table></figure><p><strong>The Weight Route Predicate Factory</strong></p><p>根据你设置的<strong>权重</strong>，给你把同一个访问的地址，重定到不同的服务，轻松实现发布控制</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">weight_high</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://weighthigh.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Weight=group1,</span> <span class="number">8</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">weight_low</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://weightlow.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Weight=group1,</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>The XForwarded Remote Addr Route Predicate Factory</strong></p><p>从请求头中如果拿到XForwarded这个<strong>请求头的地址</strong>192.168.1.1&#x2F;24 就会访问当前这个路由</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">xforwarded_remoteaddr_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">XForwardedRemoteAddr=192.168.1.1/24</span></span><br></pre></td></tr></table></figure><h2 id="4、过滤器"><a href="#4、过滤器" class="headerlink" title="4、过滤器"></a>4、过滤器</h2><hr><p><strong>官网文档</strong>：<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gatewayfilter-factories">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gatewayfilter-factories</a></p><p><strong>基本功能</strong>：对请求头、请求参数、响应头的增删改查<br>        1.添加清求头<br>        2.添加请求参数<br>        3.添加响应头<br>        4.降级<br>        5.限流<br>        6.重试</p><p><strong>The <code>AddRequestHeader</code> <code>GatewayFilter</code> Factory</strong></p><p>增加请求头 （可以用作流量染色）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">add_request_header_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=X-Request-red,</span> <span class="string">blue</span></span><br></pre></td></tr></table></figure><p>使用xuan-api做测试</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8090</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">name_api_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8123</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddRequestHeader=color,</span> <span class="string">blue</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddRequestParameter=name,</span> <span class="string">mars</span></span><br></pre></td></tr></table></figure><p>在地址栏访问：<a href="http://localhost:8090/api/name/xuan">http://localhost:8090/api/name/xuan</a></p><p>得到结果如下</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230131162105385.png" alt="image-20230131162105385"></p><p><strong>The <code>AddRequestParameter</code> <code>GatewayFilter</code> Factory</strong></p><p>增加请求参数</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">add_request_parameter_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestParameter=red,</span> <span class="string">blue</span></span><br></pre></td></tr></table></figure><p><strong>The <code>AddResponseHeader</code> <code>GatewayFilter</code> Factory</strong></p><p>添加响应头</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">add_response_header_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddResponseHeader=X-Response-Red,</span> <span class="string">Blue</span></span><br></pre></td></tr></table></figure><p><strong>The <code>DedupeResponseHeader</code> <code>GatewayFilter</code> Factory</strong></p><p>如果响应头中有重复的，去重</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">dedupe_response_header_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">DedupeResponseHeader=Access-Control-Allow-Credentials</span> <span class="string">Access-Control-Allow-Origin</span></span><br></pre></td></tr></table></figure><p>保留策略，第一，最后，随机</p><p>The <code>DedupeResponseHeader</code> filter also accepts an optional <code>strategy</code> parameter. The accepted values are <code>RETAIN_FIRST</code> (default), <code>RETAIN_LAST</code>, and <code>RETAIN_UNIQUE</code>.</p><p><strong>Spring Cloud CircuitBreaker GatewayFilter Factory</strong></p><p>降级</p><p>需要引入<strong>spring-cloud-starter-circuitbreaker-reactor-resilience4j</strong>包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-circuitbreaker-reactor-resilience4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">circuitbreaker_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://backing-service:8088</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/consumingServiceEndpoint</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">CircuitBreaker</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">myCircuitBreaker</span></span><br><span class="line">            <span class="attr">fallbackUri:</span> <span class="string">forward:/inCaseOfFailureUseThis</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RewritePath=/consumingServiceEndpoint,</span> <span class="string">/backingServiceEndpoint</span></span><br></pre></td></tr></table></figure><p><strong>The <code>FallbackHeaders</code> <code>GatewayFilter</code> Factory</strong></p><p>降级处理器，写一下降级规则</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">ingredients</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://ingredients</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=//ingredients/**</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">CircuitBreaker</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">fetchIngredients</span></span><br><span class="line">            <span class="attr">fallbackUri:</span> <span class="string">forward:/fallback</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">ingredients-fallback</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://localhost:9994</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/fallback</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">FallbackHeaders</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="attr">executionExceptionTypeHeaderName:</span> <span class="string">Test-Header</span></span><br></pre></td></tr></table></figure><p><strong>The <code>MapRequestHeader</code> <code>GatewayFilter</code> Factory</strong></p><p>如果你的<strong>请求头</strong>里面有<strong>Blue</strong>，会把<strong>Blue</strong>的值给<strong>X-Request-Red</strong>，相当于做了映射</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">map_request_header_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">MapRequestHeader=Blue,</span> <span class="string">X-Request-Red</span></span><br></pre></td></tr></table></figure><p><strong>The <code>PrefixPath</code> <code>GatewayFilter</code> Factory</strong></p><p>前缀处理器</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">prefixpath_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">PrefixPath=/mypath</span></span><br></pre></td></tr></table></figure><p>这会将&#x2F;mypath作为所有匹配请求的路径的前缀。因此，对&#x2F;hello的请求将发送到&#x2F;mypath&#x2F;hello。</p><p><strong>The <code>PreserveHostHeader</code> <code>GatewayFilter</code> Factoryatewayfilter-factory)</strong></p><p>请求头转发的时候，有时候<strong>host值</strong>会变，这个可以保证不变</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">preserve_host_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">PreserveHostHeader</span></span><br></pre></td></tr></table></figure><p><strong>The <code>RequestRateLimiter</code> <code>GatewayFilter</code> Factory</strong></p><p>限流</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230131175738299.png" alt="image-20230131175738299"></p><p>一般会使用redis+令牌桶算法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">requestratelimiter_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="attr">redis-rate-limiter.replenishRate:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">redis-rate-limiter.burstCapacity:</span> <span class="number">20</span></span><br><span class="line">            <span class="attr">redis-rate-limiter.requestedTokens:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong><code>RequestHeaderSize</code> <code>GatewayFilter</code> Factory</strong></p><p>限制请求头大小 <strong>请求保护</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">requestheadersize_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RequestHeaderSize=1000B</span></span><br></pre></td></tr></table></figure><p><strong>The RemoveRequestHeader Gateway Filter Factory</strong></p><p>移除请求头 （脱敏）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">removerequestheader_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RemoveRequestHeader=X-Request-Foo</span></span><br></pre></td></tr></table></figure><p>This removes the <code>X-Request-Foo</code> header before it is sent downstream.</p><p><strong>The <code>RewritePath</code> <code>GatewayFilter</code> Factory</strong></p><p>改写特殊的请求参数</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">rewritepath_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/red/**</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RewritePath=/red/?(?&lt;segment&gt;.*),</span> <span class="string">/$\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure><p><strong>The Retry <code>GatewayFilter</code> Factory</strong></p><p>自动帮你重试接口，降级重试</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">retry_test</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://localhost:8080/flakey</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Host=*.retry.com</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Retry</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line">            <span class="attr">statuses:</span> <span class="string">BAD_GATEWAY</span></span><br><span class="line">            <span class="attr">methods:</span> <span class="string">GET,POST</span></span><br><span class="line">            <span class="attr">backoff:</span></span><br><span class="line">              <span class="attr">firstBackoff:</span> <span class="string">10ms</span></span><br><span class="line">              <span class="attr">maxBackoff:</span> <span class="string">50ms</span></span><br><span class="line">              <span class="attr">factor:</span> <span class="number">2</span></span><br><span class="line">              <span class="attr">basedOnPreviousValue:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><strong>Default Filters</strong></p><p>默认过滤器 可以用作全局染色</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AddResponseHeader=X-Response-Default-Red,</span> <span class="string">Default-Blue</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PrefixPath=/httpbin</span></span><br></pre></td></tr></table></figure><h2 id="5、其他配置"><a href="#5、其他配置" class="headerlink" title="5、其他配置"></a>5、其他配置</h2><hr><h3 id="1、全局过滤器"><a href="#1、全局过滤器" class="headerlink" title="1、全局过滤器"></a>1、全局过滤器</h3><p> Global Filters</p><p>定义过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> GlobalFilter <span class="title function_">customFilter</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CustomGlobalFilter</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomGlobalFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;custom global filter&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、Http-timeouts-configuration"><a href="#2、Http-timeouts-configuration" class="headerlink" title="2、Http timeouts configuration"></a>2、Http timeouts configuration</h3><p>Global  timeouts </p><p>配置http超时</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">httpclient:</span></span><br><span class="line">        <span class="attr">connect-timeout:</span> <span class="number">1000</span></span><br><span class="line">        <span class="attr">response-timeout:</span> <span class="string">5s</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、CORS-Configuration"><a href="#3、CORS-Configuration" class="headerlink" title="3、CORS Configuration"></a>3、CORS Configuration</h3><p>跨域配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">globalcors:</span></span><br><span class="line">        <span class="attr">cors-configurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="string">&quot;https://docs.spring.io&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">GET</span></span><br></pre></td></tr></table></figure><p><strong>小作业：</strong></p><p>通过阅读源码：<a href="https://spring.io/projects/spring-cloud-gateway/#samples">https://spring.io/projects/spring-cloud-gateway/#samples</a> 来了解gateway编程式开发</p><h1 id="十二、项目整合网关"><a href="#十二、项目整合网关" class="headerlink" title="十二、项目整合网关"></a>十二、项目整合网关</h1><hr><ol><li>实现统一的用户鉴权 ，统一的接口调用次数统计（把API网关用到项目中）</li><li>完善功能</li></ol><p><strong>会用到的特性</strong></p><ol><li>路由（转发请求到模拟接口项目）</li><li><del>负载均衡（需要用到注册中心）</del></li><li>统一鉴权(accessKey，secretKey)</li><li>统一处理跨域</li><li>统一业务处理（每次请求接口后，接口调用次数+1）</li><li>访问控制（黑白名单）</li><li><del>发布控制</del></li><li>流量染色(记录请求是否为网关来的)</li><li><del>统一接口保护</del><ol><li>限制请求</li><li>信息脱敏</li><li>降级（熔断）</li><li>限流 学习令牌桶算法，学习露桶算法，学习一下RedislimitHandler</li><li>超时时间</li><li>重试（业务保护）</li></ol></li><li>统一日志(记录每次的请求和响应)</li><li><del>统一文档</del></li></ol><p><strong>业务逻辑</strong></p><ol><li>用户发送请求到API网关</li><li>请求日志</li><li>黑白名单</li><li>用户鉴权（判断ak，sk是否合法）</li><li>请求的模拟接口是否存在？</li><li><strong>请求转发，调用模拟接口</strong></li><li>响应日志</li><li>调用成功，接口调用次数+1</li><li>调用失败，返回规范错误码</li></ol><hr><h2 id="1、请求转发"><a href="#1、请求转发" class="headerlink" title="1、请求转发"></a>1、请求转发</h2><hr><p>使用Path匹配断言 </p><p>所有前缀为：&#x2F;api&#x2F; 的请求进行转发，转发到<a href="http://localhost:8123/api">http://localhost:8123/api</a></p><p>比如请求网关：<a href="http://localhost:8090/api/name/?name=archer%E8%BD%AC%E5%8F%91%E5%88%B0">http://localhost:8090/api/name/?name=archer转发到</a> <a href="http://localhost:8123/api/name/?name=archer">http://localhost:8123/api/name/?name=archer</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span>  </span><br><span class="line">  <span class="attr">port:</span> <span class="number">8090</span>  </span><br><span class="line">  </span><br><span class="line"><span class="attr">spring:</span>  </span><br><span class="line">  <span class="attr">cloud:</span>  </span><br><span class="line">    <span class="attr">gateway:</span>  </span><br><span class="line">      <span class="attr">routes:</span>  </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">api_route</span>  </span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8123</span>  </span><br><span class="line">          <span class="attr">predicates:</span>  </span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/**</span></span><br></pre></td></tr></table></figure><p>测试没有问题</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230201201022011.png" alt="image-20230201201022011"></p><h2 id="2、Global-Filter"><a href="#2、Global-Filter" class="headerlink" title="2、Global Filter"></a>2、Global Filter</h2><p>使用了Global Filters，全局请求拦截处理（类似aop）</p><p>查看<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#global-filters">官网</a>，使用模板代码为基础进行编写程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuan.filter;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局过滤器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 玄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/2/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomGlobalFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">log.info(<span class="string">&quot;custom global filter&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1、请求日志"><a href="#1、请求日志" class="headerlink" title="1、请求日志"></a>1、请求日志</h3><p>我们参考之前的AOP的写法，从exchange这个路由交换机里面拿到我们所有的请求的信息 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line"><span class="comment">// 1. 请求日志</span></span><br><span class="line"><span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line">log.info(<span class="string">&quot;请求id: &#123;&#125;&quot;</span>, request.getId());</span><br><span class="line">log.info(<span class="string">&quot;请求路径: &#123;&#125;&quot;</span>, request.getPath());</span><br><span class="line">log.info(<span class="string">&quot;请求方法: &#123;&#125;&quot;</span>, request.getMethod());</span><br><span class="line">log.info(<span class="string">&quot;请求参数: &#123;&#125;&quot;</span>, request.getQueryParams());</span><br><span class="line">log.info(<span class="string">&quot;请求头: &#123;&#125;&quot;</span>, request.getHeaders());</span><br><span class="line">log.info(<span class="string">&quot;请求地址: &#123;&#125;&quot;</span>, request.getRemoteAddress());</span><br><span class="line"><span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230201204627949.png" alt="image-20230201204627949"></p><h3 id="2、添加黑白名单"><a href="#2、添加黑白名单" class="headerlink" title="2、添加黑白名单"></a>2、添加黑白名单</h3><p>建议用白名单，更安全些</p><p>如果这个来源地址不是白名单里面的，我们就直接设个状态码（这里设置403），然后拦截掉 <strong>response.setComplete()</strong> 可以理解为设置响应完成 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; IP_WHITE_LIST = Arrays.asList(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;127.0.0.2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line"><span class="comment">// 1. 请求日志</span></span><br><span class="line"><span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line"><span class="type">String</span> <span class="variable">remoteAddress</span> <span class="operator">=</span> request.getRemoteAddress().getHostString();</span><br><span class="line">log.info(<span class="string">&quot;请求地址: &#123;&#125;&quot;</span>, remoteAddress);</span><br><span class="line"><span class="comment">// 2. 访问控制 - 黑白名单</span></span><br><span class="line"><span class="keyword">if</span> (!IP_WHITE_LIST.contains(remoteAddress))&#123;</span><br><span class="line"><span class="type">ServerHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> exchange.getResponse();</span><br><span class="line">response.setStatusCode(HttpStatus.FORBIDDEN);</span><br><span class="line"><span class="keyword">return</span> response.setComplete();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将IP_WHITE_LIST设置为黑名单 测试被拒</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230201205411510.png" alt="image-20230201205411510"></p><h3 id="3、用户鉴权"><a href="#3、用户鉴权" class="headerlink" title="3、用户鉴权"></a>3、用户鉴权</h3><p>找到之前用户鉴权的代码 复制过来 修改一下 需要倒入我之前做的starter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xuan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xuanapi-client-sdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line"><span class="comment">// 1. 请求日志</span></span><br><span class="line"><span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line">log.info(<span class="string">&quot;请求id: &#123;&#125;&quot;</span>, request.getId());</span><br><span class="line">log.info(<span class="string">&quot;请求路径: &#123;&#125;&quot;</span>, request.getPath());</span><br><span class="line">log.info(<span class="string">&quot;请求方法: &#123;&#125;&quot;</span>, request.getMethod());</span><br><span class="line">log.info(<span class="string">&quot;请求参数: &#123;&#125;&quot;</span>, request.getQueryParams());</span><br><span class="line">log.info(<span class="string">&quot;请求头: &#123;&#125;&quot;</span>, request.getHeaders());</span><br><span class="line"><span class="type">String</span> <span class="variable">remoteAddress</span> <span class="operator">=</span> request.getRemoteAddress().getHostString();</span><br><span class="line">log.info(<span class="string">&quot;请求地址: &#123;&#125;&quot;</span>, remoteAddress);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 访问控制 - 黑白名单</span></span><br><span class="line"><span class="keyword">if</span> (!IP_WHITE_LIST.contains(remoteAddress)) &#123;</span><br><span class="line"><span class="keyword">return</span> handleNoAuth(exchange.getResponse());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 用户鉴权</span></span><br><span class="line"><span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> request.getHeaders();</span><br><span class="line"><span class="type">String</span> <span class="variable">accessKey</span> <span class="operator">=</span> headers.getFirst(<span class="string">&quot;accessKey&quot;</span>);</span><br><span class="line"><span class="comment">// 防止中文乱码</span></span><br><span class="line"><span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">body = URLDecoder.decode(headers.getFirst(<span class="string">&quot;body&quot;</span>), StandardCharsets.UTF_8.name());</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">sign</span> <span class="operator">=</span> headers.getFirst(<span class="string">&quot;sign&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">nonce</span> <span class="operator">=</span> headers.getFirst(<span class="string">&quot;nonce&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">timestamp</span> <span class="operator">=</span> headers.getFirst(<span class="string">&quot;timestamp&quot;</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">hasBlank</span> <span class="operator">=</span> StrUtil.hasBlank(accessKey, body, sign, nonce, timestamp);</span><br><span class="line"><span class="comment">// 判断是否有空</span></span><br><span class="line"><span class="keyword">if</span> (hasBlank) &#123;</span><br><span class="line"><span class="keyword">return</span> handleInvokeError(exchange.getResponse());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// TODO 使用accessKey去数据库查询secretKey</span></span><br><span class="line"><span class="comment">// 假设查到的secret是abc 进行加密得到sign</span></span><br><span class="line"><span class="type">String</span> <span class="variable">secretKey</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">sign1</span> <span class="operator">=</span> SignUtil.getSign(body, secretKey);</span><br><span class="line"><span class="keyword">if</span> (!StrUtil.equals(sign, sign1)) &#123;</span><br><span class="line"><span class="keyword">return</span> handleInvokeError(exchange.getResponse());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// TODO 判断随机数nonce</span></span><br><span class="line"><span class="comment">// 时间戳是否为数字</span></span><br><span class="line"><span class="keyword">if</span> (!NumberUtil.isNumber(timestamp)) &#123;</span><br><span class="line"><span class="keyword">return</span> handleInvokeError(exchange.getResponse());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 五分钟内的请求有效</span></span><br><span class="line"><span class="keyword">if</span> (System.currentTimeMillis() - Long.parseLong(timestamp) &gt; FIVE_MINUTES) &#123;</span><br><span class="line"><span class="keyword">return</span> handleInvokeError(exchange.getResponse());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4. 请求的模拟接口是否存在？</span></span><br><span class="line"><span class="comment">// 5. 请求转发，调用模拟接口</span></span><br><span class="line"><span class="comment">// 6. 响应日志</span></span><br><span class="line"><span class="comment">// 7. 调用成功，接口调用次数+1</span></span><br><span class="line"><span class="comment">// 8. 调用失败，返回规范错误码</span></span><br><span class="line"><span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Mono&lt;Void&gt; <span class="title function_">handleNoAuth</span><span class="params">(ServerHttpResponse response)</span> &#123;</span><br><span class="line">response.setStatusCode(HttpStatus.FORBIDDEN);</span><br><span class="line"><span class="keyword">return</span> response.setComplete();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Mono&lt;Void&gt; <span class="title function_">handleInvokeError</span><span class="params">(ServerHttpResponse response)</span> &#123;</span><br><span class="line">response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);</span><br><span class="line"><span class="keyword">return</span> response.setComplete();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、判读请求的接口是否存在"><a href="#4、判读请求的接口是否存在" class="headerlink" title="4、判读请求的接口是否存在"></a>4、判读请求的接口是否存在</h3><p>我们可以从<strong>数据库</strong>中查询模拟接口是否存在，以及请求方法是否匹配（还可以校验请求参数） 因为网关项目没引入MyBatis等操作数据库的类库，如果该孩操作较为复杂，可以由backend增删改查项目提供接口，我们直接调用，不用再重复写逻辑了。</p><ul><li>HTTP请求（用HTTPClient、.用RestTemplate、Feign)</li><li>RPC(Dubbo)</li></ul><h3 id="5、请求转发-调用模拟接口"><a href="#5、请求转发-调用模拟接口" class="headerlink" title="5、请求转发 调用模拟接口"></a>5、请求转发 调用模拟接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5. 请求转发，调用模拟接口</span></span><br><span class="line">Mono&lt;Void&gt; filter = chain.filter(exchange);</span><br><span class="line"><span class="comment">// 6. 响应日志</span></span><br><span class="line">log.info(<span class="string">&quot;响应状态码：&#123;&#125;&quot;</span>, response.getStatusCode());</span><br><span class="line"><span class="keyword">if</span> (response.getStatusCode() == HttpStatus.OK) &#123;</span><br><span class="line"><span class="comment">// 7. 调用成功，接口调用次数+1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 8. 调用失败，返回规范错误码</span></span><br><span class="line"><span class="keyword">return</span> handleInvokeError(response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> filter;</span><br></pre></td></tr></table></figure><p>接下来需要修改客户端的地址，让它经过网关</p><p>找到SDK修改地址</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230202162858649.png" alt="image-20230202162858649"></p><h3 id="6、异步返回问题"><a href="#6、异步返回问题" class="headerlink" title="6、异步返回问题"></a>6、异步返回问题</h3><p>又出现一个问题，我们的接口调用，是在过滤器完成之后进行的，是个<strong>异步操作</strong> </p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230202163045626.png" alt="image-20230202163045626"></p><p>预期是等模拟接口调用完成，才记录响应日志、统计调用次数。<br>但现实是 chain.fitter 方法立刻返回了，直到 filter 过滤器 return 后才调用了模拟接口。<br>原因是：chain.filter 是个异步操作，理解为前端的 promise</p><p>解決方案：利用response 装饰者，增强原有 response 的处理能力<br>参考博客：<a href="https://blog.csdn.net/qq_19636353/article/details/126759522%EF%BC%88%E4%BB%A5%E8%BF%99%E4%B8%AA%E4%B8%BA%E4%B8%BB%EF%BC%89">https://blog.csdn.net/qq_19636353/article/details/126759522（以这个为主）</a><br>其他参考：<br>• <a href="https://blog.csdn.net/mo_67595943/article/details/124667975">https://blog.csdn.net/mo_67595943/article/details/124667975</a><br>• <a href="https://blog.csdn.net/weixin_43933728/article/details/121359727">https://blog.csdn.net/weixin_43933728/article/details/121359727</a><br>• <a href="https://blog.csdn.net/zx156955/article/details/121670681">https://blog.csdn.net/zx156955/article/details/121670681</a><br>• <a href="https://blog.csdn.net/qq_39529562/article/details/108911983">https://blog.csdn.net/qq_39529562/article/details/108911983</a></p><p>这些代码不用记忆 搜「Spring Cloud Gateway 响应日志」就有了</p><p>复制<a href="https://blog.csdn.net/qq_19636353/article/details/126759522">https://blog.csdn.net/qq_19636353/article/details/126759522</a>  中的Response log代码。并改写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理响应</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> exchange</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> chain</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Mono&lt;Void&gt; <span class="title function_">handleResponse</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 从交换机拿到原始response</span></span><br><span class="line"><span class="type">ServerHttpResponse</span> <span class="variable">originalResponse</span> <span class="operator">=</span> exchange.getResponse();</span><br><span class="line"><span class="comment">// 缓冲区工厂 拿到缓存数据</span></span><br><span class="line"><span class="type">DataBufferFactory</span> <span class="variable">bufferFactory</span> <span class="operator">=</span> originalResponse.bufferFactory();</span><br><span class="line"><span class="comment">// 拿到状态码</span></span><br><span class="line"><span class="type">HttpStatus</span> <span class="variable">statusCode</span> <span class="operator">=</span> originalResponse.getStatusCode();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (statusCode == HttpStatus.OK) &#123;</span><br><span class="line"><span class="comment">// 装饰，增强能力</span></span><br><span class="line"><span class="type">ServerHttpResponseDecorator</span> <span class="variable">decoratedResponse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerHttpResponseDecorator</span>(originalResponse) &#123;</span><br><span class="line"><span class="comment">// 等调用完转发的接口后才会执行</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">writeWith</span><span class="params">(Publisher&lt;? extends DataBuffer&gt; body)</span> &#123;</span><br><span class="line">log.info(<span class="string">&quot;body instanceof Flux: &#123;&#125;&quot;</span>, (body <span class="keyword">instanceof</span> Flux));</span><br><span class="line"><span class="comment">// 对象是响应式的</span></span><br><span class="line"><span class="keyword">if</span> (body <span class="keyword">instanceof</span> Flux) &#123;</span><br><span class="line"><span class="comment">// 我们拿到真正的body</span></span><br><span class="line">Flux&lt;? <span class="keyword">extends</span> <span class="title class_">DataBuffer</span>&gt; fluxBody = Flux.from(body);</span><br><span class="line"><span class="comment">// 往返回值里面写数据</span></span><br><span class="line"><span class="comment">// 拼接字符串</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">super</span>.writeWith(fluxBody.map(dataBuffer -&gt; &#123;</span><br><span class="line"><span class="comment">// TODO 7. 调用成功，接口调用次数+1</span></span><br><span class="line"><span class="comment">// data从这个content中读取</span></span><br><span class="line"><span class="type">byte</span>[] content = <span class="keyword">new</span> <span class="title class_">byte</span>[dataBuffer.readableByteCount()];</span><br><span class="line">dataBuffer.read(content);</span><br><span class="line">DataBufferUtils.release(dataBuffer);<span class="comment">// 释放掉内存</span></span><br><span class="line"><span class="comment">// 6.构建日志</span></span><br><span class="line">List&lt;Object&gt; rspArgs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">rspArgs.add(originalResponse.getStatusCode());</span><br><span class="line"><span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(content, StandardCharsets.UTF_8);<span class="comment">// data</span></span><br><span class="line">rspArgs.add(data);</span><br><span class="line">log.info(<span class="string">&quot;&lt;--- status:&#123;&#125; data:&#123;&#125;&quot;</span><span class="comment">// data</span></span><br><span class="line">, rspArgs.toArray());<span class="comment">// log.info(&quot;&lt;-- &#123;&#125; &#123;&#125;&quot;, originalResponse.getStatusCode(), data);</span></span><br><span class="line"><span class="keyword">return</span> bufferFactory.wrap(content);</span><br><span class="line">&#125;));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 8.调用失败返回错误状态码</span></span><br><span class="line">log.error(<span class="string">&quot;&lt;--- &#123;&#125; 响应code异常&quot;</span>, getStatusCode());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">super</span>.writeWith(body);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 设置 response 对象为装饰过的</span></span><br><span class="line"><span class="keyword">return</span> chain.filter(exchange.mutate().response(decoratedResponse).build());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> chain.filter(exchange);<span class="comment">// 降级处理返回数据</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">log.error(<span class="string">&quot;gateway log exception.\n&quot;</span> + e);</span><br><span class="line"><span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十二、RPC"><a href="#十二、RPC" class="headerlink" title="十二、RPC"></a>十二、RPC</h1><hr><p>RPC（Remote Procedure Call）远程过程调用</p><p><strong>网关业务逻辑</strong></p><p>问题： 网关项目比较存粹，没有操作数据库的包，并且还要调用我们之前写过的代码？复制粘贴维护麻烦<br>理想：直接请求到其他项目的方法</p><p><strong>怎么调用其他项目的方法？</strong></p><ol><li>复制代码和依赖，环境</li><li>HTTP请求（提供接口，供其他项目调用）</li><li>RPC</li><li>把公共的代码打个jar包，其他项目去引用</li></ol><p><strong>HTTP请求怎么调用</strong></p><ol><li>提供方提供一个接口（地址，请求方法，参数，返回值）</li><li>调用方使用HTTP Client之类的代码包去发送HTTP请求</li></ol><p><strong>RPC作用</strong></p><p>像调用本地方法一样去调用远程方法</p><p><strong>RPC优点</strong></p><ol><li>对开发者更透明,减少很多的沟通成本</li><li>RPC向远程服务器发送请求时，未必使用HTTP协议，比如还可以使用TCP&#x2F;IP，性能更高。（内部服务更实适用）</li></ol><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230203144005014.png" alt="image-20230203144005014"></p><p>注意： 这里注册中心只提供信息，并不会帮助调用</p><h2 id="1、Dubbo框架（RPC实现）"><a href="#1、Dubbo框架（RPC实现）" class="headerlink" title="1、Dubbo框架（RPC实现）"></a>1、Dubbo框架（RPC实现）</h2><hr><p>官网：<a href="https://cn.dubbo.apache.org/zh/">https://cn.dubbo.apache.org/zh/</a></p><p>常见框架还有GRPC、TRPC</p><p>最好的学习方式：<a href="https://dubbo.incubator.apache.org/zh/docs3-v2/java-sdk/quick-start/spring-boot/">阅读官方文档</a></p><h3 id="1、两种使用方式"><a href="#1、两种使用方式" class="headerlink" title="1、两种使用方式"></a>1、两种使用方式</h3><ol><li>Spring Boot代码（注解+编程式）：写Java接口，服务提供者和消费者都去引用这个接口<br>偏程导</li><li>DL(接口调用语言)：创建一个公共的接口定义文件，服务提供者和消费者读取这个文件。优点是跨语言，所有的框架都认识</li></ol><p>底层是Triple协议：<br><a href="https://dubbo.incubator.apache.org/zh/docs3-v2/java-sdk/concepts-and-architecture/triple/">https://dubbo.incubator.apache.org/zh/docs3-v2/java-sdk/concepts-and-architecture/triple/</a></p><h3 id="2、快速使用-（Spring-Boot）"><a href="#2、快速使用-（Spring-Boot）" class="headerlink" title="2、快速使用 （Spring Boot）"></a>2、快速使用 （Spring Boot）</h3><p>按照官网步骤来</p><p><strong>下载源码</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/apache/dubbo-samples.git</span><br></pre></td></tr></table></figure><p><strong>在IDEA中打开</strong></p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230203160423574.png" alt="image-20230203160423574"></p><p>看一下结构 </p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230203165252141.png" alt="image-20230203165252141"></p><p>consumer和provider的配置都如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo-springboot-demo-provider</span></span><br><span class="line">  <span class="attr">protocol:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">registry:</span> <span class="comment"># 注册中心</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">zk-registry</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">zookeeper://127.0.0.1:2181</span></span><br><span class="line">  <span class="attr">config-center:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">zookeeper://127.0.0.1:2181</span></span><br><span class="line">  <span class="attr">metadata-report:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">zookeeper://127.0.0.1:2181</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>EmbeddedZooKeeper 提个一个内置的ZooKeeper作为注册中心</p><p><strong>启动项目</strong></p><p>先后启动 注册中心(provider内置)、provider、consumer 测试跑通。</p><h1 id="十三、项目整合Dubbo、Nacos"><a href="#十三、项目整合Dubbo、Nacos" class="headerlink" title="十三、项目整合Dubbo、Nacos"></a>十三、项目整合Dubbo、Nacos</h1><hr><ol><li>backend项目作为<strong>服务提供者</strong>，提供3个方法：<ol><li>实际情况应该是去数据库中查是否已分配给用户</li><li>从数据库中查询模拟接口是否存在，以及请求方法是否匹配（还可以校验请求参数）</li><li>调用成功，接口调用次数+1 invokeCount</li></ol></li><li>gateway项日作为<strong>服务调用者</strong>，调用这3个方法</li></ol><h2 id="1、安装启动Nacos"><a href="#1、安装启动Nacos" class="headerlink" title="1、安装启动Nacos"></a>1、安装启动Nacos</h2><p>整合Nacos注册中：<a href="https://cn.dubbo.apache.org/zh/docs3-v2/java-sdk/reference-manual/registry/nacos/">Nacos | Apache Dubbo</a><br>Nacos下载地址：<a href="https://nacos.io/zh-cn/docs/v2/quickstart/quick-start.html">Nacos 快速开始</a></p><p>启动命令(standalone代表着单机模式运行，非集群模式)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh startup.sh -m standalone</span><br></pre></td></tr></table></figure><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230206110644915.png" alt="image-20230206110644915"></p><p>用户名、密码都是nacos</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230206110747933.png" alt="image-20230206110747933"></p><h2 id="2、项目跑通"><a href="#2、项目跑通" class="headerlink" title="2、项目跑通"></a>2、项目跑通</h2><hr><p><strong>添加依赖</strong></p><p>在api-platform-backend、api-platform-gateway中添加如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.nacos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里的nacos是我下载的版本</p><p><strong>添加配置</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo-api-platform-backend-provider</span></span><br><span class="line">  <span class="attr">protocol:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">nacos-registry</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">nacos://localhost:8848</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li><p>服务接口类必须要在同一个包下，建议是抽象出一个公共项日（放接口、实体类等）</p></li><li><p>置注解（比如启动类的EnableDubbo、接口实现类和Bean引用的注解：@DubboService、@DubboReference）</p></li><li><p>添加配置</p></li><li><p>服务调用项目和提供者项目尽量引入相同的依赖和配置</p></li></ol><h3 id="1、api-platform-backend"><a href="#1、api-platform-backend" class="headerlink" title="1、api-platform-backend"></a>1、api-platform-backend</h3><p>在主包下添加rpc包（com.xuan.project.rpc）</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230206120727992.png" alt="image-20230206120727992"></p><p>RpcDemoServer.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RpcDemoService</span> &#123;</span><br><span class="line">String <span class="title function_">sayHello</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RpcDemoServerImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DubboService</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcDemoServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">RpcDemoService</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello &quot;</span> + name + <span class="string">&quot;, request from consumer: &quot;</span> + RpcContext.getContext().getRemoteAddress());</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Application主类新增@EnableDubbo注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.xuan.project.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       SpringApplication.run(MyApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动主类查看Nacos 注册成功</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230206121543673.png" alt="image-20230206121543673"></p><h3 id="2、api-platform-gateway"><a href="#2、api-platform-gateway" class="headerlink" title="2、api-platform-gateway"></a>2、api-platform-gateway</h3><p>在和backend一样的路径下新建rpc包 （com.xuan.project.rpc） 新增接口类 代码复制过来即可</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230206121742038.png" alt="image-20230206121742038"></p><p>前往测试类做测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ApiPlatformGatewayApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DubboReference</span></span><br><span class="line"><span class="keyword">private</span> RpcDemoService rpcDemoService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testRpc</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(rpcDemoService.sayHello(<span class="string">&quot;world&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试成功~</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230206121833955.png" alt="image-20230206121833955"></p><h2 id="3、抽象公共服务"><a href="#3、抽象公共服务" class="headerlink" title="3、抽象公共服务"></a>3、抽象公共服务</h2><hr><p>项目名：api-platform-common<br>目的是让方法、实体类在多个项目间复用，减少重复编写</p><h3 id="1、抽取的服务"><a href="#1、抽取的服务" class="headerlink" title="1、抽取的服务"></a>1、抽取的服务</h3><ol><li>数据库中查是否已分配给用户秘钥(根据 accessKey 拿到用户信息，返回用户信息，为空表示不存在）</li><li>从数据库中查询模拟接口是否存在（请求路径、请求方法、请求参数，返回接口信息，为空表示不存在）</li><li>接口调用次数+ 1 invokeCount (accessKey、secretKey(标识用户），请求接口路径)</li></ol><h3 id="2、具体操作"><a href="#2、具体操作" class="headerlink" title="2、具体操作"></a>2、具体操作</h3><ol><li><p>新建maven项目</p><p>取名为api-platform-common</p><p>依赖才api-platform-backend里复制后摘出我需要的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xuan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>api-platform-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.google.code.gson/gson --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>复制之前的model包下的实体类</p></li><li><p>在common包下新建service层</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230207113847350.png" alt="image-20230207113847350"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InnerInterfaceInfoService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据path、method查询接口信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> path   请求路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> method 请求方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> InterfaceInfo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">InterfaceInfo <span class="title function_">getInvokeInterfaceInfo</span><span class="params">(String path, String method)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InnerUserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据accessKey查询用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accessKey accessKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> User</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    User <span class="title function_">getInvokeUser</span><span class="params">(String accessKey)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InnerUserInterfaceInfoService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否还有调用次数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userId          用户id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> interfaceInfoId 接口id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">hasInvokeNum</span><span class="params">(<span class="type">long</span> userId, <span class="type">long</span> interfaceInfoId)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据userId、interfaceInfoId计数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userId          用户id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> interfaceInfoId 接口id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">invokeInterfaceCount</span><span class="params">(<span class="type">long</span> userId, <span class="type">long</span> interfaceInfoId)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打包</p><p>使用maven install打包</p><p>api-platform-backend引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xuan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>api-platform-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写impl进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 玄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/2/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@DubboService</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerUserInterfaceInfoServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">InnerUserInterfaceInfoService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> UserInterfaceInfoMapper userInterfaceInfoMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasInvokeNum</span><span class="params">(<span class="type">long</span> userId, <span class="type">long</span> interfaceInfoId)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (userId &lt;= <span class="number">0</span> || interfaceInfoId &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.NOT_FOUND_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LambdaQueryWrapper&lt;UserInterfaceInfo&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">queryWrapper.eq(UserInterfaceInfo::getUserId, userId)</span><br><span class="line">.eq(UserInterfaceInfo::getInterfaceInfoId, interfaceInfoId)</span><br><span class="line">.gt(UserInterfaceInfo::getLeftNum, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">UserInterfaceInfo</span> <span class="variable">userInterfaceInfo</span> <span class="operator">=</span> userInterfaceInfoMapper.selectOne(queryWrapper);</span><br><span class="line"><span class="keyword">return</span> userInterfaceInfo != <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">invokeInterfaceCount</span><span class="params">(<span class="type">long</span> userId, <span class="type">long</span> interfaceInfoId)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (userId &lt;= <span class="number">0</span> || interfaceInfoId &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.NOT_FOUND_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LambdaUpdateWrapper&lt;UserInterfaceInfo&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">updateWrapper.eq(UserInterfaceInfo::getUserId, userId)</span><br><span class="line">.eq(UserInterfaceInfo::getInterfaceInfoId, interfaceInfoId)</span><br><span class="line">.gt(UserInterfaceInfo::getLeftNum, <span class="number">0</span>)</span><br><span class="line">.setSql(<span class="string">&quot;left_num = left_num -1, total_num = total_num + 1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">updateCount</span> <span class="operator">=</span> userInterfaceInfoMapper.update(<span class="literal">null</span>, updateWrapper);</span><br><span class="line"><span class="keyword">return</span> updateCount &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>gateway启动报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Description:</span><br><span class="line"></span><br><span class="line">Failed to configure a DataSource: <span class="string">&#x27;url&#x27;</span> attribute is not specified and no embedded datasource could be configured.</span><br><span class="line"></span><br><span class="line">Reason: Failed to determine a suitable driver <span class="keyword">class</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Action</span>:</span><br><span class="line"></span><br><span class="line">Consider the following:</span><br><span class="line">If you want an embedded <span class="title function_">database</span> <span class="params">(H2, HSQL or Derby)</span>, please put it on the classpath.</span><br><span class="line">If you have database settings to be loaded from a particular profile you may need to activate <span class="title function_">it</span> <span class="params">(no profiles are currently active)</span>.</span><br></pre></td></tr></table></figure><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230207151142622.png" alt="image-20230207151142622"></p><p>经分析我们需要在主类上排除数据库的类加载（google springboot忽略数据库启动得到）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuan.project;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.spring.context.annotation.EnableDubbo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="meta">@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class,</span></span><br><span class="line"><span class="meta">DataSourceTransactionManagerAutoConfiguration.class,</span></span><br><span class="line"><span class="meta">HibernateJpaAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiPlatformGatewayApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(ApiPlatformGatewayApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再次启动网关成功~</p></li><li><p>测试跑通</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230206180958642.png" alt="image-20230206180958642"></p></li></ol><h3 id="3、impl具体实现"><a href="#3、impl具体实现" class="headerlink" title="3、impl具体实现"></a>3、impl具体实现</h3><p>在backend新建 service&#x2F;impl&#x2F;inner包</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230207114407493.png" alt="image-20230207114407493"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 玄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/2/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@DubboService</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerInterfaceInfoServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">InnerInterfaceInfoService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> InterfaceInfoMapper interfaceInfoMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> InterfaceInfo <span class="title function_">getInvokeInterfaceInfo</span><span class="params">(String url, String method)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (StrUtil.hasBlank(url, method)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);</span><br><span class="line">&#125;</span><br><span class="line">LambdaQueryWrapper&lt;InterfaceInfo&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">lambdaQueryWrapper.eq(InterfaceInfo::getUrl, url).eq(InterfaceInfo::getMethod, method);</span><br><span class="line"><span class="keyword">return</span> interfaceInfoMapper.selectOne(lambdaQueryWrapper);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 玄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/2/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@DubboService</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerUserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">InnerUserService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getInvokeUser</span><span class="params">(String accessKey)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (StrUtil.isBlank(accessKey)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);</span><br><span class="line">&#125;</span><br><span class="line">LambdaQueryWrapper&lt;User&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">lambdaQueryWrapper.eq(User::getAccessKey, accessKey);</span><br><span class="line"><span class="keyword">return</span> userMapper.selectOne(lambdaQueryWrapper);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4、优化网关Global-Filter"><a href="#4、优化网关Global-Filter" class="headerlink" title="4、优化网关Global Filter"></a>4、优化网关Global Filter</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局过滤器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 玄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/2/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomGlobalFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DubboReference</span></span><br><span class="line"><span class="keyword">private</span> InnerUserService innerUserService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DubboReference</span></span><br><span class="line"><span class="keyword">private</span> InnerInterfaceInfoService innerInterfaceInfoService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DubboReference</span></span><br><span class="line"><span class="keyword">private</span> InnerUserInterfaceInfoService innerUserInterfaceInfoService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; IP_WHITE_LIST = Arrays.asList(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;127.0.0.2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">FIVE_MINUTES</span> <span class="operator">=</span> <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INTERFACE_HOST</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8090&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line"><span class="comment">// 1. 请求日志</span></span><br><span class="line"><span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> INTERFACE_HOST + request.getPath().value();</span><br><span class="line"><span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> Objects.requireNonNull(request.getMethod()).toString();</span><br><span class="line">log.info(<span class="string">&quot;请求id: &#123;&#125;&quot;</span>, request.getId());</span><br><span class="line">log.info(<span class="string">&quot;请求路径: &#123;&#125;&quot;</span>, path);</span><br><span class="line">log.info(<span class="string">&quot;请求方法: &#123;&#125;&quot;</span>, method);</span><br><span class="line">log.info(<span class="string">&quot;请求参数: &#123;&#125;&quot;</span>, request.getQueryParams());</span><br><span class="line">log.info(<span class="string">&quot;请求头: &#123;&#125;&quot;</span>, request.getHeaders());</span><br><span class="line"><span class="type">String</span> <span class="variable">remoteAddress</span> <span class="operator">=</span> Objects.requireNonNull(request.getRemoteAddress()).getHostString();</span><br><span class="line">log.info(<span class="string">&quot;请求地址: &#123;&#125;&quot;</span>, remoteAddress);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 访问控制 - 黑白名单</span></span><br><span class="line"><span class="type">ServerHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> exchange.getResponse();</span><br><span class="line"><span class="keyword">if</span> (!IP_WHITE_LIST.contains(remoteAddress)) &#123;</span><br><span class="line"><span class="keyword">return</span> handleNoAuth(response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 用户鉴权</span></span><br><span class="line"><span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> request.getHeaders();</span><br><span class="line"><span class="type">String</span> <span class="variable">accessKey</span> <span class="operator">=</span> headers.getFirst(<span class="string">&quot;accessKey&quot;</span>);</span><br><span class="line"><span class="comment">// 防止中文乱码</span></span><br><span class="line"><span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">body = URLDecoder.decode(headers.getFirst(<span class="string">&quot;body&quot;</span>), StandardCharsets.UTF_8.name());</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">sign</span> <span class="operator">=</span> headers.getFirst(<span class="string">&quot;sign&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">nonce</span> <span class="operator">=</span> headers.getFirst(<span class="string">&quot;nonce&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">timestamp</span> <span class="operator">=</span> headers.getFirst(<span class="string">&quot;timestamp&quot;</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">hasBlank</span> <span class="operator">=</span> StrUtil.hasBlank(accessKey, body, sign, nonce, timestamp);</span><br><span class="line"><span class="comment">// 判断是否有空</span></span><br><span class="line"><span class="keyword">if</span> (hasBlank) &#123;</span><br><span class="line"><span class="keyword">return</span> handleInvokeError(response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用accessKey去数据库查询secretKey</span></span><br><span class="line"><span class="type">User</span> <span class="variable">invokeUser</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">invokeUser = innerUserService.getInvokeUser(accessKey);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">log.error(<span class="string">&quot;getInvokeUser error&quot;</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (invokeUser == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> handleInvokeError(response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">secretKey</span> <span class="operator">=</span> invokeUser.getSecretKey();</span><br><span class="line"><span class="type">String</span> <span class="variable">sign1</span> <span class="operator">=</span> SignUtil.getSign(body, secretKey);</span><br><span class="line"><span class="keyword">if</span> (!StrUtil.equals(sign, sign1)) &#123;</span><br><span class="line"><span class="keyword">return</span> handleInvokeError(response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// TODO 判断随机数nonce</span></span><br><span class="line"><span class="comment">// 时间戳是否为数字</span></span><br><span class="line"><span class="keyword">if</span> (!NumberUtil.isNumber(timestamp)) &#123;</span><br><span class="line"><span class="keyword">return</span> handleInvokeError(response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 五分钟内的请求有效</span></span><br><span class="line"><span class="keyword">if</span> (System.currentTimeMillis() - Long.parseLong(timestamp) &gt; FIVE_MINUTES) &#123;</span><br><span class="line"><span class="keyword">return</span> handleInvokeError(response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4. 请求的模拟接口是否存在</span></span><br><span class="line"><span class="type">InterfaceInfo</span> <span class="variable">invokeInterfaceInfo</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">invokeInterfaceInfo = innerInterfaceInfoService.getInvokeInterfaceInfo(path, method);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">log.error(<span class="string">&quot;getInvokeInterfaceInfo error&quot;</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (invokeInterfaceInfo == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> handleInvokeError(response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  是否有调用次数</span></span><br><span class="line"><span class="keyword">if</span> (!innerUserInterfaceInfoService.hasInvokeNum(invokeUser.getId(), invokeInterfaceInfo.getId())) &#123;</span><br><span class="line"><span class="keyword">return</span> handleInvokeError(response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 5. 请求转发，调用模拟接口</span></span><br><span class="line"><span class="keyword">return</span> handleResponse(exchange, chain, invokeUser.getId(), invokeInterfaceInfo.getId());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理响应</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> exchange</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> chain</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Mono&lt;Void&gt; <span class="title function_">handleResponse</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain, <span class="type">long</span> userId, <span class="type">long</span> interfaceInfoId)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 从交换机拿到原始response</span></span><br><span class="line"><span class="type">ServerHttpResponse</span> <span class="variable">originalResponse</span> <span class="operator">=</span> exchange.getResponse();</span><br><span class="line"><span class="comment">// 缓冲区工厂 拿到缓存数据</span></span><br><span class="line"><span class="type">DataBufferFactory</span> <span class="variable">bufferFactory</span> <span class="operator">=</span> originalResponse.bufferFactory();</span><br><span class="line"><span class="comment">// 拿到状态码</span></span><br><span class="line"><span class="type">HttpStatus</span> <span class="variable">statusCode</span> <span class="operator">=</span> originalResponse.getStatusCode();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (statusCode == HttpStatus.OK) &#123;</span><br><span class="line"><span class="comment">// 装饰，增强能力</span></span><br><span class="line"><span class="type">ServerHttpResponseDecorator</span> <span class="variable">decoratedResponse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerHttpResponseDecorator</span>(originalResponse) &#123;</span><br><span class="line"><span class="comment">// 等调用完转发的接口后才会执行</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">writeWith</span><span class="params">(Publisher&lt;? extends DataBuffer&gt; body)</span> &#123;</span><br><span class="line">log.info(<span class="string">&quot;body instanceof Flux: &#123;&#125;&quot;</span>, (body <span class="keyword">instanceof</span> Flux));</span><br><span class="line"><span class="comment">// 对象是响应式的</span></span><br><span class="line"><span class="keyword">if</span> (body <span class="keyword">instanceof</span> Flux) &#123;</span><br><span class="line"><span class="comment">// 我们拿到真正的body</span></span><br><span class="line">Flux&lt;? <span class="keyword">extends</span> <span class="title class_">DataBuffer</span>&gt; fluxBody = Flux.from(body);</span><br><span class="line"><span class="comment">// 往返回值里面写数据</span></span><br><span class="line"><span class="comment">// 拼接字符串</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">super</span>.writeWith(fluxBody.map(dataBuffer -&gt; &#123;</span><br><span class="line"><span class="comment">// 7. 调用成功，接口调用次数+1</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">innerUserInterfaceInfoService.invokeInterfaceCount(userId, interfaceInfoId);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">log.error(<span class="string">&quot;invokeInterfaceCount error&quot;</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// data从这个content中读取</span></span><br><span class="line"><span class="type">byte</span>[] content = <span class="keyword">new</span> <span class="title class_">byte</span>[dataBuffer.readableByteCount()];</span><br><span class="line">dataBuffer.read(content);</span><br><span class="line">DataBufferUtils.release(dataBuffer);<span class="comment">// 释放掉内存</span></span><br><span class="line"><span class="comment">// 6.构建日志</span></span><br><span class="line">List&lt;Object&gt; rspArgs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">rspArgs.add(originalResponse.getStatusCode());</span><br><span class="line"><span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(content, StandardCharsets.UTF_8);<span class="comment">// data</span></span><br><span class="line">rspArgs.add(data);</span><br><span class="line">log.info(<span class="string">&quot;&lt;--- status:&#123;&#125; data:&#123;&#125;&quot;</span><span class="comment">// data</span></span><br><span class="line">, rspArgs.toArray());<span class="comment">// log.info(&quot;&lt;-- &#123;&#125; &#123;&#125;&quot;, originalResponse.getStatusCode(), data);</span></span><br><span class="line"><span class="keyword">return</span> bufferFactory.wrap(content);</span><br><span class="line">&#125;));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 8.调用失败返回错误状态码</span></span><br><span class="line">log.error(<span class="string">&quot;&lt;--- &#123;&#125; 响应code异常&quot;</span>, getStatusCode());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">super</span>.writeWith(body);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 设置 response 对象为装饰过的</span></span><br><span class="line"><span class="keyword">return</span> chain.filter(exchange.mutate().response(decoratedResponse).build());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> chain.filter(exchange);<span class="comment">// 降级处理返回数据</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">log.error(<span class="string">&quot;gateway log exception.\n&quot;</span> + e);</span><br><span class="line"><span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Mono&lt;Void&gt; <span class="title function_">handleNoAuth</span><span class="params">(ServerHttpResponse response)</span> &#123;</span><br><span class="line">response.setStatusCode(HttpStatus.FORBIDDEN);</span><br><span class="line"><span class="keyword">return</span> response.setComplete();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Mono&lt;Void&gt; <span class="title function_">handleInvokeError</span><span class="params">(ServerHttpResponse response)</span> &#123;</span><br><span class="line">response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);</span><br><span class="line"><span class="keyword">return</span> response.setComplete();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="十四、统计分析"><a href="#十四、统计分析" class="headerlink" title="十四、统计分析"></a>十四、统计分析</h1><hr><p><strong>需求</strong></p><p>​各接口的总调用次数占比（饼图）取调用最多的前 3个接口，从而分析出哪些接口没有人用（降低资源、或者下线），高频接口（增加资源、提高收费）。用饼图展示。</p><h2 id="1、后端-1"><a href="#1、后端-1" class="headerlink" title="1、后端"></a>1、后端</h2><hr><h3 id="1、编写SQL"><a href="#1、编写SQL" class="headerlink" title="1、编写SQL"></a>1、编写SQL</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">interface_info_id,</span><br><span class="line"><span class="built_in">SUM</span>( total_num ) <span class="keyword">AS</span> invoke_num </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">user_interface_info </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">interface_info_id </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">invoke_num <span class="keyword">DESC</span> </span><br><span class="line">LIMIT <span class="number">3</span></span><br></pre></td></tr></table></figure><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230207154946647.png" alt="image-20230207154946647"></p><p>SQL语句确认没问题后 再在代码里编写</p><h3 id="2、编写接口"><a href="#2、编写接口" class="headerlink" title="2、编写接口"></a>2、编写接口</h3><p>新增VO、Mapper、Service、Controller</p><p><strong>VO</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InvokeInterfaceInfoVO</span> <span class="keyword">extends</span> <span class="title class_">InterfaceInfo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接口调用次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer invokeNum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Mapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserInterfaceInfoMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;UserInterfaceInfo&gt; &#123;</span><br><span class="line">    </span><br><span class="line">List&lt;InvokeInterfaceInfoVO&gt; <span class="title function_">listTopInvokeInterfaceInfo</span><span class="params">(<span class="type">int</span> limit)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.xuan.project.mapper.UserInterfaceInfoMapper&quot;</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listTopInvokeInterfaceInfo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xuan.project.model.vo.InvokeInterfaceInfoVO&quot;</span>&gt;</span></span><br><span class="line">        SELECT interface_info_id AS id,</span><br><span class="line">               SUM(total_num)    AS invoke_num</span><br><span class="line">        FROM user_interface_info</span><br><span class="line">        GROUP BY interface_info_id</span><br><span class="line">        ORDER BY invoke_num DESC LIMIT #&#123;limit&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><font color='red'>注意</font> ：SELECT interface_info_id AS id, 这里一定要AS id 因为VO类继承的InterfaceInfo类。这里面只有id字段</p><p><strong>Service</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 玄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/2/7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChartServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ChartService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> UserInterfaceInfoMapper userInterfaceInfoMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> InterfaceInfoService interfaceInfoService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;InvokeInterfaceInfoVO&gt; <span class="title function_">listTopInvokeInterfaceInfo</span><span class="params">(<span class="type">int</span> limit)</span> &#123;</span><br><span class="line">List&lt;InvokeInterfaceInfoVO&gt; vos = userInterfaceInfoMapper.listTopInvokeInterfaceInfo(limit);</span><br><span class="line"><span class="keyword">if</span> (vos == <span class="literal">null</span> || vos.size() == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.SYSTEM_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 根据id查询接口名称</span></span><br><span class="line">LinkedHashMap&lt;Long, InvokeInterfaceInfoVO&gt; voHashMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;(vos.size());</span><br><span class="line"><span class="keyword">for</span> (InvokeInterfaceInfoVO vo : vos) &#123;</span><br><span class="line">voHashMap.put(vo.getId(), vo);</span><br><span class="line">&#125;</span><br><span class="line">LambdaQueryWrapper&lt;InterfaceInfo&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">queryWrapper.in(InterfaceInfo::getId, voHashMap.keySet());</span><br><span class="line">List&lt;InterfaceInfo&gt; infoList = interfaceInfoService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (InterfaceInfo interfaceInfo : infoList) &#123;</span><br><span class="line">voHashMap.get(interfaceInfo.getId()).setName(interfaceInfo.getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(voHashMap.values());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也可以使用stream流来实现</p><p><strong>Controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 图表</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 玄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/2/7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/chart&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChartController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> ChartService chartService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/top/interface/invoke&quot;)</span></span><br><span class="line">BaseResponse&lt;List&lt;InvokeInterfaceInfoVO&gt;&gt; <span class="title function_">listTopInvokeInterfaceInfo</span> <span class="params">()</span> &#123;</span><br><span class="line">List&lt;InvokeInterfaceInfoVO&gt; listTopInvokeInterfaceInfo = chartService.listTopInvokeInterfaceInfo(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">return</span> ResultUtils.success(listTopInvokeInterfaceInfo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2、前端-1"><a href="#2、前端-1" class="headerlink" title="2、前端"></a>2、前端</h2><hr><p>图表强烈推荐用现成的库！！！<br>比如：</p><ul><li><a href="https://echarts.apache.org/zh/index.html">ECharts</a>（推荐）</li><li><a href="https://antv.vision/zh">AntV</a>（推荐）</li><li>BizCharts</li></ul><p>使用步骤都大同小异</p><ol><li>看官网</li><li>找到快速入门、按文档去引入库</li><li>进入示例页面</li><li>找到你要的图</li><li>在线调试</li><li>复制代码</li><li>改为真实数据</li></ol><p>这里选择使用了Echars再加上使用的是react 所以用这个库：<a href="https://github.com/hustcc/echarts-for-react">https://github.com/hustcc/echarts-for-react</a></p><p>config&#x2F;routes.ts下新增路由</p><p>src&#x2F;pages&#x2F;Admin中使用上面步骤写了一个简单页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PageContainer</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@ant-design/pro-components&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactECharts</span> <span class="keyword">from</span> <span class="string">&#x27;echarts-for-react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; listTopInvokeInterfaceInfoUsingGET &#125; <span class="keyword">from</span> <span class="string">&#x27;@/services/api-platform-backend/chartController&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">InterfaceChart</span>: <span class="title class_">React</span>.<span class="property">FC</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> [data, setData] = useState&lt;<span class="variable constant_">API</span>.<span class="property">InvokeInterfaceInfoVO</span>[]&gt;([]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">listTopInvokeInterfaceInfoUsingGET</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.<span class="property">data</span>) &#123;</span><br><span class="line">        <span class="title function_">setData</span>(res.<span class="property">data</span>);</span><br><span class="line">        <span class="title function_">setLoading</span>(<span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> chartInterface = data.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">value</span>: item.<span class="property">invokeNum</span>,</span><br><span class="line">      <span class="attr">name</span>: item.<span class="property">name</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> option = &#123;</span><br><span class="line">    <span class="attr">tooltip</span>: &#123;</span><br><span class="line">      <span class="attr">trigger</span>: <span class="string">&#x27;item&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">legend</span>: &#123;</span><br><span class="line">      <span class="attr">top</span>: <span class="string">&#x27;5%&#x27;</span>,</span><br><span class="line">      <span class="attr">left</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Access From&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;pie&#x27;</span>,</span><br><span class="line">        <span class="attr">radius</span>: [<span class="string">&#x27;40%&#x27;</span>, <span class="string">&#x27;70%&#x27;</span>],</span><br><span class="line">        <span class="attr">avoidLabelOverlap</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">          <span class="attr">borderRadius</span>: <span class="number">10</span>,</span><br><span class="line">          <span class="attr">borderColor</span>: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">          <span class="attr">borderWidth</span>: <span class="number">2</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">label</span>: &#123;</span><br><span class="line">          <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">position</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">emphasis</span>: &#123;</span><br><span class="line">          <span class="attr">label</span>: &#123;</span><br><span class="line">            <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">fontSize</span>: <span class="number">20</span>,</span><br><span class="line">            <span class="attr">fontWeight</span>: <span class="string">&#x27;bold&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">labelLine</span>: &#123;</span><br><span class="line">          <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">data</span>: chartInterface,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">PageContainer</span> <span class="attr">title</span>=<span class="string">&#123;</span>&#x27;<span class="attr">接口调用情况</span>&#x27;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ReactECharts</span> <span class="attr">showLoading</span>=<span class="string">&#123;loading&#125;</span> <span class="attr">option</span>=<span class="string">&#123;option&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">PageContainer</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">InterfaceChart</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="D:/%25E6%25A1%258C%25E9%259D%25A2/notes/%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25AA/API%25E6%258E%25A5%25E5%258F%25A3%25E5%25B9%25B3%25E5%258F%25B0/API%25E5%25BC%2580%25E6%2594%25BE%25E5%25B9%25B3%25E5%258F%25B0.assets/image-20230207184004186.png" alt="image-20230207184004186"></p><h1 id="十五、拓展点"><a href="#十五、拓展点" class="headerlink" title="十五、拓展点"></a>十五、拓展点</h1><ol><li>用户可以申请更换签名</li><li>怎么让其他用户也上传接口？<br>需要提供一个机制 (界面），让用户输入自己的接口host （服务器地址）、接口信息，将接口信息写入数据库。<br>可以在 interfacelnto 表里加个 host 字段，区分服务器地址，让接口提供者更灵活地接入系统。<br>将接口信息写入数据库之前，要对接口进行校验（比如检查他的地址是否遵循规则，测试调用），保证他是正常的。<br>将接口信息写入数据库之前遵循咱们的要求（井且使用咱们的 sdk），在接入时，平台需要测试调用这个接口，保证他是正常的。</li><li>网关校验是否还有调用次数<br>需要考虑井发问题，防止瞬间调用超额。</li><li>网关优化<br>比如增加限流 &#x2F;降级保护，提高性能等。还可以考虑搭配 Nginx 网关使用。</li><li>功能增强<br>可以针对不同的请求头或者接口类型来设计前端界面和表单，便于用户调用，获得更好的体验。<br>可以参考 swagger、postman、knife4j 的页面。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0-1独立实现管理系统 bug记录</title>
      <link href="/2023/01/27/0-1%E7%8B%AC%E7%AB%8B%E5%AE%9E%E7%8E%B0%E7%AE%A1%E7%90%86%E7%B3%BB-bug%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/01/27/0-1%E7%8B%AC%E7%AB%8B%E5%AE%9E%E7%8E%B0%E7%AE%A1%E7%90%86%E7%B3%BB-bug%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1-MySQL提示Incorrect-column-name-‘xxx’"><a href="#1-MySQL提示Incorrect-column-name-‘xxx’" class="headerlink" title="1.MySQL提示Incorrect column name ‘xxx’"></a>1.MySQL提示Incorrect column name ‘xxx’</h2><p>因为字段名是在sqlfather复制过来的，导致每个字段后面都多加了一个空格</p><p>所以MySQL会提示字段名不正确<br>解决这个问题的办法很简单，只用<code>删除每个字段名后面的空格</code>即可！</p><h2 id="2-Cannot-resolve-class-‘Driver’"><a href="#2-Cannot-resolve-class-‘Driver’" class="headerlink" title="2.Cannot resolve class ‘Driver’"></a>2.Cannot resolve class ‘Driver’</h2><p><strong>描述：</strong>在application.yml中配置数据库，发现driver-class-name 爆红，原因是Cannot resolve class ‘Driver’</p><p><img src="https://img-blog.csdnimg.cn/20201227212822512.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTAxODU4Nw==,size_16,color_FFFFFF,t_70" alt="img"></p><h2 id="3-Application-run-failed问题解决"><a href="#3-Application-run-failed问题解决" class="headerlink" title="3.Application run failed问题解决"></a>3.Application run failed问题解决</h2><h3 id="1-yml编码问题"><a href="#1-yml编码问题" class="headerlink" title="1.yml编码问题"></a>1.yml编码问题</h3><p>解决方法：修改application.yml文件格式。改为UTF-8。</p><p> Editor –&gt; File Encodings –&gt; Default encoding for properties files: UTF-8。</p><h3 id="2-配置文件删除"><a href="#2-配置文件删除" class="headerlink" title="2.配置文件删除"></a>2.配置文件删除</h3><h2 id="4-Cause-java-sql-SQLException-The-server-time-zone-value-‘�й���׼ʱ��‘-is-unrecognized-or-repres"><a href="#4-Cause-java-sql-SQLException-The-server-time-zone-value-‘�й���׼ʱ��‘-is-unrecognized-or-repres" class="headerlink" title="4.Cause: java.sql.SQLException: The server time zone value ‘�й���׼ʱ��‘ is unrecognized or repres"></a>4.Cause: java.sql.SQLException: The server time zone value ‘�й���׼ʱ��‘ is unrecognized or repres</h2><p>问题描述：<br>Cause: java.sql.SQLException: The server time zone value ‘�й���׼ʱ��’ is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the serverTimezone configuration property) to use a more specifc time zone value if you want to utilize time zone support.<br>持久化异常原因:java.sql.SQLException:服务器时区值’ й׼ʱ’无法识别或代表多个时区。 如果希望利用时区支持，则必须(通过serverTimezone配置属性)配置服务器或<a href="https://so.csdn.net/so/search?q=JDBC%E9%A9%B1%E5%8A%A8&spm=1001.2101.3001.7020">JDBC驱动</a>程序，以使用更特定的时区值。</p><p>解决办法：</p><p>mybatis.config.xml文件中url加入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">datasource:</span><br><span class="line">  driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">  url: jdbc:mysql://localhost:3306/usercenter?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC</span><br><span class="line">  username: root</span><br><span class="line">  password: root</span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="通过java正则解析字符串"><a href="#通过java正则解析字符串" class="headerlink" title="通过java正则解析字符串"></a>通过java正则解析字符串</h3><p>java正则表达式通过java.util.regex包下的Pattern类与Matcher类实现                                         </p><blockquote><p>一、Pattren</p></blockquote><p>作用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、Pattern类用于创建一个正则表达式,也可以说创建一个匹配模式</span><br><span class="line">2、它的构造方法是私有的,不可以直接创建,通过Pattern.complie(String regex)简单工厂方法创建一个正则表达式, </span><br><span class="line"></span><br><span class="line">3、Pattern类只能做一些简单的匹配操作</span><br><span class="line"></span><br><span class="line">4、Pattren p = Pattren.compile(&quot;\\s+&quot;); </span><br></pre></td></tr></table></figure><p>方法：1、Pattern.split(CharSequence input)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">用于分隔字符串,并返回一个String[],我猜String.split(String regex)就是通过Pattern.split(CharSequence input)来实现</span><br><span class="line"></span><br><span class="line">Pattern p=Pattern.compile(<span class="string">&quot;\\d+&quot;</span>); </span><br><span class="line">String[] str=p.split(<span class="string">&quot;我的QQ是:456456我的电话是:0532214我的邮箱是:aaa@aaa.com&quot;</span>); </span><br><span class="line">结果:str[<span class="number">0</span>]=<span class="string">&quot;我的QQ是:&quot;</span> str[<span class="number">1</span>]=<span class="string">&quot;我的电话是:&quot;</span> str[<span class="number">2</span>]=<span class="string">&quot;我的邮箱是:aaa@aaa.com&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、Pattern.matcher(String regex,CharSequence input)</span><br><span class="line"></span><br><span class="line">是一个静态方法,用于快速匹配字符串,该方法适合用于只匹配一次,且匹配全部字符串，返回一个布尔值。</span><br><span class="line"></span><br><span class="line">Pattern.matches(<span class="string">&quot;\\d+&quot;</span>,<span class="string">&quot;2223&quot;</span>);<span class="comment">//返回true </span></span><br><span class="line">Pattern.matches(<span class="string">&quot;\\d+&quot;</span>,<span class="string">&quot;2223aa&quot;</span>);<span class="comment">//返回false,需要匹配到所有字符串才能返回true,这里aa不能匹配到 </span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、Pattern.matcher(CharSequence input)</span><br><span class="line"></span><br><span class="line">返回一个Matcher对象.</span><br><span class="line"></span><br><span class="line">Pattern p=Pattern.compile(<span class="string">&quot;\\d+&quot;</span>); </span><br><span class="line">Matcher m=p.matcher(<span class="string">&quot;22bb23&quot;</span>); </span><br></pre></td></tr></table></figure><blockquote><p>二、Matcher</p></blockquote><p>作用：1、Matcher类的构造方法也是私有的,不能随意创建,只能通过Pattern.matcher(CharSequence input)方法得到该类的实例.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2、将Pattern与Matcher一起合作.Matcher类提供了对正则表达式的分组支持,以及对正则表达式的多次匹配支持.</span><br></pre></td></tr></table></figure><p>方法：1、Matcher.matches()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">matches()对整个字符串进行匹配,只有整个字符串都匹配了才返回<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Pattern p=Pattern.compile(<span class="string">&quot;\\d+&quot;</span>); </span><br><span class="line">Matcher m=p.matcher(<span class="string">&quot;22bb23&quot;</span>); </span><br><span class="line">m.matches();<span class="comment">//返回false,因为bb不能被\d+匹配,导致整个字符串匹配未成功. </span></span><br><span class="line">Matcher m2=p.matcher(<span class="string">&quot;2223&quot;</span>); </span><br><span class="line">m2.matches();<span class="comment">//返回true,因为\d+匹配到了整个字符串</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、Matcher.lookingAt()</span><br><span class="line"></span><br><span class="line">对前面的字符串进行匹配,只有匹配到的字符串在最前面才返回<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Pattern p=Pattern.compile(<span class="string">&quot;\\d+&quot;</span>); </span><br><span class="line">Matcher m=p.matcher(<span class="string">&quot;22bb23&quot;</span>); </span><br><span class="line">m.lookingAt();<span class="comment">//返回true,因为\d+匹配到了前面的22 </span></span><br><span class="line">Matcher m2=p.matcher(<span class="string">&quot;aa2223&quot;</span>); </span><br><span class="line">m2.lookingAt();<span class="comment">//返回false,因为\d+不能匹配前面的aa </span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、Matcher.find()</span><br><span class="line"></span><br><span class="line">对字符串进行匹配,匹配到的字符串可以在任何位置. </span><br><span class="line"></span><br><span class="line">Pattern p=Pattern.compile(<span class="string">&quot;\\d+&quot;</span>); </span><br><span class="line">Matcher m=p.matcher(<span class="string">&quot;22bb23&quot;</span>); </span><br><span class="line">m.find();<span class="comment">//返回true </span></span><br><span class="line">Matcher m2=p.matcher(<span class="string">&quot;aa2223&quot;</span>); </span><br><span class="line">m2.find();<span class="comment">//返回true </span></span><br><span class="line">Matcher m3=p.matcher(<span class="string">&quot;aa2223bb&quot;</span>); </span><br><span class="line">m3.find();<span class="comment">//返回true </span></span><br><span class="line">Matcher m4=p.matcher(<span class="string">&quot;aabb&quot;</span>); </span><br><span class="line">m4.find();<span class="comment">//返回false </span></span><br><span class="line"><span class="number">4</span>、Mathcer.start()/ Matcher.end()/ Matcher.group()</span><br><span class="line"></span><br><span class="line"> 当使用matches(),lookingAt(),find()执行匹配操作后,就可以利用以上三个方法得到更详细的信息. </span><br><span class="line"> start()返回匹配到的子字符串在字符串中的索引位置. </span><br><span class="line"> end()返回匹配到的子字符串的最后一个字符在字符串中的索引位置. </span><br><span class="line"> group()返回匹配到的子字符串 </span><br></pre></td></tr></table></figure><h3 id="apache-commonUtils-工具类"><a href="#apache-commonUtils-工具类" class="headerlink" title="apache commonUtils 工具类"></a><strong>apache commonUtils</strong> 工具类</h3><p><a href="https://blog.csdn.net/m0_37989980/article/details/126396868">(42条消息) 常用工具类 (一) : Apache Commons 常用工具类整理 (全)_</a>     </p><p><strong>引入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​         </p>]]></content>
      
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/2022/05/11/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2022/05/11/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11687/image-20220909092454320.png" alt="image-20220909092454320"></p><h4 id="1、选择排序（了解）"><a href="#1、选择排序（了解）" class="headerlink" title="1、选择排序（了解）"></a>1、选择排序（了解）</h4><p><strong>思路</strong>：每一轮选取未排定的部分中最小的部分交换到未排定部分的最开头，经过若干个步骤，就能排定整个数组。即：先选出最小的，再选出第 2 小的，以此类推。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelectSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] Selectsort(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[j] &lt; nums[minIndex]) &#123;</span><br><span class="line">                    minIndex = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(nums, i, minIndex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> minIndex)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        nums[i] = nums[minIndex];</span><br><span class="line">        nums[minIndex] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums = &#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">SelectSort</span> <span class="variable">sort</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SelectSort</span>();</span><br><span class="line">        <span class="type">int</span>[] res = sort.Selectsort(nums);</span><br><span class="line">        System.out.println(Arrays.toString(res));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li><p><strong>算法思想 1：</strong>贪心算法：每一次决策只看当前，当前最优，则全局最优。注意：这种思想不是任何时候都适用。</p></li><li><p><strong>算法思想 2：</strong>减治思想：外层循环每一次都能排定一个元素，问题的规模逐渐减少，直到全部解决，即「大而化小，小而化了」。运用「减治思想」很典型的算法就是大名鼎鼎的「二分查找」。</p></li><li><p><strong>优点：</strong>交换次数最少。</p></li></ul><p>总的来说，选择排序是一种很容易理解和实现的简单排序算法，它有两个很鲜明的<strong>特点</strong>。</p><p>**运行时间和输入无关:**为了找出最小的元素而扫描一遍数组并不能为下一遍扫描提供什么信息。 这种性质在某些情况下是缺点，因为使用选择排序的人可能会惊讶地发现，一个已经有序的数组或 是主键全部相等的数组和一个元素随机排列的数组所用的排序时间竟然一样长！我们将会看到，其 他算法会更善于利用输入的初始状态。<br>**数据移动是最少的:**每次交换都会改变两个数组元素的值，因此选择排序用了N次交换一交 换次数和数组的大小是线性关系。我们将研究的其他任何算法都不具备这个特征（大部分的增长数 量级都是线性对数或是平方级别)。</p><p><strong>复杂度分析</strong>：</p><ul><li><p>时间复杂度：O(N^2)，这里 N是数组的长度；</p></li><li><p>空间复杂度：O(1)，使用到常数个临时变量。</p></li></ul><h4 id="2、插入排序（熟悉）"><a href="#2、插入排序（熟悉）" class="headerlink" title="2、插入排序（熟悉）"></a>2、插入排序（熟悉）</h4><p><strong>思路：</strong>每次将一个数字插入一个有序的数组里，成为一个长度更长的有序数组，有限次操作以后，数组整体有序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertionSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] insertionSort(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; temp &lt; nums[j - <span class="number">1</span>]) &#123;</span><br><span class="line"><span class="comment">//                nums[j--] = nums[j-1];        ???</span></span><br><span class="line">                nums[j] = nums[j - <span class="number">1</span>];</span><br><span class="line">                --j;</span><br><span class="line">            &#125;</span><br><span class="line">            nums[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>优化：</strong>「将一个数字插入一个有序的数组」这一步，可以不使用逐步交换，使用先赋值给「临时变量」，然后「适当的元素」后移，空出一个位置，最后把「临时变量」赋值给这个空位的策略（就是上面那张图的意思）。编码的时候如果不小心，可能会把数组的值修改，建议多调试；</p><p><strong>特点：</strong>「插入排序」可以提前终止内层循环（体现在 nums[j - 1] &gt; temp 不满足时），在数组「几乎有序」的前提下，「插入排序」的时间复杂度可以达到 O(N)；</p><p>由于<strong>「插入排序」在「几乎有序」的数组上表现良好</strong>，特别地，在<strong>「短数组」上的表现也很好</strong>。因为「短数组」的特点是：每个元素离它最终排定的位置都不会太远。为此，在小区间内执行排序任务的时候，可以转向使用「插入排序」。</p><p><strong>复杂度分析：</strong></p><p>时间复杂度：O(N^2)，这里 NN 是数组的长度；<br>空间复杂度：O(1)，使用到常数个临时变量。</p><h4 id="3、归并排序（重点）"><a href="#3、归并排序（重点）" class="headerlink" title="3、归并排序（重点）"></a>3、归并排序（重点）</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11687/image-20220909094950529.png" alt="image-20220909094950529"></p><ul><li>基本思路：借助额外空间，合并两个有序数组，得到更长的有序数组。对一个长为 n的待排序的序列，我们将其分解成两个长度为 n&#x2F;2 的子序列。每次先递归调用函数使两个子序列有序，然后我们再线性合并两个有序的子序列使整个序列有序。</li><li>算法思想：分而治之（分治思想）。「分而治之」思想的形象理解是「曹冲称象」、MapReduce，在一定情况下可以并行化。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] mergeSort(<span class="type">int</span>[] nums, <span class="type">int</span>[] tmp, <span class="type">int</span> low, <span class="type">int</span> high) &#123;</span><br><span class="line">        <span class="keyword">if</span> (low == high) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (low+high)/<span class="number">2</span>;</span><br><span class="line">        mergeSort(nums, tmp, low, mid);</span><br><span class="line">        mergeSort(nums, tmp, mid + <span class="number">1</span>, high);</span><br><span class="line">        merge(nums,tmp, low, mid + <span class="number">1</span>, high);</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span>[] tmp, <span class="type">int</span> low, <span class="type">int</span> mid, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> low, j = mid, k = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &lt; mid &amp;&amp; j &lt;= high) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt; nums[j]) &#123;</span><br><span class="line">                tmp[k++] = nums[i++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tmp[k++] = nums[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; mid) &#123;</span><br><span class="line">            tmp[k++] = nums[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (j &lt;= high) &#123;</span><br><span class="line">            tmp[k++] = nums[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>, k = low; k &lt;= high; ) &#123;</span><br><span class="line">            nums[k++] = tmp[i++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="comment">// 终止条件</span></span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 递归划分</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (l + r) / <span class="number">2</span>;</span><br><span class="line">    mergeSort(nums, l, m);</span><br><span class="line">    mergeSort(nums, m + <span class="number">1</span>, r);</span><br><span class="line">    <span class="comment">// 合并子数组</span></span><br><span class="line">    <span class="type">int</span>[] tmp = <span class="keyword">new</span> <span class="title class_">int</span>[r - l + <span class="number">1</span>]; <span class="comment">// 暂存需合并区间元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> l; k &lt;= r; k++)</span><br><span class="line">        tmp[k - l] = nums[k];</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = m - l + <span class="number">1</span>;       <span class="comment">// 两指针分别指向左/右子数组的首个元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> l; k &lt;= r; k++) &#123;  <span class="comment">// 遍历合并左/右子数组</span></span><br><span class="line">        <span class="keyword">if</span> (i == m - l + <span class="number">1</span>)</span><br><span class="line">            nums[k] = tmp[j++];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (j == r - l + <span class="number">1</span> || tmp[i] &lt;= tmp[j])</span><br><span class="line">            nums[k] = tmp[i++];</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            nums[k] = tmp[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="type">int</span>[] nums = &#123; <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span> &#125;;</span><br><span class="line">mergeSort(nums, <span class="number">0</span>, len(nums) - <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：实现归并排序的时候，要特别注意，不要把这个算法实现成非稳定排序，区别就在 &lt;&#x3D; 和 &lt; ，已在代码中注明。<br>「归并排序」比「快速排序」好的一点是，它借助了额外空间，可以实现「稳定排序」，Java 里对于「对象数组」的排序任务，就是使用归并排序（的升级版 TimSort，在这里就不多做介绍）。</p><p><strong>复杂度分析：</strong></p><p>时间复杂度：O(NlogN)，这里 NN 是数组的长度；<br>空间复杂度：O(N)，辅助数组与输入数组规模相当。<br>「归并排序」也有「原地归并排序」和「不使用递归」的归并排序，但是我个人觉得不常用，编码、调试都有一定难度。<strong>递归、分治处理问题的思想在基础算法领域是非常常见的，建议多练习编写「归并排序」学习递归思想，了解递归的细节，熟悉分治的思想。</strong></p><h4 id="4、快速排序（重点）"><a href="#4、快速排序（重点）" class="headerlink" title="4、快速排序（重点）"></a>4、快速排序（重点）</h4><p><strong>基本思路：</strong>快速排序每一次都排定一个元素（这个元素呆在了它最终应该呆的位置），然后递归地去排它左边的部分和右边的部分，依次进行下去，直到数组有序；</p><p><strong>算法思想：</strong>分而治之（分治思想），与「归并排序」不同，「快速排序」在「分」这件事情上不想「归并排序」无脑地一分为二，而是采用了 partition 的方法（书上，和网上都有介绍，就不展开了），因此就没有「合」的过程。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11687/image-20220912192615359.png" alt="image-20220912192615359"></p><p><strong>实现细节（注意事项）：</strong>（针对特殊测试用例：顺序数组或者逆序数组）一定要随机化选择切分元素（pivot），否则在输入数组是有序数组或者是逆序数组的时候，快速排序会变得非常慢（等同于冒泡排序或者「选择排序」）；</p><p>以下是针对特殊测试用例（有很多重复元素的输入数组）有 <strong>3 种版本</strong>的：</p><ul><li><strong>版本 1：</strong>基本：把等于切分元素的所有元素分到了数组的同一侧，可能会造成递归树倾斜；</li><li>版本 2：双指针：把等于切分元素的所有元素等概率地分到了数组的两侧，避免了递归树倾斜，递归树相对平衡；</li><li><strong>版本 3</strong>：三指针：把等于切分元素的所有元素挤到了数组的中间，在有很多元素和切分元素相等的情况下，递归区间大大减少。</li><li>这里有一个经验的总结：之所以***有这些优化，起因都是来自「递归树」的高度。关于「树」的算法的优化，绝大部分都是在和树的「高度」较劲。类似的通过减少树高度、使得树更平衡的数据结构还有「二叉搜索树」优化成「AVL 树」或者「红黑树」、「并查集」的「按秩合并」与「路径压缩」。</li></ul><p>写对「快速排序」的技巧：保持「循环不变量」，即定义的变量在循环开始前、循环过程中、循环结束以后，都保持不变的性质，这个性质是人为根据问题特点定义的。<br>「循环不变量」的内容在《算法导论》这本书里有介绍。我个人觉得非常有用。「循环不变量」是证明算法有效性的基础，更是写对代码的保证，遵守循环不变量，是不是该写等于号，先交换还是先 ++ ，就会特别清楚，绝对不会写错，我在编码的时候，会将遵守的「循环不变量」作为注释写在代码中。<br>快速排序丢失了稳定性，如果需要稳定的快速排序，需要具体定义比较函数，这个过程叫「稳定化」，在这里就不展开了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] quickSort(<span class="type">int</span>[] nums,<span class="type">int</span> low,<span class="type">int</span> high) &#123;</span><br><span class="line">        <span class="type">int</span> pivot;</span><br><span class="line">        <span class="keyword">if</span>(low &gt;= high)&#123;</span><br><span class="line">            <span class="keyword">return</span> nums;</span><br><span class="line">        &#125;</span><br><span class="line">        pivot = partition(nums, low, high);</span><br><span class="line">        quickSort(nums, <span class="number">0</span>, pivot - <span class="number">1</span>);</span><br><span class="line">        quickSort(nums, pivot + <span class="number">1</span>, high);</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[low];</span><br><span class="line">        <span class="keyword">while</span> (low != high) &#123;</span><br><span class="line">            <span class="keyword">while</span> (low &lt; high &amp;&amp; nums[high] &gt;= temp) &#123;</span><br><span class="line">                high--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">                nums[low] = nums[high];</span><br><span class="line">                low++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (low &lt; high &amp;&amp; nums[low] &lt;= temp) &#123;</span><br><span class="line">                low++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">                nums[high] = nums[low];</span><br><span class="line">                high--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        nums[low] = temp;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="comment">// 子数组长度为 1 时终止递归</span></span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 哨兵划分操作</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> partition(nums, l, r);</span><br><span class="line">    <span class="comment">// 递归左（右）子数组执行哨兵划分</span></span><br><span class="line">    quickSort(nums, l, i - <span class="number">1</span>);</span><br><span class="line">    quickSort(nums, i + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="comment">// 以 nums[l] 作为基准数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l, j = r;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; nums[j] &gt;= nums[l]) j--;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; nums[i] &lt;= nums[l]) i++;</span><br><span class="line">        swap(nums, i, j);</span><br><span class="line">    &#125;</span><br><span class="line">    swap(nums, i, l);</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="comment">// 交换 nums[i] 和 nums[j]</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">    nums[i] = nums[j];</span><br><span class="line">    nums[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="type">int</span>[] nums = &#123; <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span> &#125;;</span><br><span class="line">quickSort(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><p>时间复杂度：基于随机选取主元的快速排序时间复杂度为期望 O(nlogn)，其中 n 为数组的长度。详细证明过程可以见《算法导论》第七章，这里不再大篇幅赘述。</p><p>空间复杂度：O(h)，其中 h 为快速排序递归调用的层数。我们需要额外的 O(h) 的递归调用的栈空间，由于划分的结果不同导致了快速排序递归调用的层数也会不同，最坏情况下需O(n) 的空间，最优情况下每次都平衡，此时整个递归树高度为  nlogn，空间复杂度为O(logn)。</p><h4 id="5、堆排序（堆很重要，堆排序根据个人情况掌握）"><a href="#5、堆排序（堆很重要，堆排序根据个人情况掌握）" class="headerlink" title="5、堆排序（堆很重要，堆排序根据个人情况掌握）"></a>5、堆排序（堆很重要，堆排序根据个人情况掌握）</h4><h4 id="6、希尔排序（不建议多花时间了解）"><a href="#6、希尔排序（不建议多花时间了解）" class="headerlink" title="6、希尔排序（不建议多花时间了解）"></a>6、希尔排序（不建议多花时间了解）</h4><h4 id="7、冒泡排序（了解）"><a href="#7、冒泡排序（了解）" class="headerlink" title="7、冒泡排序（了解）"></a>7、冒泡排序（了解）</h4><h3 id="3-种「非比较」的排序算法（了解，如果是面向笔试，不要花时间去研究）"><a href="#3-种「非比较」的排序算法（了解，如果是面向笔试，不要花时间去研究）" class="headerlink" title="3 种「非比较」的排序算法（了解，如果是面向笔试，不要花时间去研究）"></a>3 种「非比较」的排序算法（了解，如果是面向笔试，不要花时间去研究）</h3><h4 id="8、计数排序（了解）"><a href="#8、计数排序（了解）" class="headerlink" title="8、计数排序（了解）"></a>8、计数排序（了解）</h4><h4 id="9、基数排序（了解）"><a href="#9、基数排序（了解）" class="headerlink" title="9、基数排序（了解）"></a>9、基数排序（了解）</h4><h4 id="10、桶排序（了解）"><a href="#10、桶排序（了解）" class="headerlink" title="10、桶排序（了解）"></a>10、桶排序（了解）</h4>]]></content>
      
      
      
        <tags>
            
            <tag> 算法与数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法笔记</title>
      <link href="/2022/03/25/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/03/25/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一、位运算"><a href="#一、位运算" class="headerlink" title="一、位运算"></a>一、位运算</h3><h4 id="1-不用中间变量交换两个数"><a href="#1-不用中间变量交换两个数" class="headerlink" title="1.不用中间变量交换两个数"></a>1.不用中间变量交换两个数</h4><ol><li><p>加法运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a,b;</span><br><span class="line">a = a + b;</span><br><span class="line">b = a - b;</span><br><span class="line">a = a - b;</span><br></pre></td></tr></table></figure></li><li><p>位运算(时间效率高)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a != b;</span></span><br><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b;</span><br><span class="line">a = a ^ b;</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-位1的个数"><a href="#2-位1的个数" class="headerlink" title="2.位1的个数"></a>2.<a href="https://leetcode-cn.com/problems/number-of-1-bits/">位1的个数</a></h4><h5 id="1-右移32次"><a href="#1-右移32次" class="headerlink" title="1).右移32次"></a>1).右移32次</h5><ul><li>使用 <code>n &amp; 1</code> 得到二进制末尾是否为 1；</li><li>把 <code>n</code> 右移 1 位，直至结束。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hammingWeight</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i) &#123;</span><br><span class="line">        count += n &amp; <span class="number">1</span>;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-消除二进制末尾的1"><a href="#2-消除二进制末尾的1" class="headerlink" title="2).消除二进制末尾的1"></a>2).消除二进制末尾的1</h5><ul><li><code>n &amp; (n - 1)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hammingWeight</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">        res += <span class="number">1</span>;</span><br><span class="line">        n &amp;= n - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ps：</code></p><ul><li><p><strong>算术右移 <code>&gt;&gt;</code></strong> ：舍弃最低位，高位用符号位填补；</p></li><li><p><strong>逻辑右移 <code>&gt;&gt;&gt;</code></strong> ：舍弃最低位，高位用 0 填补。</p></li><li><p><strong>逻辑左移&lt;&lt;</strong>:舍弃最高位，低位用0填补。</p></li></ul><h4 id="3-136-只出现一次的数字"><a href="#3-136-只出现一次的数字" class="headerlink" title="3.136. 只出现一次的数字"></a>3.<a href="https://leetcode.cn/problems/single-number/">136. 只出现一次的数字</a></h4><p>给定一个<strong>非空</strong>整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p><p><strong>说明：</strong></p><p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">singleNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x : nums)&#123;</span><br><span class="line">        res ^= x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-137-只出现一次的数字-II"><a href="#4-137-只出现一次的数字-II" class="headerlink" title="4.137. 只出现一次的数字 II"></a>4.<a href="https://leetcode.cn/problems/single-number-ii/">137. 只出现一次的数字 II</a></h4><p>给你一个整数数组 <code>nums</code> ，除某个元素仅出现 <strong>一次</strong> 外，其余每个元素都恰出现 <strong>三次 。</strong>请你找出并返回那个只出现了一次的元素。</p><p>你必须设计并实现线性时间复杂度的算法且不使用额外空间来解决此问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> num : nums)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">32</span>;++i)&#123;</span><br><span class="line">            <span class="comment">// if((num &gt;&gt; i) &amp; 1 != 0)&#123;</span></span><br><span class="line">            <span class="comment">//     res[i]++;</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            res[i] += (num&gt;&gt;i) &amp; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">32</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(res[i]%<span class="number">3</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                ans |= <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-260-只出现一次的数字-III"><a href="#5-260-只出现一次的数字-III" class="headerlink" title="5.260. 只出现一次的数字 III "></a>5.<a href="https://leetcode.cn/problems/single-number-iii/">260. 只出现一次的数字 III </a></h4><p>给你一个整数数组 <code>nums</code>，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。你可以按 <strong>任意顺序</strong> 返回答案。</p><p>你必须设计并实现线性时间复杂度的算法且仅使用常量额外空间来解决此问题。</p><p>求二进制最右边的1：<code>eor &amp; (-eor)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] singleNumber(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">eor</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i : nums)&#123;</span><br><span class="line">        eor ^= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求二进制最右边的1</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">rightOne</span> <span class="operator">=</span> eor &amp; (-eor);</span><br><span class="line">    <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; nums.length;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>((rightOne &amp; nums[i]) != <span class="number">0</span>)&#123;  <span class="comment">// ==rightOne</span></span><br><span class="line">            res[<span class="number">0</span>] ^= nums[i];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res[<span class="number">1</span>] ^= nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//res[1] = eor ^ res[0];</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、排序算法"><a href="#二、排序算法" class="headerlink" title="二、排序算法"></a>二、排序算法</h3><h4 id="1-选择排序"><a href="#1-选择排序" class="headerlink" title="1.选择排序"></a>1.选择排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] Selectsort(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] &lt; nums[minIndex]) &#123;</span><br><span class="line">                minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(nums, i, minIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    nums[i] = nums[i] ^ nums[j];</span><br><span class="line">    nums[j] = nums[i] ^ nums[j];</span><br><span class="line">    nums[i] = nums[i] ^ nums[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-插入排序"><a href="#2-插入排序" class="headerlink" title="2.插入排序"></a>2.插入排序</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static int[] insertionSort(int[] nums) &#123;</span><br><span class="line">    int n = nums.length;</span><br><span class="line">    for (int i = 1; i &lt; n; i++) &#123;</span><br><span class="line">        for (int j = i - 1; j &gt;=0 &amp;&amp; nums[j+1] &lt; nums[j] ; j--) &#123;</span><br><span class="line">            swap(nums,j,j+1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return nums;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-归并排序"><a href="#3-归并排序" class="headerlink" title="3.归并排序"></a>3.归并排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归方法实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort1</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">process(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请把arr[L..R]排有序</span></span><br><span class="line"><span class="comment">// l...r N</span></span><br><span class="line"><span class="comment">// T(N) = 2 * T(N / 2) + O(N)</span></span><br><span class="line"><span class="comment">// O(N * logN)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> R)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (L == R) &#123; <span class="comment">// base case</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> L + ((R - L) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">process(arr, L, mid);</span><br><span class="line">process(arr, mid + <span class="number">1</span>, R);</span><br><span class="line">merge(arr, L, mid, R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> M, <span class="type">int</span> R)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] help = <span class="keyword">new</span> <span class="title class_">int</span>[R - L + <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> L;</span><br><span class="line"><span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> M + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (p1 &lt;= M &amp;&amp; p2 &lt;= R) &#123;</span><br><span class="line">help[i++] = arr[p1] &lt;= arr[p2] ? arr[p1++] : arr[p2++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 要么p1越界了，要么p2越界了</span></span><br><span class="line"><span class="keyword">while</span> (p1 &lt;= M) &#123;</span><br><span class="line">help[i++] = arr[p1++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (p2 &lt;= R) &#123;</span><br><span class="line">help[i++] = arr[p2++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; help.length; i++) &#123;</span><br><span class="line">arr[L + i] = help[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非递归方法实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort2</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> arr.length;</span><br><span class="line"><span class="comment">// 步长</span></span><br><span class="line"><span class="type">int</span> <span class="variable">mergeSize</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (mergeSize &lt; N) &#123; <span class="comment">// log N</span></span><br><span class="line"><span class="comment">// 当前左组的，第一个位置</span></span><br><span class="line"><span class="type">int</span> <span class="variable">L</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (L &lt; N) &#123;</span><br><span class="line"><span class="keyword">if</span> (mergeSize &gt;= N - L) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">M</span> <span class="operator">=</span> L + mergeSize - <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">R</span> <span class="operator">=</span> M + Math.min(mergeSize, N - M - <span class="number">1</span>);</span><br><span class="line">merge(arr, L, M, R);</span><br><span class="line">L = R + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 防止溢出</span></span><br><span class="line"><span class="keyword">if</span> (mergeSize &gt; N / <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">mergeSize &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="315-计算右侧小于当前元素的个数"><a href="#315-计算右侧小于当前元素的个数" class="headerlink" title="315. 计算右侧小于当前元素的个数"></a><a href="https://leetcode.cn/problems/count-of-smaller-numbers-after-self/">315. 计算右侧小于当前元素的个数</a></h5><p>给你一个整数数组 <code>nums</code> ，按要求返回一个新数组 <code>counts</code> 。数组 <code>counts</code> 有该性质： <code>counts[i]</code> 的值是 <code>nums[i]</code> 右侧小于 <code>nums[i]</code> 的元素的数量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h5 id="剑指-Offer-51-数组中的逆序对"><a href="#剑指-Offer-51-数组中的逆序对" class="headerlink" title="剑指 Offer 51. 数组中的逆序对"></a><a href="https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof/">剑指 Offer 51. 数组中的逆序对</a></h5><p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法与数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
